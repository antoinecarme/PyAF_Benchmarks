BENCH_DATA YAHOO_STOCKS_nasdaq
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  AMZN N= 1251 H= 7 HEAD= [223.899994 222.520004 221.320007 211.699997 209.960007] TAIL= [748.210022 742.630005 741.200012 735.440002 736.070007]
         AMZN       Date
0  223.899994 2011-07-28
1  222.520004 2011-07-29
2  221.320007 2011-08-01
3  211.699997 2011-08-02
4  209.960007 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AMZN    1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AMZN'], 'Transformations': [('AMZN', 'None', '_', 'T+S+R'), ('AMZN', 'None', 'Diff_', 'T+S+R'), ('AMZN', 'None', 'RelDiff_', 'T+S+R'), ('AMZN', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMZN', 'Transformation': '_AMZN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.303, ('TRAINING', {'Signal': 'AMZN', 'Transformation': '_AMZN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMZN', 'Transformation': 'Diff_AMZN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.78, ('TRAINING', {'Signal': 'AMZN', 'Transformation': 'Diff_AMZN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMZN', 'Transformation': 'RelDiff_AMZN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.248, ('TRAINING', {'Signal': 'AMZN', 'Transformation': 'RelDiff_AMZN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMZN', 'Transformation': 'CumSum_AMZN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.789, ('TRAINING', {'Signal': 'AMZN', 'Transformation': 'CumSum_AMZN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.122, ('SIGNAL_TRAINING', {'Signals': ['AMZN'], 'Transformations': [('AMZN', 'None', '_', 'T+S+R'), ('AMZN', 'None', 'Diff_', 'T+S+R'), ('AMZN', 'None', 'RelDiff_', 'T+S+R'), ('AMZN', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AMZN'], 'Transformations': [('AMZN', [('AMZN', 'None', 'CumSum_', 'T+S+R'), ('AMZN', 'None', 'Diff_', 'T+S+R'), ('AMZN', 'None', 'RelDiff_', 'T+S+R'), ('AMZN', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AMZN', 'Transformations': [('AMZN', 'None', 'CumSum_', 'T+S+R'), ('AMZN', 'None', 'Diff_', 'T+S+R'), ('AMZN', 'None', 'RelDiff_', 'T+S+R'), ('AMZN', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': 'AMZN', 'Transformations': [('AMZN', 'None', 'CumSum_', 'T+S+R'), ('AMZN', 'None', 'Diff_', 'T+S+R'), ('AMZN', 'None', 'RelDiff_', 'T+S+R'), ('AMZN', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AMZN', 'Model': '_AMZN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AMZN', 'Model': '_AMZN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AMZN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.196, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AMZN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.232, ('FINALIZE_TRAINING', {'Signals': ['AMZN'], 'Transformations': [('AMZN', [('AMZN', 'None', 'CumSum_', 'T+S+R'), ('AMZN', 'None', 'Diff_', 'T+S+R'), ('AMZN', 'None', 'RelDiff_', 'T+S+R'), ('AMZN', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AMZN' Length=1251  Min=173.100006 Max=753.780029  Mean=354.26529229416496 StdDev=146.34764289393203
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AMZN' Min=0.0 Max=1.0  Mean=0.3119881503038461 StdDev=0.2520280310967956
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AMZN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AMZN_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AMZN_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_AMZN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0142 MAPE_Forecast=0.0151 MAPE_Test=0.0069
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0142 SMAPE_Forecast=0.0151 SMAPE_Test=0.0069
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0005 MASE_Test=1.1511
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=20.84468760214229 CRPS_Forecast=21.044671176271393 CRPS_Test=2.470716285714275
INFO:pyaf.std:MODEL_L1 L1_Fit=3.9826030824120613 L1_Forecast=8.897989662650602 L1_Test=5.168579142857133
INFO:pyaf.std:MODEL_L2 L2_Fit=5.9774400648678405 L2_Forecast=12.723711639639898 L2_Test=5.936327592538689
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.43332712483118896 LnQ_Forecast=0.11956085578262439 LnQ_Test=0.0004447657140654109
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=2.9700009999999963 MedAE_Forecast=6.200013000000013 MedAE_Test=5.580016999999998
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.08748361573995457
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _AMZN_Lag1Trend_residue_bestCycle_byMAPE None 0.0002066456486312096 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ... ForecastMAPE      TestMAPE
0    None          _AMZN  ...       0.0150  6.800000e-03
1    None          _AMZN  ...       0.0150  7.200000e-03
2    None          _AMZN  ...       0.0150  6.600000e-03
3    None          _AMZN  ...       0.0150  6.600000e-03
4    None          _AMZN  ...       0.0150  6.900000e-03
..    ...            ...  ...          ...           ...
219  None   RelDiff_AMZN  ...   77579.1214  1.085276e+06
220  None   RelDiff_AMZN  ...   77579.1214  1.085276e+06
221  None   RelDiff_AMZN  ...   95166.3800  1.624957e+06
222  None   RelDiff_AMZN  ...  189937.8134  2.444600e+06
223  None   RelDiff_AMZN  ...  446862.6474  6.095131e+06

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None          _AMZN             T+S+R  ...  0.0136        0.015   0.0068
1  None          _AMZN             T+S+R  ...  0.0138        0.015   0.0072
2  None          _AMZN             T+S+R  ...  0.0139        0.015   0.0066
3  None          _AMZN             T+S+R  ...  0.0136        0.015   0.0066
4  None          _AMZN             T+S+R  ...  0.0137        0.015   0.0069

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AMZN'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.155, ('FORECASTING', {'Signals': ['AMZN'], 'Horizon': 7}))
7 0    739.950012
1    745.719971
2    744.429993
3    744.859985
4    739.609985
5    735.590027
6    736.669983
Name: AMZN, dtype: float64
7 0    736.070007
1    736.070007
2    736.070007
3    736.070007
4    736.070007
5    736.070007
6    736.070007
Name: AMZN_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AMZN AMZN [739.950012, 745.719971, 744.429993, 744.859985, 739.609985, 735.590027, 736.669983]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AMZN AMZN [736.070007, 736.070007, 736.070007, 736.070007, 736.070007, 736.070007, 736.070007]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AMZN AMZN 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AMZN AMZN 12.616312026977539
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AMZN AMZN Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AMZN AMZN 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AMZN AMZN 0.0068 0.0068 1.696
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AMZN AMZN 5.042838142857136 6.192750593619923 -1.684784953669649
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nasdaq_AMZN_7'
