BENCH_DATA YAHOO_STOCKS_smi
TIME :  Date N= 1031 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-02T00:00:00.000000000' '2011-08-03T00:00:00.000000000'
 '2011-08-04T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  SLHN.VX N= 1031 H= 7 HEAD= [117.8 117.3 110.2 107.2 109.9] TAIL= [220.2 221.9 221.9 219.6 222.5]
   SLHN.VX       Date
0    117.8 2011-07-28
1    117.3 2011-07-29
2    110.2 2011-08-02
3    107.2 2011-08-03
4    109.9 2011-08-04
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1031 entries, 0 to 1030
Data columns (total 2 columns):
 #   Column   Non-Null Count  Dtype         
---  ------   --------------  -----         
 0   SLHN.VX  1031 non-null   float64       
 1   Date     1031 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 24.2 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['SLHN.VX'], 'Transformations': [('SLHN.VX', 'None', '_', 'T+S+R'), ('SLHN.VX', 'None', 'Diff_', 'T+S+R'), ('SLHN.VX', 'None', 'RelDiff_', 'T+S+R'), ('SLHN.VX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'SLHN.VX', 'Transformation': '_SLHN.VX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.615, ('TRAINING', {'Signal': 'SLHN.VX', 'Transformation': '_SLHN.VX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'SLHN.VX', 'Transformation': 'Diff_SLHN.VX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.711, ('TRAINING', {'Signal': 'SLHN.VX', 'Transformation': 'Diff_SLHN.VX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'SLHN.VX', 'Transformation': 'RelDiff_SLHN.VX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.265, ('TRAINING', {'Signal': 'SLHN.VX', 'Transformation': 'RelDiff_SLHN.VX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'SLHN.VX', 'Transformation': 'CumSum_SLHN.VX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.576, ('TRAINING', {'Signal': 'SLHN.VX', 'Transformation': 'CumSum_SLHN.VX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 13.17, ('SIGNAL_TRAINING', {'Signals': ['SLHN.VX'], 'Transformations': [('SLHN.VX', 'None', '_', 'T+S+R'), ('SLHN.VX', 'None', 'Diff_', 'T+S+R'), ('SLHN.VX', 'None', 'RelDiff_', 'T+S+R'), ('SLHN.VX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['SLHN.VX'], 'Transformations': [('SLHN.VX', [('SLHN.VX', 'None', 'CumSum_', 'T+S+R'), ('SLHN.VX', 'None', 'Diff_', 'T+S+R'), ('SLHN.VX', 'None', 'RelDiff_', 'T+S+R'), ('SLHN.VX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'SLHN.VX', 'Transformations': [('SLHN.VX', 'None', 'CumSum_', 'T+S+R'), ('SLHN.VX', 'None', 'Diff_', 'T+S+R'), ('SLHN.VX', 'None', 'RelDiff_', 'T+S+R'), ('SLHN.VX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'SLHN.VX', 'Transformations': [('SLHN.VX', 'None', 'CumSum_', 'T+S+R'), ('SLHN.VX', 'None', 'Diff_', 'T+S+R'), ('SLHN.VX', 'None', 'RelDiff_', 'T+S+R'), ('SLHN.VX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'SLHN.VX', 'Model': '_SLHN.VX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'SLHN.VX', 'Model': '_SLHN.VX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'SLHN.VX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.187, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'SLHN.VX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FINALIZE_TRAINING', {'Signals': ['SLHN.VX'], 'Transformations': [('SLHN.VX', [('SLHN.VX', 'None', 'CumSum_', 'T+S+R'), ('SLHN.VX', 'None', 'Diff_', 'T+S+R'), ('SLHN.VX', 'None', 'RelDiff_', 'T+S+R'), ('SLHN.VX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-09-24T00:00:00.000000 TimeDelta=<DateOffset: days=2> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='SLHN.VX' Length=1031  Min=75.55 Max=271.9  Mean=166.89662948593576 StdDev=58.51306907091305
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_SLHN.VX' Min=0.0 Max=1.0  Mean=0.465223475864202 StdDev=0.2980039168368374
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_SLHN.VX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_SLHN.VX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_SLHN.VX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_SLHN.VX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0132 MAPE_Forecast=0.0119 MAPE_Test=0.0102
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0132 SMAPE_Forecast=0.0119 SMAPE_Test=0.0103
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9988 MASE_Forecast=1.0053 MASE_Test=0.8738
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=14.219809025769552 CRPS_Forecast=3.9681705365853657 CRPS_Test=1.7000000000000008
INFO:pyaf.std:MODEL_L1 L1_Fit=1.7620268620268624 L1_Forecast=2.8848780487804877 L1_Test=2.2428571428571495
INFO:pyaf.std:MODEL_L2 L2_Fit=2.550499424386784 L2_Forecast=3.9509739459975193 L2_Test=2.8145032548264295
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.32381759948158684 LnQ_Forecast=0.05565060703937925 LnQ_Test=0.001177277365155706
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=1.200000000000017 MedAE_Forecast=1.9999999999999716 MedAE_Test=2.30000000000004
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.21517697988286227
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _SLHN.VX_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split   Transformation DecompositionType  ... FitMAPE ForecastMAPE  TestMAPE
0    None         _SLHN.VX             T+S+R  ...  0.0132       0.0119    0.0102
1    None         _SLHN.VX             T+S+R  ...  0.0132       0.0119    0.0102
2    None   CumSum_SLHN.VX             T+S+R  ...  0.0136       0.0119    0.0102
3    None     Diff_SLHN.VX             T+S+R  ...  0.0132       0.0119    0.0102
4    None     Diff_SLHN.VX             T+S+R  ...  0.0132       0.0119    0.0102
..    ...              ...               ...  ...     ...          ...       ...
219  None  RelDiff_SLHN.VX             T+S+R  ...  3.6352      48.7498  117.4946
220  None  RelDiff_SLHN.VX             T+S+R  ...  3.6823      50.3152  130.5042
221  None  RelDiff_SLHN.VX             T+S+R  ...  7.3450      65.2733  134.1643
222  None  RelDiff_SLHN.VX             T+S+R  ...  7.3450      65.2733  134.1643
223  None  RelDiff_SLHN.VX             T+S+R  ...  4.3489      88.6928  250.7323

[224 rows x 10 columns]
  Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _SLHN.VX             T+S+R  ...  0.0132       0.0119   0.0102
1  None        _SLHN.VX             T+S+R  ...  0.0132       0.0119   0.0102
2  None  CumSum_SLHN.VX             T+S+R  ...  0.0136       0.0119   0.0102
3  None    Diff_SLHN.VX             T+S+R  ...  0.0132       0.0119   0.0102
4  None    Diff_SLHN.VX             T+S+R  ...  0.0132       0.0119   0.0102

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['SLHN.VX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.169, ('FORECASTING', {'Signals': ['SLHN.VX'], 'Horizon': 7}))
7 0    219.6
1    221.6
2    220.2
3    219.6
4    220.1
5    220.6
6    222.8
Name: SLHN.VX, dtype: float64
7 0    222.5
1    222.5
2    222.5
3    222.5
4    222.5
5    222.5
6    222.5
Name: SLHN.VX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_SLHN.VX SLHN.VX [219.6, 221.6, 220.2, 219.6, 220.1, 220.6, 222.8]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_SLHN.VX SLHN.VX [222.5, 222.5, 222.5, 222.5, 222.5, 222.5, 222.5]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_SLHN.VX SLHN.VX 1031 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_SLHN.VX SLHN.VX 13.666945219039917
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_SLHN.VX SLHN.VX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_SLHN.VX SLHN.VX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_SLHN.VX SLHN.VX 0.0088 0.0088 1.619
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_SLHN.VX SLHN.VX 1.9428571428571502 2.150747378404612 -2.930974679105921
BENCHMARK_SUCCESS 'YAHOO_STOCKS_smi_SLHN.VX_7'
