BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  TGR.AX N= 1299 H= 7 HEAD= [1.43  1.42  1.45  1.435 1.4  ] TAIL= [4.27 4.18 4.05 4.04 4.1 ]
   TGR.AX       Date
0   1.430 2011-07-28
1   1.420 2011-07-29
2   1.450 2011-08-01
3   1.435 2011-08-02
4   1.400 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   TGR.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['TGR.AX'], 'Transformations': [('TGR.AX', 'None', '_', 'T+S+R'), ('TGR.AX', 'None', 'Diff_', 'T+S+R'), ('TGR.AX', 'None', 'RelDiff_', 'T+S+R'), ('TGR.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TGR.AX', 'Transformation': '_TGR.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.065, ('TRAINING', {'Signal': 'TGR.AX', 'Transformation': '_TGR.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TGR.AX', 'Transformation': 'Diff_TGR.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.466, ('TRAINING', {'Signal': 'TGR.AX', 'Transformation': 'Diff_TGR.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TGR.AX', 'Transformation': 'RelDiff_TGR.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.193, ('TRAINING', {'Signal': 'TGR.AX', 'Transformation': 'RelDiff_TGR.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TGR.AX', 'Transformation': 'CumSum_TGR.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.859, ('TRAINING', {'Signal': 'TGR.AX', 'Transformation': 'CumSum_TGR.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.586, ('SIGNAL_TRAINING', {'Signals': ['TGR.AX'], 'Transformations': [('TGR.AX', 'None', '_', 'T+S+R'), ('TGR.AX', 'None', 'Diff_', 'T+S+R'), ('TGR.AX', 'None', 'RelDiff_', 'T+S+R'), ('TGR.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['TGR.AX'], 'Transformations': [('TGR.AX', [('TGR.AX', 'None', 'CumSum_', 'T+S+R'), ('TGR.AX', 'None', 'Diff_', 'T+S+R'), ('TGR.AX', 'None', 'RelDiff_', 'T+S+R'), ('TGR.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'TGR.AX', 'Transformations': [('TGR.AX', 'None', 'CumSum_', 'T+S+R'), ('TGR.AX', 'None', 'Diff_', 'T+S+R'), ('TGR.AX', 'None', 'RelDiff_', 'T+S+R'), ('TGR.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'TGR.AX', 'Transformations': [('TGR.AX', 'None', 'CumSum_', 'T+S+R'), ('TGR.AX', 'None', 'Diff_', 'T+S+R'), ('TGR.AX', 'None', 'RelDiff_', 'T+S+R'), ('TGR.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TGR.AX', 'Model': '_TGR.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TGR.AX', 'Model': '_TGR.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TGR.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.192, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TGR.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.227, ('FINALIZE_TRAINING', {'Signals': ['TGR.AX'], 'Transformations': [('TGR.AX', [('TGR.AX', 'None', 'CumSum_', 'T+S+R'), ('TGR.AX', 'None', 'Diff_', 'T+S+R'), ('TGR.AX', 'None', 'RelDiff_', 'T+S+R'), ('TGR.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='TGR.AX' Length=1299  Min=1.155 Max=5.08  Mean=2.859516551193221 StdDev=1.1467362732402824
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_TGR.AX' Min=0.0 Max=1.0  Mean=0.43427173278808295 StdDev=0.2921621078319188
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_TGR.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_TGR.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_TGR.AX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_TGR.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0142 MAPE_Forecast=0.0139 MAPE_Test=0.0151
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0142 SMAPE_Forecast=0.0139 SMAPE_Test=0.015
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0009 MASE_Test=0.9925
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.31303892596932803 CRPS_Forecast=0.09729888167158751 CRPS_Test=0.05785714285714289
INFO:pyaf.std:MODEL_L1 L1_Fit=0.034598257502420154 L1_Forecast=0.05694980694980699 L1_Test=0.06285714285714292
INFO:pyaf.std:MODEL_L2 L2_Fit=0.049963374775668055 L2_Forecast=0.07639311052645613 L2_Test=0.0725061573739973
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.40240877193319413 LnQ_Forecast=0.0888323212407642 LnQ_Test=0.0021098463585833413
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.020000000000000462 MedAE_Forecast=0.04000000000000048 MedAE_Test=0.0600000000000005
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.07006369426751591
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _TGR.AX_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ...  FitMAPE ForecastMAPE   TestMAPE
0    None         _TGR.AX             T+S+R  ...   0.0142       0.0139     0.0151
1    None         _TGR.AX             T+S+R  ...   0.0142       0.0139     0.0151
2    None   CumSum_TGR.AX             T+S+R  ...   0.0143       0.0139     0.0151
3    None     Diff_TGR.AX             T+S+R  ...   0.0142       0.0139     0.0151
4    None     Diff_TGR.AX             T+S+R  ...   0.0142       0.0139     0.0151
..    ...             ...               ...  ...      ...          ...        ...
203  None  RelDiff_TGR.AX             T+S+R  ...  12.9848     431.3507  1144.1033
204  None  RelDiff_TGR.AX             T+S+R  ...  12.9848     431.3507  1144.1033
205  None  RelDiff_TGR.AX             T+S+R  ...  12.9804     431.7526  1144.6868
206  None  RelDiff_TGR.AX             T+S+R  ...  47.8550    1239.6598  3016.2582
207  None  RelDiff_TGR.AX             T+S+R  ...  47.8550    1239.6598  3016.2582

[208 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _TGR.AX             T+S+R  ...  0.0142       0.0139   0.0151
1  None        _TGR.AX             T+S+R  ...  0.0142       0.0139   0.0151
2  None  CumSum_TGR.AX             T+S+R  ...  0.0143       0.0139   0.0151
3  None    Diff_TGR.AX             T+S+R  ...  0.0142       0.0139   0.0151
4  None    Diff_TGR.AX             T+S+R  ...  0.0142       0.0139   0.0151

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['TGR.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.166, ('FORECASTING', {'Signals': ['TGR.AX'], 'Horizon': 7}))
7 0    4.12
1    4.11
2    4.08
3    4.11
4    4.11
5    4.06
6    4.11
Name: TGR.AX, dtype: float64
7 0    4.1
1    4.1
2    4.1
3    4.1
4    4.1
5    4.1
6    4.1
Name: TGR.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_TGR.AX TGR.AX [4.12, 4.11, 4.08, 4.11, 4.11, 4.06, 4.11]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_TGR.AX TGR.AX [4.1, 4.1, 4.1, 4.1, 4.1, 4.1, 4.1]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_TGR.AX TGR.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_TGR.AX TGR.AX 12.079237699508667
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_TGR.AX TGR.AX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_TGR.AX TGR.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_TGR.AX TGR.AX 0.0042 0.0042 0.605
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_TGR.AX TGR.AX 0.01714285714285754 0.02000000000000021 3.571428441873081e-08
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_TGR.AX_7'
