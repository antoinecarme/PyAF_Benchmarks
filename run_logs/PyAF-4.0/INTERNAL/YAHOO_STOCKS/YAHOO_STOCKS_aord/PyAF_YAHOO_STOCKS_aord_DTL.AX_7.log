BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  DTL.AX N= 1299 H= 7 HEAD= [13.7  13.63 13.45 13.89 13.8 ] TAIL= [1.13  1.12  1.08  1.115 1.14 ]
   DTL.AX       Date
0   13.70 2011-07-28
1   13.63 2011-07-29
2   13.45 2011-08-01
3   13.89 2011-08-02
4   13.80 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   DTL.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['DTL.AX'], 'Transformations': [('DTL.AX', 'None', '_', 'T+S+R'), ('DTL.AX', 'None', 'Diff_', 'T+S+R'), ('DTL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DTL.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DTL.AX', 'Transformation': '_DTL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.809, ('TRAINING', {'Signal': 'DTL.AX', 'Transformation': '_DTL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DTL.AX', 'Transformation': 'Diff_DTL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.758, ('TRAINING', {'Signal': 'DTL.AX', 'Transformation': 'Diff_DTL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DTL.AX', 'Transformation': 'RelDiff_DTL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.832, ('TRAINING', {'Signal': 'DTL.AX', 'Transformation': 'RelDiff_DTL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DTL.AX', 'Transformation': 'CumSum_DTL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.115, ('TRAINING', {'Signal': 'DTL.AX', 'Transformation': 'CumSum_DTL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 10.515, ('SIGNAL_TRAINING', {'Signals': ['DTL.AX'], 'Transformations': [('DTL.AX', 'None', '_', 'T+S+R'), ('DTL.AX', 'None', 'Diff_', 'T+S+R'), ('DTL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DTL.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['DTL.AX'], 'Transformations': [('DTL.AX', [('DTL.AX', 'None', 'CumSum_', 'T+S+R'), ('DTL.AX', 'None', 'Diff_', 'T+S+R'), ('DTL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DTL.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'DTL.AX', 'Transformations': [('DTL.AX', 'None', 'CumSum_', 'T+S+R'), ('DTL.AX', 'None', 'Diff_', 'T+S+R'), ('DTL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DTL.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'DTL.AX', 'Transformations': [('DTL.AX', 'None', 'CumSum_', 'T+S+R'), ('DTL.AX', 'None', 'Diff_', 'T+S+R'), ('DTL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DTL.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DTL.AX', 'Model': '_DTL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DTL.AX', 'Model': '_DTL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DTL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.181, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DTL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.215, ('FINALIZE_TRAINING', {'Signals': ['DTL.AX'], 'Transformations': [('DTL.AX', [('DTL.AX', 'None', 'CumSum_', 'T+S+R'), ('DTL.AX', 'None', 'Diff_', 'T+S+R'), ('DTL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DTL.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='DTL.AX' Length=1299  Min=0.55 Max=13.89  Mean=1.6710615858352622 StdDev=2.6912998337761254
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_DTL.AX' Min=0.0 Max=1.0  Mean=0.08403760013757529 StdDev=0.20174661422609574
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_DTL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_DTL.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_DTL.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_DTL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0254 MAPE_Forecast=0.0158 MAPE_Test=0.0173
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0182 SMAPE_Forecast=0.0159 SMAPE_Test=0.0174
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9973 MASE_Test=1.0519
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.46753882152137366 CRPS_Forecast=0.020822063138769022 CRPS_Test=0.007142857142857102
INFO:pyaf.std:MODEL_L1 L1_Fit=0.03985382381413359 L1_Forecast=0.016818532818532832 L1_Test=0.019285714285714222
INFO:pyaf.std:MODEL_L2 L2_Fit=0.3673945772754725 L2_Forecast=0.02636673345723041 L2_Test=0.024421887138969606
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=5.941447539429758 LnQ_Forecast=0.17005683481123612 LnQ_Test=0.003411005244667224
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.010000000000000009 MedAE_Forecast=0.010000000000000009 MedAE_Test=0.02499999999999991
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.9857571214392803
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _DTL.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ...  FitMAPE ForecastMAPE TestMAPE
0    None         _DTL.AX             T+S+R  ...   0.0254       0.0158   0.0173
1    None   CumSum_DTL.AX             T+S+R  ...   0.0263       0.0158   0.0173
2    None     Diff_DTL.AX             T+S+R  ...   0.0254       0.0158   0.0173
3    None     Diff_DTL.AX             T+S+R  ...   0.0254       0.0158   0.0173
4    None         _DTL.AX             T+S+R  ...   0.0254       0.0158   0.0173
..    ...             ...               ...  ...      ...          ...      ...
179  None  RelDiff_DTL.AX             T+S+R  ...  12.7880      20.5268  54.1869
180  None  RelDiff_DTL.AX             T+S+R  ...  12.7880      21.1676  54.8995
181  None  RelDiff_DTL.AX             T+S+R  ...  12.7880      21.4009  51.6903
182  None  RelDiff_DTL.AX             T+S+R  ...  12.7880      21.4009  51.6903
183  None  RelDiff_DTL.AX             T+S+R  ...  12.7880      23.5033  60.8942

[184 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _DTL.AX             T+S+R  ...  0.0254       0.0158   0.0173
1  None  CumSum_DTL.AX             T+S+R  ...  0.0263       0.0158   0.0173
2  None    Diff_DTL.AX             T+S+R  ...  0.0254       0.0158   0.0173
3  None    Diff_DTL.AX             T+S+R  ...  0.0254       0.0158   0.0173
4  None        _DTL.AX             T+S+R  ...  0.0254       0.0158   0.0173

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['DTL.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.152, ('FORECASTING', {'Signals': ['DTL.AX'], 'Horizon': 7}))
7 0    1.160
1    1.160
2    1.155
3    1.300
4    1.250
5    1.225
6    1.260
Name: DTL.AX, dtype: float64
7 0    1.14
1    1.14
2    1.14
3    1.14
4    1.14
5    1.14
6    1.14
Name: DTL.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_DTL.AX DTL.AX [1.16, 1.16, 1.155, 1.3, 1.25, 1.225, 1.26]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_DTL.AX DTL.AX [1.14, 1.14, 1.14, 1.14, 1.14, 1.14, 1.14]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_DTL.AX DTL.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_DTL.AX DTL.AX 11.001400709152222
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_DTL.AX DTL.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_DTL.AX DTL.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_DTL.AX DTL.AX 0.0605 0.0633 1.7473
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_DTL.AX DTL.AX 0.07571428571428582 0.0928516481890795 -1.9844577740083356
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_DTL.AX_7'
