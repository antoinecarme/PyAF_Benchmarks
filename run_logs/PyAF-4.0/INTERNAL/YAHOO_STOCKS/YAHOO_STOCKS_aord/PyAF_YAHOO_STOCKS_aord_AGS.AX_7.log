BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  AGS.AX N= 1299 H= 7 HEAD= [0.205 0.205 0.205 0.19  0.185] TAIL= [0.041 0.042 0.041 0.046 0.046]
   AGS.AX       Date
0   0.205 2011-07-28
1   0.205 2011-07-29
2   0.205 2011-08-01
3   0.190 2011-08-02
4   0.185 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AGS.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AGS.AX'], 'Transformations': [('AGS.AX', 'None', '_', 'T+S+R'), ('AGS.AX', 'None', 'Diff_', 'T+S+R'), ('AGS.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGS.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGS.AX', 'Transformation': '_AGS.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.368, ('TRAINING', {'Signal': 'AGS.AX', 'Transformation': '_AGS.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGS.AX', 'Transformation': 'Diff_AGS.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.819, ('TRAINING', {'Signal': 'AGS.AX', 'Transformation': 'Diff_AGS.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGS.AX', 'Transformation': 'RelDiff_AGS.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.646, ('TRAINING', {'Signal': 'AGS.AX', 'Transformation': 'RelDiff_AGS.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGS.AX', 'Transformation': 'CumSum_AGS.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.442, ('TRAINING', {'Signal': 'AGS.AX', 'Transformation': 'CumSum_AGS.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 8.275, ('SIGNAL_TRAINING', {'Signals': ['AGS.AX'], 'Transformations': [('AGS.AX', 'None', '_', 'T+S+R'), ('AGS.AX', 'None', 'Diff_', 'T+S+R'), ('AGS.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGS.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AGS.AX'], 'Transformations': [('AGS.AX', [('AGS.AX', 'None', 'CumSum_', 'T+S+R'), ('AGS.AX', 'None', 'Diff_', 'T+S+R'), ('AGS.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGS.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AGS.AX', 'Transformations': [('AGS.AX', 'None', 'CumSum_', 'T+S+R'), ('AGS.AX', 'None', 'Diff_', 'T+S+R'), ('AGS.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGS.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'AGS.AX', 'Transformations': [('AGS.AX', 'None', 'CumSum_', 'T+S+R'), ('AGS.AX', 'None', 'Diff_', 'T+S+R'), ('AGS.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGS.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AGS.AX', 'Model': '_AGS.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AGS.AX', 'Model': '_AGS.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AGS.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.19, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AGS.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.224, ('FINALIZE_TRAINING', {'Signals': ['AGS.AX'], 'Transformations': [('AGS.AX', [('AGS.AX', 'None', 'CumSum_', 'T+S+R'), ('AGS.AX', 'None', 'Diff_', 'T+S+R'), ('AGS.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGS.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AGS.AX' Length=1299  Min=0.028 Max=0.59  Mean=0.15302694380292534 StdDev=0.08510729566820933
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AGS.AX' Min=0.0 Max=1.0  Mean=0.22246787153545458 StdDev=0.15143646916051554
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AGS.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AGS.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AGS.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_AGS.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0382 MAPE_Forecast=0.0345 MAPE_Test=0.0259
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0385 SMAPE_Forecast=0.0248 SMAPE_Test=0.0267
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0204 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.020886334641055687 CRPS_Forecast=0.009990292982057686 CRPS_Test=0.00042857142857142844
INFO:pyaf.std:MODEL_L1 L1_Fit=0.007189738625363021 L1_Forecast=0.0016216216216216226 L1_Test=0.001142857142857143
INFO:pyaf.std:MODEL_L2 L2_Fit=0.012534753237386382 L2_Forecast=0.007709994516471165 L2_Test=0.001999999999999999
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=3.9109283981099034 LnQ_Forecast=2.7241128440649542 LnQ_Test=0.014983026633436536
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0050000000000000044 MedAE_Forecast=0.000999999999999994 MedAE_Test=0.0010000000000000009
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.3149466192170819
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _AGS.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE   TestMAPE
0    None         _AGS.AX             T+S+R  ...  0.0382       0.0345     0.0259
1    None   CumSum_AGS.AX             T+S+R  ...  0.0391       0.0345     0.0259
2    None   CumSum_AGS.AX             T+S+R  ...  0.0391       0.0345     0.0259
3    None     Diff_AGS.AX             T+S+R  ...  0.0382       0.0345     0.0259
4    None         _AGS.AX             T+S+R  ...  0.0382       0.0345     0.0259
..    ...             ...               ...  ...     ...          ...        ...
131  None  RelDiff_AGS.AX             T+S+R  ...  5.3738      81.8227   105.9298
132  None  RelDiff_AGS.AX             T+S+R  ...  4.2719     529.4989  2467.2370
133  None  RelDiff_AGS.AX             T+S+R  ...  3.7582     622.3474  3151.2696
134  None  RelDiff_AGS.AX             T+S+R  ...  3.7530     622.5388  3154.0985
135  None  RelDiff_AGS.AX             T+S+R  ...  3.7530     622.5388  3154.0985

[136 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _AGS.AX             T+S+R  ...  0.0382       0.0345   0.0259
1  None  CumSum_AGS.AX             T+S+R  ...  0.0391       0.0345   0.0259
2  None  CumSum_AGS.AX             T+S+R  ...  0.0391       0.0345   0.0259
3  None    Diff_AGS.AX             T+S+R  ...  0.0382       0.0345   0.0259
4  None        _AGS.AX             T+S+R  ...  0.0382       0.0345   0.0259

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AGS.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.159, ('FORECASTING', {'Signals': ['AGS.AX'], 'Horizon': 7}))
7 0    0.046
1    0.048
2    0.047
3    0.047
4    0.045
5    0.046
6    0.045
Name: AGS.AX, dtype: float64
7 0    0.046
1    0.046
2    0.046
3    0.046
4    0.046
5    0.046
6    0.046
Name: AGS.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AGS.AX AGS.AX [0.046, 0.048, 0.047, 0.047, 0.045, 0.046, 0.045]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AGS.AX AGS.AX [0.046, 0.046, 0.046, 0.046, 0.046, 0.046, 0.046]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AGS.AX AGS.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AGS.AX AGS.AX 8.753132343292236
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AGS.AX AGS.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AGS.AX AGS.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AGS.AX AGS.AX 0.0184 0.0185 0.7347
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AGS.AX AGS.AX 0.0008571428571428579 0.0010690449676496988 -0.07690858007680701
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_AGS.AX_7'
