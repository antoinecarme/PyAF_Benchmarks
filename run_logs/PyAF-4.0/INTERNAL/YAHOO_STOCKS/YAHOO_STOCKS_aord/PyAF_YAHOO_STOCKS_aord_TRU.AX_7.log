BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 606 H= 7 HEAD= ['2011-07-29T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000' '2011-08-04T00:00:00.000000000'
 '2011-08-05T00:00:00.000000000'] TAIL= ['2013-12-04T00:00:00.000000000' '2013-12-05T00:00:00.000000000'
 '2013-12-06T00:00:00.000000000' '2013-12-09T00:00:00.000000000'
 '2013-12-10T00:00:00.000000000']
SIGNAL :  TRU.AX N= 606 H= 7 HEAD= [5.71 5.71 5.7  5.65 5.2 ] TAIL= [8.4 8.4 8.4 8.4 8.4]
   TRU.AX       Date
0    5.71 2011-07-29
1    5.71 2011-08-02
2    5.70 2011-08-03
3    5.65 2011-08-04
4    5.20 2011-08-05
<class 'pandas.core.frame.DataFrame'>
Int64Index: 606 entries, 0 to 605
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   TRU.AX  606 non-null    float64       
 1   Date    606 non-null    datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 14.2 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['TRU.AX'], 'Transformations': [('TRU.AX', 'None', '_', 'T+S+R'), ('TRU.AX', 'None', 'Diff_', 'T+S+R'), ('TRU.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRU.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TRU.AX', 'Transformation': '_TRU.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.2, ('TRAINING', {'Signal': 'TRU.AX', 'Transformation': '_TRU.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TRU.AX', 'Transformation': 'Diff_TRU.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.835, ('TRAINING', {'Signal': 'TRU.AX', 'Transformation': 'Diff_TRU.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TRU.AX', 'Transformation': 'RelDiff_TRU.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.738, ('TRAINING', {'Signal': 'TRU.AX', 'Transformation': 'RelDiff_TRU.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TRU.AX', 'Transformation': 'CumSum_TRU.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.27, ('TRAINING', {'Signal': 'TRU.AX', 'Transformation': 'CumSum_TRU.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 8.045, ('SIGNAL_TRAINING', {'Signals': ['TRU.AX'], 'Transformations': [('TRU.AX', 'None', '_', 'T+S+R'), ('TRU.AX', 'None', 'Diff_', 'T+S+R'), ('TRU.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRU.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['TRU.AX'], 'Transformations': [('TRU.AX', [('TRU.AX', 'None', 'CumSum_', 'T+S+R'), ('TRU.AX', 'None', 'Diff_', 'T+S+R'), ('TRU.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRU.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'TRU.AX', 'Transformations': [('TRU.AX', 'None', 'CumSum_', 'T+S+R'), ('TRU.AX', 'None', 'Diff_', 'T+S+R'), ('TRU.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRU.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'TRU.AX', 'Transformations': [('TRU.AX', 'None', 'CumSum_', 'T+S+R'), ('TRU.AX', 'None', 'Diff_', 'T+S+R'), ('TRU.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRU.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TRU.AX', 'Model': '_TRU.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.024, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TRU.AX', 'Model': '_TRU.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TRU.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.166, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TRU.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.197, ('FINALIZE_TRAINING', {'Signals': ['TRU.AX'], 'Transformations': [('TRU.AX', [('TRU.AX', 'None', 'CumSum_', 'T+S+R'), ('TRU.AX', 'None', 'Diff_', 'T+S+R'), ('TRU.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRU.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-29T00:00:00.000000 TimeMax=2013-06-14T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='TRU.AX' Length=606  Min=4.3 Max=8.6  Mean=5.5106435643564335 StdDev=1.0139562818980397
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_TRU.AX' Min=0.0 Max=1.0  Mean=0.2815450149666129 StdDev=0.23580378648791614
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_TRU.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_TRU.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_TRU.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_TRU.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0118 MAPE_Forecast=0.0124 MAPE_Test=0.0034
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0118 SMAPE_Forecast=0.0125 SMAPE_Test=0.0034
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9979 MASE_Forecast=1.0177 MASE_Test=1.4286
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.14531694319305574 CRPS_Forecast=0.3308555555555556 CRPS_Test=0.02000000000000021
INFO:pyaf.std:MODEL_L1 L1_Fit=0.06116910229645098 L1_Forecast=0.08141666666666664 L1_Test=0.028571428571428723
INFO:pyaf.std:MODEL_L2 L2_Fit=0.10289950911950697 L2_Forecast=0.1366961350343649 L2_Test=0.054510811509540076
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.18817464412200868 LnQ_Forecast=0.05916274827722724 LnQ_Test=0.0002994928114661333
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.040000000000000036 MedAE_Forecast=0.04999999999999982 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.3279069767441861
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _TRU.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation  ...  ForecastMAPE      TestMAPE
0    None         _TRU.AX  ...  1.240000e-02  3.400000e-03
1    None   CumSum_TRU.AX  ...  1.240000e-02  3.400000e-03
2    None     Diff_TRU.AX  ...  1.240000e-02  3.400000e-03
3    None     Diff_TRU.AX  ...  1.240000e-02  3.400000e-03
4    None         _TRU.AX  ...  1.240000e-02  3.400000e-03
..    ...             ...  ...           ...           ...
147  None  RelDiff_TRU.AX  ...  2.973831e+05  2.716716e+06
148  None  RelDiff_TRU.AX  ...  2.973831e+05  2.716716e+06
149  None  RelDiff_TRU.AX  ...  1.742091e+06  1.474587e+07
150  None  RelDiff_TRU.AX  ...  1.742091e+06  1.474587e+07
151  None  RelDiff_TRU.AX  ...  3.820166e+06  1.685522e+07

[152 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _TRU.AX             T+S+R  ...  0.0118       0.0124   0.0034
1  None  CumSum_TRU.AX             T+S+R  ...  0.0124       0.0124   0.0034
2  None    Diff_TRU.AX             T+S+R  ...  0.0118       0.0124   0.0034
3  None    Diff_TRU.AX             T+S+R  ...  0.0118       0.0124   0.0034
4  None        _TRU.AX             T+S+R  ...  0.0118       0.0124   0.0034

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['TRU.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.133, ('FORECASTING', {'Signals': ['TRU.AX'], 'Horizon': 7}))
7 0    8.4
1    8.4
2    8.4
3    8.4
4    8.4
5    8.4
6    8.4
Name: TRU.AX, dtype: float64
7 0    8.4
1    8.4
2    8.4
3    8.4
4    8.4
5    8.4
6    8.4
Name: TRU.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_TRU.AX TRU.AX [8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_TRU.AX TRU.AX [8.4, 8.4, 8.4, 8.4, 8.4, 8.4, 8.4]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_TRU.AX TRU.AX 606 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_TRU.AX TRU.AX 8.470958948135376
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_TRU.AX TRU.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_TRU.AX TRU.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_TRU.AX TRU.AX 0.0 0.0 0.0
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_TRU.AX TRU.AX 0.0 0.0 1.0
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_TRU.AX_7'
