BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  TEN.AX N= 1299 H= 7 HEAD= [0.82502 0.81745 0.84773 0.82123 0.78717] TAIL= [0.93  0.96  0.95  0.945 0.95 ]
    TEN.AX       Date
0  0.82502 2011-07-28
1  0.81745 2011-07-29
2  0.84773 2011-08-01
3  0.82123 2011-08-02
4  0.78717 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   TEN.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['TEN.AX'], 'Transformations': [('TEN.AX', 'None', '_', 'T+S+R'), ('TEN.AX', 'None', 'Diff_', 'T+S+R'), ('TEN.AX', 'None', 'RelDiff_', 'T+S+R'), ('TEN.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TEN.AX', 'Transformation': '_TEN.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.408, ('TRAINING', {'Signal': 'TEN.AX', 'Transformation': '_TEN.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TEN.AX', 'Transformation': 'Diff_TEN.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.15, ('TRAINING', {'Signal': 'TEN.AX', 'Transformation': 'Diff_TEN.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TEN.AX', 'Transformation': 'RelDiff_TEN.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.8, ('TRAINING', {'Signal': 'TEN.AX', 'Transformation': 'RelDiff_TEN.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TEN.AX', 'Transformation': 'CumSum_TEN.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.438, ('TRAINING', {'Signal': 'TEN.AX', 'Transformation': 'CumSum_TEN.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 9.798, ('SIGNAL_TRAINING', {'Signals': ['TEN.AX'], 'Transformations': [('TEN.AX', 'None', '_', 'T+S+R'), ('TEN.AX', 'None', 'Diff_', 'T+S+R'), ('TEN.AX', 'None', 'RelDiff_', 'T+S+R'), ('TEN.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['TEN.AX'], 'Transformations': [('TEN.AX', [('TEN.AX', 'None', 'CumSum_', 'T+S+R'), ('TEN.AX', 'None', 'Diff_', 'T+S+R'), ('TEN.AX', 'None', 'RelDiff_', 'T+S+R'), ('TEN.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'TEN.AX', 'Transformations': [('TEN.AX', 'None', 'CumSum_', 'T+S+R'), ('TEN.AX', 'None', 'Diff_', 'T+S+R'), ('TEN.AX', 'None', 'RelDiff_', 'T+S+R'), ('TEN.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'TEN.AX', 'Transformations': [('TEN.AX', 'None', 'CumSum_', 'T+S+R'), ('TEN.AX', 'None', 'Diff_', 'T+S+R'), ('TEN.AX', 'None', 'RelDiff_', 'T+S+R'), ('TEN.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TEN.AX', 'Model': '_TEN.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TEN.AX', 'Model': '_TEN.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TEN.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.196, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TEN.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.231, ('FINALIZE_TRAINING', {'Signals': ['TEN.AX'], 'Transformations': [('TEN.AX', [('TEN.AX', 'None', 'CumSum_', 'T+S+R'), ('TEN.AX', 'None', 'Diff_', 'T+S+R'), ('TEN.AX', 'None', 'RelDiff_', 'T+S+R'), ('TEN.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='TEN.AX' Length=1299  Min=0.15947 Max=1.7  Mean=0.4498114472671304 StdDev=0.3321884873209877
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_TEN.AX' Min=0.0 Max=1.0  Mean=0.18846854476519653 StdDev=0.2156325987296498
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_TEN.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_TEN.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_TEN.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_TEN.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0205 MAPE_Forecast=0.0243 MAPE_Test=0.0121
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0204 SMAPE_Forecast=0.0271 SMAPE_Test=0.0122
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9978 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.04392523849289244 CRPS_Forecast=0.13887004546899842 CRPS_Test=0.008214285714285683
INFO:pyaf.std:MODEL_L1 L1_Fit=0.00679456921587609 L1_Forecast=0.022381428571428573 L1_Test=0.011428571428571439
INFO:pyaf.std:MODEL_L2 L2_Fit=0.010021592539998526 L2_Forecast=0.0975969082581226 L2_Test=0.0155838744494796
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.9065875492225406 LnQ_Forecast=5.688927006157643 LnQ_Test=0.0019365876608039678
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.004830000000000001 MedAE_Forecast=0.0050000000000000044 MedAE_Test=0.0050000000000001155
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.43202664018227493
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _TEN.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _TEN.AX             T+S+R  ...  0.0205       0.0243   0.0121
1    None   CumSum_TEN.AX             T+S+R  ...  0.0212       0.0243   0.0121
2    None   CumSum_TEN.AX             T+S+R  ...  0.0212       0.0243   0.0121
3    None     Diff_TEN.AX             T+S+R  ...  0.0205       0.0243   0.0121
4    None         _TEN.AX             T+S+R  ...  0.0205       0.0243   0.0121
..    ...             ...               ...  ...     ...          ...      ...
163  None  RelDiff_TEN.AX             T+S+R  ...  1.7813   44293.1270   0.1150
164  None  RelDiff_TEN.AX             T+S+R  ...  1.7909   58280.0625   0.1150
165  None  RelDiff_TEN.AX             T+S+R  ...  1.7907   61630.4883   0.1150
166  None  RelDiff_TEN.AX             T+S+R  ...  1.7907   61630.4883   0.1150
167  None  RelDiff_TEN.AX             T+S+R  ...  1.7901   74246.6861   0.1150

[168 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _TEN.AX             T+S+R  ...  0.0205       0.0243   0.0121
1  None  CumSum_TEN.AX             T+S+R  ...  0.0212       0.0243   0.0121
2  None  CumSum_TEN.AX             T+S+R  ...  0.0212       0.0243   0.0121
3  None    Diff_TEN.AX             T+S+R  ...  0.0205       0.0243   0.0121
4  None        _TEN.AX             T+S+R  ...  0.0205       0.0243   0.0121

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['TEN.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.158, ('FORECASTING', {'Signals': ['TEN.AX'], 'Horizon': 7}))
7 0    0.955
1    0.935
2    0.935
3    0.980
4    0.995
5    1.005
6    1.070
Name: TEN.AX, dtype: float64
7 0    0.95
1    0.95
2    0.95
3    0.95
4    0.95
5    0.95
6    0.95
Name: TEN.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_TEN.AX TEN.AX [0.955, 0.935, 0.935, 0.98, 0.995, 1.005, 1.07]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_TEN.AX TEN.AX [0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_TEN.AX TEN.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_TEN.AX TEN.AX 10.287957906723022
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_TEN.AX TEN.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_TEN.AX TEN.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_TEN.AX TEN.AX 0.04 0.0414 1.576
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_TEN.AX TEN.AX 0.0407142857142857 0.05454356057317859 -0.5320546392807348
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_TEN.AX_7'
