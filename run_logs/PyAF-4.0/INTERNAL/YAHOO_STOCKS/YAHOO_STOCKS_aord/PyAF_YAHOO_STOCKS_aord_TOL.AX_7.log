BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 994 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2015-05-13T00:00:00.000000000' '2015-05-14T00:00:00.000000000'
 '2015-05-15T00:00:00.000000000' '2015-05-18T00:00:00.000000000'
 '2015-05-19T00:00:00.000000000']
SIGNAL :  TOL.AX N= 994 H= 7 HEAD= [4.56 4.53 4.62 4.54 4.44] TAIL= [9.02 9.02 9.02 9.02 9.02]
   TOL.AX       Date
0    4.56 2011-07-28
1    4.53 2011-07-29
2    4.62 2011-08-01
3    4.54 2011-08-02
4    4.44 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 994 entries, 0 to 993
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   TOL.AX  994 non-null    float64       
 1   Date    994 non-null    datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 23.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['TOL.AX'], 'Transformations': [('TOL.AX', 'None', '_', 'T+S+R'), ('TOL.AX', 'None', 'Diff_', 'T+S+R'), ('TOL.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOL.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TOL.AX', 'Transformation': '_TOL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.582, ('TRAINING', {'Signal': 'TOL.AX', 'Transformation': '_TOL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TOL.AX', 'Transformation': 'Diff_TOL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.268, ('TRAINING', {'Signal': 'TOL.AX', 'Transformation': 'Diff_TOL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TOL.AX', 'Transformation': 'RelDiff_TOL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.956, ('TRAINING', {'Signal': 'TOL.AX', 'Transformation': 'RelDiff_TOL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TOL.AX', 'Transformation': 'CumSum_TOL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.602, ('TRAINING', {'Signal': 'TOL.AX', 'Transformation': 'CumSum_TOL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 10.41, ('SIGNAL_TRAINING', {'Signals': ['TOL.AX'], 'Transformations': [('TOL.AX', 'None', '_', 'T+S+R'), ('TOL.AX', 'None', 'Diff_', 'T+S+R'), ('TOL.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOL.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['TOL.AX'], 'Transformations': [('TOL.AX', [('TOL.AX', 'None', 'CumSum_', 'T+S+R'), ('TOL.AX', 'None', 'Diff_', 'T+S+R'), ('TOL.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOL.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'TOL.AX', 'Transformations': [('TOL.AX', 'None', 'CumSum_', 'T+S+R'), ('TOL.AX', 'None', 'Diff_', 'T+S+R'), ('TOL.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOL.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'TOL.AX', 'Transformations': [('TOL.AX', 'None', 'CumSum_', 'T+S+R'), ('TOL.AX', 'None', 'Diff_', 'T+S+R'), ('TOL.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOL.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TOL.AX', 'Model': '_TOL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.026, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TOL.AX', 'Model': '_TOL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TOL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.174, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TOL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.208, ('FINALIZE_TRAINING', {'Signals': ['TOL.AX'], 'Transformations': [('TOL.AX', [('TOL.AX', 'None', 'CumSum_', 'T+S+R'), ('TOL.AX', 'None', 'Diff_', 'T+S+R'), ('TOL.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOL.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2014-08-05T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='TOL.AX' Length=994  Min=3.76 Max=9.02  Mean=5.419673038229373 StdDev=1.0871542877668672
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_TOL.AX' Min=0.0 Max=1.0  Mean=0.31552719357972914 StdDev=0.20668332467050696
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_TOL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_TOL.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_TOL.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_TOL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0127 MAPE_Forecast=0.0088 MAPE_Test=0.0006
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0127 SMAPE_Forecast=0.0091 SMAPE_Test=0.0006
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9987 MASE_Forecast=0.9958 MASE_Test=1.1429
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.17145243145887532 CRPS_Forecast=0.34195277306397315 CRPS_Test=0.004999999999999893
INFO:pyaf.std:MODEL_L1 L1_Fit=0.06343472750316856 L1_Forecast=0.05737373737373741 L1_Test=0.005714285714285593
INFO:pyaf.std:MODEL_L2 L2_Fit=0.08885591646593527 L2_Forecast=0.2149559503853303 L2_Test=0.009258200997725318
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.25178033770672203 LnQ_Forecast=0.1762164385936771 LnQ_Test=7.399202061093522e-06
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.04999999999999982 MedAE_Forecast=0.029999999999999805 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.15209125475285168
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _TOL.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ...   FitMAPE ForecastMAPE   TestMAPE
0    None         _TOL.AX             T+S+R  ...    0.0127       0.0088     0.0006
1    None   CumSum_TOL.AX             T+S+R  ...    0.0129       0.0088     0.0006
2    None     Diff_TOL.AX             T+S+R  ...    0.0127       0.0088     0.0006
3    None     Diff_TOL.AX             T+S+R  ...    0.0127       0.0088     0.0006
4    None  RelDiff_TOL.AX             T+S+R  ...    0.0252       0.0088     0.0006
..    ...             ...               ...  ...       ...          ...        ...
195  None  RelDiff_TOL.AX             T+S+R  ...   17.0879     479.7271  1006.8342
196  None  RelDiff_TOL.AX             T+S+R  ...  397.8189     618.6261   196.2464
197  None  RelDiff_TOL.AX             T+S+R  ...  397.8189     618.6261   196.2464
198  None  RelDiff_TOL.AX             T+S+R  ...  122.3307    3025.2861  6243.8539
199  None  RelDiff_TOL.AX             T+S+R  ...  122.3307    3025.2861  6243.8539

[200 rows x 10 columns]
  Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None         _TOL.AX             T+S+R  ...  0.0127       0.0088   0.0006
1  None   CumSum_TOL.AX             T+S+R  ...  0.0129       0.0088   0.0006
2  None     Diff_TOL.AX             T+S+R  ...  0.0127       0.0088   0.0006
3  None     Diff_TOL.AX             T+S+R  ...  0.0127       0.0088   0.0006
4  None  RelDiff_TOL.AX             T+S+R  ...  0.0252       0.0088   0.0006

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['TOL.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.142, ('FORECASTING', {'Signals': ['TOL.AX'], 'Horizon': 7}))
7 0    9.02
1    9.02
2    9.02
3    9.02
4    9.02
5    9.02
6    9.02
Name: TOL.AX, dtype: float64
7 0    9.02
1    9.02
2    9.02
3    9.02
4    9.02
5    9.02
6    9.02
Name: TOL.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_TOL.AX TOL.AX [9.02, 9.02, 9.02, 9.02, 9.02, 9.02, 9.02]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_TOL.AX TOL.AX [9.02, 9.02, 9.02, 9.02, 9.02, 9.02, 9.02]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_TOL.AX TOL.AX 994 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_TOL.AX TOL.AX 10.857619047164917
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_TOL.AX TOL.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_TOL.AX TOL.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_TOL.AX TOL.AX 0.0 0.0 0.0
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_TOL.AX TOL.AX 0.0 0.0 1.0
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_TOL.AX_7'
