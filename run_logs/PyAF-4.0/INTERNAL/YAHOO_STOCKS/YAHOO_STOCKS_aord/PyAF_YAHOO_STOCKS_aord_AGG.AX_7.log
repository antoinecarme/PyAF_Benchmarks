BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1286 H= 7 HEAD= ['2011-07-29T00:00:00.000000000' '2011-08-01T00:00:00.000000000'
 '2011-08-02T00:00:00.000000000' '2011-08-03T00:00:00.000000000'
 '2011-08-04T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  AGG.AX N= 1286 H= 7 HEAD= [7.76 7.51 7.58 8.08 8.14] TAIL= [5.43 5.5  5.3  5.36 5.36]
   AGG.AX       Date
0    7.76 2011-07-29
1    7.51 2011-08-01
2    7.58 2011-08-02
3    8.08 2011-08-03
4    8.14 2011-08-04
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1286 entries, 0 to 1285
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AGG.AX  1286 non-null   float64       
 1   Date    1286 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.1 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AGG.AX'], 'Transformations': [('AGG.AX', 'None', '_', 'T+S+R'), ('AGG.AX', 'None', 'Diff_', 'T+S+R'), ('AGG.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGG.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGG.AX', 'Transformation': '_AGG.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.517, ('TRAINING', {'Signal': 'AGG.AX', 'Transformation': '_AGG.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGG.AX', 'Transformation': 'Diff_AGG.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.165, ('TRAINING', {'Signal': 'AGG.AX', 'Transformation': 'Diff_AGG.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGG.AX', 'Transformation': 'RelDiff_AGG.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.653, ('TRAINING', {'Signal': 'AGG.AX', 'Transformation': 'RelDiff_AGG.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGG.AX', 'Transformation': 'CumSum_AGG.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.447, ('TRAINING', {'Signal': 'AGG.AX', 'Transformation': 'CumSum_AGG.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 9.783, ('SIGNAL_TRAINING', {'Signals': ['AGG.AX'], 'Transformations': [('AGG.AX', 'None', '_', 'T+S+R'), ('AGG.AX', 'None', 'Diff_', 'T+S+R'), ('AGG.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGG.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AGG.AX'], 'Transformations': [('AGG.AX', [('AGG.AX', 'None', 'CumSum_', 'T+S+R'), ('AGG.AX', 'None', 'Diff_', 'T+S+R'), ('AGG.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGG.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AGG.AX', 'Transformations': [('AGG.AX', 'None', 'CumSum_', 'T+S+R'), ('AGG.AX', 'None', 'Diff_', 'T+S+R'), ('AGG.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGG.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'AGG.AX', 'Transformations': [('AGG.AX', 'None', 'CumSum_', 'T+S+R'), ('AGG.AX', 'None', 'Diff_', 'T+S+R'), ('AGG.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGG.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AGG.AX', 'Model': '_AGG.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AGG.AX', 'Model': '_AGG.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AGG.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.19, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AGG.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.225, ('FINALIZE_TRAINING', {'Signals': ['AGG.AX'], 'Transformations': [('AGG.AX', [('AGG.AX', 'None', 'CumSum_', 'T+S+R'), ('AGG.AX', 'None', 'Diff_', 'T+S+R'), ('AGG.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGG.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-29T00:00:00.000000 TimeMax=2015-07-16T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AGG.AX' Length=1286  Min=1.505 Max=9.45  Mean=4.356924572317266 StdDev=2.105329433386148
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AGG.AX' Min=0.0 Max=1.0  Mean=0.35895841061262085 StdDev=0.26498797147717446
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AGG.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AGG.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AGG.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_AGG.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0185 MAPE_Forecast=0.0268 MAPE_Test=0.0148
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0184 SMAPE_Forecast=0.0269 SMAPE_Test=0.0147
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0137 MASE_Test=1.0
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.6293844729124866 CRPS_Forecast=0.25865253216911765 CRPS_Test=0.043571428571428594
INFO:pyaf.std:MODEL_L1 L1_Fit=0.08175953079178884 L1_Forecast=0.078828125 L1_Test=0.0800000000000002
INFO:pyaf.std:MODEL_L2 L2_Fit=0.13854078239672524 L2_Forecast=0.13109738150512393 L2_Test=0.10014275524755378
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.9922268055453309 LnQ_Forecast=0.4536621657015737 LnQ_Test=0.002378250223030054
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.040000000000000036 MedAE_Forecast=0.040000000000000036 MedAE_Test=0.07000000000000028
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.7872876022655759
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _AGG.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _AGG.AX             T+S+R  ...  0.0185       0.0268   0.0148
1    None   CumSum_AGG.AX             T+S+R  ...  0.0192       0.0268   0.0148
2    None   CumSum_AGG.AX             T+S+R  ...  0.0192       0.0268   0.0148
3    None     Diff_AGG.AX             T+S+R  ...  0.0185       0.0268   0.0148
4    None         _AGG.AX             T+S+R  ...  0.0185       0.0268   0.0148
..    ...             ...               ...  ...     ...          ...      ...
163  None  RelDiff_AGG.AX             T+S+R  ...  1.0551       7.7489  13.5643
164  None  RelDiff_AGG.AX             T+S+R  ...  1.0408       9.0488  19.9843
165  None  RelDiff_AGG.AX             T+S+R  ...  1.0408       9.0488  19.9843
166  None  RelDiff_AGG.AX             T+S+R  ...  1.0408       9.0488  19.9843
167  None   CumSum_AGG.AX             T+S+R  ...  6.9100      10.5910   5.7014

[168 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _AGG.AX             T+S+R  ...  0.0185       0.0268   0.0148
1  None  CumSum_AGG.AX             T+S+R  ...  0.0192       0.0268   0.0148
2  None  CumSum_AGG.AX             T+S+R  ...  0.0192       0.0268   0.0148
3  None    Diff_AGG.AX             T+S+R  ...  0.0185       0.0268   0.0148
4  None        _AGG.AX             T+S+R  ...  0.0185       0.0268   0.0148

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AGG.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.159, ('FORECASTING', {'Signals': ['AGG.AX'], 'Horizon': 7}))
7 0    5.60
1    5.30
2    5.59
3    5.60
4    5.35
5    5.49
6    5.71
Name: AGG.AX, dtype: float64
7 0    5.36
1    5.36
2    5.36
3    5.36
4    5.36
5    5.36
6    5.36
Name: AGG.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AGG.AX AGG.AX [5.6, 5.3, 5.59, 5.6, 5.35, 5.49, 5.71]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AGG.AX AGG.AX [5.36, 5.36, 5.36, 5.36, 5.36, 5.36, 5.36]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AGG.AX AGG.AX 1286 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AGG.AX AGG.AX 10.264734268188477
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AGG.AX AGG.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AGG.AX AGG.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AGG.AX AGG.AX 0.0321 0.0328 0.8926
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AGG.AX AGG.AX 0.17999999999999985 0.2108486254570864 -1.3575757557897066
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_AGG.AX_7'
