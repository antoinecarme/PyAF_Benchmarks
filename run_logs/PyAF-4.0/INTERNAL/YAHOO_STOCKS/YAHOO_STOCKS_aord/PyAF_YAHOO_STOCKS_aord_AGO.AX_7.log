BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  AGO.AX N= 1299 H= 7 HEAD= [4.03 4.05 4.26 4.09 4.08] TAIL= [0.013 0.013 0.012 0.012 0.011]
   AGO.AX       Date
0    4.03 2011-07-28
1    4.05 2011-07-29
2    4.26 2011-08-01
3    4.09 2011-08-02
4    4.08 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AGO.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AGO.AX'], 'Transformations': [('AGO.AX', 'None', '_', 'T+S+R'), ('AGO.AX', 'None', 'Diff_', 'T+S+R'), ('AGO.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGO.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGO.AX', 'Transformation': '_AGO.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.107, ('TRAINING', {'Signal': 'AGO.AX', 'Transformation': '_AGO.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGO.AX', 'Transformation': 'Diff_AGO.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.133, ('TRAINING', {'Signal': 'AGO.AX', 'Transformation': 'Diff_AGO.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGO.AX', 'Transformation': 'RelDiff_AGO.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.624, ('TRAINING', {'Signal': 'AGO.AX', 'Transformation': 'RelDiff_AGO.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AGO.AX', 'Transformation': 'CumSum_AGO.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.4, ('TRAINING', {'Signal': 'AGO.AX', 'Transformation': 'CumSum_AGO.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 9.265, ('SIGNAL_TRAINING', {'Signals': ['AGO.AX'], 'Transformations': [('AGO.AX', 'None', '_', 'T+S+R'), ('AGO.AX', 'None', 'Diff_', 'T+S+R'), ('AGO.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGO.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AGO.AX'], 'Transformations': [('AGO.AX', [('AGO.AX', 'None', 'CumSum_', 'T+S+R'), ('AGO.AX', 'None', 'Diff_', 'T+S+R'), ('AGO.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGO.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AGO.AX', 'Transformations': [('AGO.AX', 'None', 'CumSum_', 'T+S+R'), ('AGO.AX', 'None', 'Diff_', 'T+S+R'), ('AGO.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGO.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'AGO.AX', 'Transformations': [('AGO.AX', 'None', 'CumSum_', 'T+S+R'), ('AGO.AX', 'None', 'Diff_', 'T+S+R'), ('AGO.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGO.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AGO.AX', 'Model': '_AGO.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AGO.AX', 'Model': '_AGO.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AGO.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.183, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AGO.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.217, ('FINALIZE_TRAINING', {'Signals': ['AGO.AX'], 'Transformations': [('AGO.AX', [('AGO.AX', 'None', 'CumSum_', 'T+S+R'), ('AGO.AX', 'None', 'Diff_', 'T+S+R'), ('AGO.AX', 'None', 'RelDiff_', 'T+S+R'), ('AGO.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AGO.AX' Length=1299  Min=0.009 Max=4.26  Mean=1.0917390300230858 StdDev=1.0729277359197642
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AGO.AX' Min=0.0 Max=1.0  Mean=0.2547021947831324 StdDev=0.25239419805216745
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AGO.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AGO.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AGO.AX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_AGO.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.026 MAPE_Forecast=0.053 MAPE_Test=0.0469
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0259 SMAPE_Forecast=0.0483 SMAPE_Test=0.0477
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9961 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.3008199546543027 CRPS_Forecast=0.0037258022257551674 CRPS_Test=0.0003571428571428572
INFO:pyaf.std:MODEL_L1 L1_Fit=0.03431171345595353 L1_Forecast=0.0012084942084942087 L1_Test=0.0005714285714285715
INFO:pyaf.std:MODEL_L2 L2_Fit=0.054722816455769964 L2_Forecast=0.005406631135158032 L2_Test=0.0009258200997725515
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=1.4614307215707154 LnQ_Forecast=2.7344206558835276 LnQ_Test=0.041884881979990685
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.020000000000000018 MedAE_Forecast=0.0009999999999999992 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.9458950835097625
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _AGO.AX_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ...  FitMAPE ForecastMAPE  TestMAPE
0    None        _AGO.AX             T+S+R  ...   0.0260       0.0530    0.0469
1    None        _AGO.AX             T+S+R  ...   0.0260       0.0530    0.0469
2    None  CumSum_AGO.AX             T+S+R  ...   0.0269       0.0530    0.0469
3    None  CumSum_AGO.AX             T+S+R  ...   0.0269       0.0530    0.0469
4    None    Diff_AGO.AX             T+S+R  ...   0.0260       0.0530    0.0469
..    ...            ...               ...  ...      ...          ...       ...
155  None  CumSum_AGO.AX             T+S+R  ...   9.6459     297.2002  111.3522
156  None  CumSum_AGO.AX             T+S+R  ...  13.2784     398.8779  170.5720
157  None  CumSum_AGO.AX             T+S+R  ...  15.3819     488.9209  157.5704
158  None  CumSum_AGO.AX             T+S+R  ...  14.2957     580.7635  169.8901
159  None  CumSum_AGO.AX             T+S+R  ...  21.5736     606.4133  946.2218

[160 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _AGO.AX             T+S+R  ...  0.0260        0.053   0.0469
1  None        _AGO.AX             T+S+R  ...  0.0260        0.053   0.0469
2  None  CumSum_AGO.AX             T+S+R  ...  0.0269        0.053   0.0469
3  None  CumSum_AGO.AX             T+S+R  ...  0.0269        0.053   0.0469
4  None    Diff_AGO.AX             T+S+R  ...  0.0260        0.053   0.0469

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AGO.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.156, ('FORECASTING', {'Signals': ['AGO.AX'], 'Horizon': 7}))
7 0    0.011
1    0.012
2    0.011
3    0.010
4    0.010
5    0.011
6    0.012
Name: AGO.AX, dtype: float64
7 0    0.011
1    0.011
2    0.011
3    0.011
4    0.011
5    0.011
6    0.011
Name: AGO.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AGO.AX AGO.AX [0.011, 0.012, 0.011, 0.01, 0.01, 0.011, 0.012]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AGO.AX AGO.AX [0.011, 0.011, 0.011, 0.011, 0.011, 0.011, 0.011]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AGO.AX AGO.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AGO.AX AGO.AX 9.733807563781738
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AGO.AX AGO.AX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AGO.AX AGO.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AGO.AX AGO.AX 0.0524 0.0521 0.6857
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AGO.AX AGO.AX 0.0005714285714285715 0.0007559289460184545 2.499937501565519e-05
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_AGO.AX_7'
