BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  DYL.AX N= 1299 H= 7 HEAD= [0.16761 0.16282 0.16282 0.16761 0.1724 ] TAIL= [0.005 0.005 0.004 0.004 0.005]
    DYL.AX       Date
0  0.16761 2011-07-28
1  0.16282 2011-07-29
2  0.16282 2011-08-01
3  0.16761 2011-08-02
4  0.17240 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   DYL.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['DYL.AX'], 'Transformations': [('DYL.AX', 'None', '_', 'T+S+R'), ('DYL.AX', 'None', 'Diff_', 'T+S+R'), ('DYL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DYL.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DYL.AX', 'Transformation': '_DYL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.348, ('TRAINING', {'Signal': 'DYL.AX', 'Transformation': '_DYL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DYL.AX', 'Transformation': 'Diff_DYL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.16, ('TRAINING', {'Signal': 'DYL.AX', 'Transformation': 'Diff_DYL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DYL.AX', 'Transformation': 'RelDiff_DYL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.512, ('TRAINING', {'Signal': 'DYL.AX', 'Transformation': 'RelDiff_DYL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DYL.AX', 'Transformation': 'CumSum_DYL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.445, ('TRAINING', {'Signal': 'DYL.AX', 'Transformation': 'CumSum_DYL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 9.466, ('SIGNAL_TRAINING', {'Signals': ['DYL.AX'], 'Transformations': [('DYL.AX', 'None', '_', 'T+S+R'), ('DYL.AX', 'None', 'Diff_', 'T+S+R'), ('DYL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DYL.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['DYL.AX'], 'Transformations': [('DYL.AX', [('DYL.AX', 'None', 'CumSum_', 'T+S+R'), ('DYL.AX', 'None', 'Diff_', 'T+S+R'), ('DYL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DYL.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'DYL.AX', 'Transformations': [('DYL.AX', 'None', 'CumSum_', 'T+S+R'), ('DYL.AX', 'None', 'Diff_', 'T+S+R'), ('DYL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DYL.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'DYL.AX', 'Transformations': [('DYL.AX', 'None', 'CumSum_', 'T+S+R'), ('DYL.AX', 'None', 'Diff_', 'T+S+R'), ('DYL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DYL.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DYL.AX', 'Model': '_DYL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DYL.AX', 'Model': '_DYL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DYL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.192, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DYL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.227, ('FINALIZE_TRAINING', {'Signals': ['DYL.AX'], 'Transformations': [('DYL.AX', [('DYL.AX', 'None', 'CumSum_', 'T+S+R'), ('DYL.AX', 'None', 'Diff_', 'T+S+R'), ('DYL.AX', 'None', 'RelDiff_', 'T+S+R'), ('DYL.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='DYL.AX' Length=1299  Min=0.003 Max=0.1724  Mean=0.041231308698999526 StdDev=0.04069751889261539
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_DYL.AX' Min=0.0 Max=1.0  Mean=0.2256865920838207 StdDev=0.240245093817091
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_DYL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_DYL.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_DYL.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_DYL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0343 MAPE_Forecast=0.0427 MAPE_Test=0.0643
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0343 SMAPE_Forecast=0.0424 SMAPE_Test=0.0635
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9961 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.011373761216691293 CRPS_Forecast=0.0005919554848966614 CRPS_Test=0.00014285714285714287
INFO:pyaf.std:MODEL_L1 L1_Fit=0.0017180542110358185 L1_Forecast=0.00030501930501930497 L1_Test=0.00028571428571428574
INFO:pyaf.std:MODEL_L2 L2_Fit=0.0032502701503627075 L2_Forecast=0.000579575133962229 L2_Test=0.0005345224838248487
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=3.1952048322399085 LnQ_Forecast=1.9787709207024216 LnQ_Test=0.09958608898623468
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0009800000000000017 MedAE_Forecast=0.0 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.9717237308146399
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _DYL.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ...  FitMAPE ForecastMAPE TestMAPE
0    None        _DYL.AX             T+S+R  ...   0.0343       0.0427   0.0643
1    None  CumSum_DYL.AX             T+S+R  ...   0.0352       0.0427   0.0643
2    None  CumSum_DYL.AX             T+S+R  ...   0.0352       0.0427   0.0643
3    None    Diff_DYL.AX             T+S+R  ...   0.0343       0.0427   0.0643
4    None        _DYL.AX             T+S+R  ...   0.0343       0.0427   0.0643
..    ...            ...               ...  ...      ...          ...      ...
155  None  CumSum_DYL.AX             T+S+R  ...   6.4774      24.5264  62.2995
156  None  CumSum_DYL.AX             T+S+R  ...   8.9121      31.0157   9.2449
157  None  CumSum_DYL.AX             T+S+R  ...   8.8591      35.5731  12.9911
158  None  CumSum_DYL.AX             T+S+R  ...   8.4928      39.3048  22.1168
159  None  CumSum_DYL.AX             T+S+R  ...  16.0105      60.9003  95.2245

[160 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _DYL.AX             T+S+R  ...  0.0343       0.0427   0.0643
1  None  CumSum_DYL.AX             T+S+R  ...  0.0352       0.0427   0.0643
2  None  CumSum_DYL.AX             T+S+R  ...  0.0352       0.0427   0.0643
3  None    Diff_DYL.AX             T+S+R  ...  0.0343       0.0427   0.0643
4  None        _DYL.AX             T+S+R  ...  0.0343       0.0427   0.0643

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['DYL.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.16, ('FORECASTING', {'Signals': ['DYL.AX'], 'Horizon': 7}))
7 0    0.005
1    0.005
2    0.004
3    0.005
4    0.006
5    0.006
6    0.006
Name: DYL.AX, dtype: float64
7 0    0.005
1    0.005
2    0.005
3    0.005
4    0.005
5    0.005
6    0.005
Name: DYL.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_DYL.AX DYL.AX [0.005, 0.005, 0.004, 0.005, 0.006, 0.006, 0.006]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_DYL.AX DYL.AX [0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_DYL.AX DYL.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_DYL.AX DYL.AX 9.958586931228638
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_DYL.AX DYL.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_DYL.AX DYL.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_DYL.AX DYL.AX 0.1071 0.1097 1.1429
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_DYL.AX DYL.AX 0.0005714285714285715 0.0007559289460184544 -0.16663263988133692
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_DYL.AX_7'
