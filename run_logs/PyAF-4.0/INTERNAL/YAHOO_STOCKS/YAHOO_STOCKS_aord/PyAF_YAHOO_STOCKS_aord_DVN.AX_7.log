BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1294 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  DVN.AX N= 1294 H= 7 HEAD= [0.235 0.24  0.235 0.235 0.23 ] TAIL= [0.48  0.485 0.485 0.485 0.485]
   DVN.AX       Date
0   0.235 2011-07-28
1   0.240 2011-07-29
2   0.235 2011-08-01
3   0.235 2011-08-02
4   0.230 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1294 entries, 0 to 1293
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   DVN.AX  1294 non-null   float64       
 1   Date    1294 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['DVN.AX'], 'Transformations': [('DVN.AX', 'None', '_', 'T+S+R'), ('DVN.AX', 'None', 'Diff_', 'T+S+R'), ('DVN.AX', 'None', 'RelDiff_', 'T+S+R'), ('DVN.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DVN.AX', 'Transformation': '_DVN.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.313, ('TRAINING', {'Signal': 'DVN.AX', 'Transformation': '_DVN.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DVN.AX', 'Transformation': 'Diff_DVN.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.157, ('TRAINING', {'Signal': 'DVN.AX', 'Transformation': 'Diff_DVN.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DVN.AX', 'Transformation': 'RelDiff_DVN.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.441, ('TRAINING', {'Signal': 'DVN.AX', 'Transformation': 'RelDiff_DVN.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DVN.AX', 'Transformation': 'CumSum_DVN.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.765, ('TRAINING', {'Signal': 'DVN.AX', 'Transformation': 'CumSum_DVN.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 10.677, ('SIGNAL_TRAINING', {'Signals': ['DVN.AX'], 'Transformations': [('DVN.AX', 'None', '_', 'T+S+R'), ('DVN.AX', 'None', 'Diff_', 'T+S+R'), ('DVN.AX', 'None', 'RelDiff_', 'T+S+R'), ('DVN.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['DVN.AX'], 'Transformations': [('DVN.AX', [('DVN.AX', 'None', 'CumSum_', 'T+S+R'), ('DVN.AX', 'None', 'Diff_', 'T+S+R'), ('DVN.AX', 'None', 'RelDiff_', 'T+S+R'), ('DVN.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'DVN.AX', 'Transformations': [('DVN.AX', 'None', 'CumSum_', 'T+S+R'), ('DVN.AX', 'None', 'Diff_', 'T+S+R'), ('DVN.AX', 'None', 'RelDiff_', 'T+S+R'), ('DVN.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'DVN.AX', 'Transformations': [('DVN.AX', 'None', 'CumSum_', 'T+S+R'), ('DVN.AX', 'None', 'Diff_', 'T+S+R'), ('DVN.AX', 'None', 'RelDiff_', 'T+S+R'), ('DVN.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DVN.AX', 'Model': '_DVN.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DVN.AX', 'Model': '_DVN.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DVN.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.188, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DVN.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FINALIZE_TRAINING', {'Signals': ['DVN.AX'], 'Transformations': [('DVN.AX', [('DVN.AX', 'None', 'CumSum_', 'T+S+R'), ('DVN.AX', 'None', 'Diff_', 'T+S+R'), ('DVN.AX', 'None', 'RelDiff_', 'T+S+R'), ('DVN.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-14T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='DVN.AX' Length=1294  Min=0.205 Max=1.37  Mean=0.7429574961360081 StdDev=0.21173123631491725
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_DVN.AX' Min=0.0 Max=1.0  Mean=0.4617660911038745 StdDev=0.1817435504849073
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_DVN.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_DVN.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_DVN.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_DVN.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0172 MAPE_Forecast=0.0148 MAPE_Test=0.0104
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0175 SMAPE_Forecast=0.0145 SMAPE_Test=0.0107
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9961 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.06293931256713213 CRPS_Forecast=0.026412031919744644 CRPS_Test=0.007857142857142852
INFO:pyaf.std:MODEL_L1 L1_Fit=0.013118561710398447 L1_Forecast=0.008511627906976744 L1_Test=0.004999999999999997
INFO:pyaf.std:MODEL_L2 L2_Fit=0.029922657022800947 L2_Forecast=0.020835829307847012 L2_Test=0.01149534067102219
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=2.485404100777746 LnQ_Forecast=0.32966471976450257 LnQ_Test=0.004272608065768815
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.009999999999999898 MedAE_Forecast=0.0 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.02575107296137339
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _DVN.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation  ...  ForecastMAPE      TestMAPE
0    None         _DVN.AX  ...  1.480000e-02  1.040000e-02
1    None   CumSum_DVN.AX  ...  1.480000e-02  1.040000e-02
2    None     Diff_DVN.AX  ...  1.480000e-02  1.040000e-02
3    None  RelDiff_DVN.AX  ...  1.480000e-02  1.040000e-02
4    None         _DVN.AX  ...  1.480000e-02  1.040000e-02
..    ...             ...  ...           ...           ...
187  None  RelDiff_DVN.AX  ...  4.997854e+06  6.332228e+06
188  None  RelDiff_DVN.AX  ...  4.997854e+06  6.332228e+06
189  None  RelDiff_DVN.AX  ...  4.997854e+06  6.332228e+06
190  None  RelDiff_DVN.AX  ...  4.997854e+06  6.332228e+06
191  None  RelDiff_DVN.AX  ...  4.997854e+06  6.332228e+06

[192 rows x 10 columns]
  Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None         _DVN.AX             T+S+R  ...  0.0172       0.0148   0.0104
1  None   CumSum_DVN.AX             T+S+R  ...  0.0173       0.0148   0.0104
2  None     Diff_DVN.AX             T+S+R  ...  0.0172       0.0148   0.0104
3  None  RelDiff_DVN.AX             T+S+R  ...  0.0202       0.0148   0.0104
4  None         _DVN.AX             T+S+R  ...  0.0172       0.0148   0.0104

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['DVN.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.156, ('FORECASTING', {'Signals': ['DVN.AX'], 'Horizon': 7}))
7 0    0.500
1    0.490
2    0.500
3    0.485
4    0.485
5    0.485
6    0.475
Name: DVN.AX, dtype: float64
7 0    0.485
1    0.485
2    0.485
3    0.485
4    0.485
5    0.485
6    0.485
Name: DVN.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_DVN.AX DVN.AX [0.5, 0.49, 0.5, 0.485, 0.485, 0.485, 0.475]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_DVN.AX DVN.AX [0.485, 0.485, 0.485, 0.485, 0.485, 0.485, 0.485]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_DVN.AX DVN.AX 1294 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_DVN.AX DVN.AX 11.175760984420776
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_DVN.AX DVN.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_DVN.AX DVN.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_DVN.AX DVN.AX 0.013 0.0131 0.8571
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_DVN.AX DVN.AX 0.0064285714285714345 0.009063269671749665 -0.1838232856834412
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_DVN.AX_7'
