BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1278 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-03T00:00:00.000000000'
 '2011-08-05T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  OCP.AX N= 1278 H= 7 HEAD= [2.23 2.24 2.24 2.19 2.07] TAIL= [1.7  1.75 1.69 1.69 1.69]
   OCP.AX       Date
0    2.23 2011-07-28
1    2.24 2011-07-29
2    2.24 2011-08-01
3    2.19 2011-08-03
4    2.07 2011-08-05
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1278 entries, 0 to 1277
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   OCP.AX  1278 non-null   float64       
 1   Date    1278 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.0 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['OCP.AX'], 'Transformations': [('OCP.AX', 'None', '_', 'T+S+R'), ('OCP.AX', 'None', 'Diff_', 'T+S+R'), ('OCP.AX', 'None', 'RelDiff_', 'T+S+R'), ('OCP.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'OCP.AX', 'Transformation': '_OCP.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.441, ('TRAINING', {'Signal': 'OCP.AX', 'Transformation': '_OCP.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'OCP.AX', 'Transformation': 'Diff_OCP.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.292, ('TRAINING', {'Signal': 'OCP.AX', 'Transformation': 'Diff_OCP.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'OCP.AX', 'Transformation': 'RelDiff_OCP.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.693, ('TRAINING', {'Signal': 'OCP.AX', 'Transformation': 'RelDiff_OCP.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'OCP.AX', 'Transformation': 'CumSum_OCP.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.491, ('TRAINING', {'Signal': 'OCP.AX', 'Transformation': 'CumSum_OCP.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 9.918, ('SIGNAL_TRAINING', {'Signals': ['OCP.AX'], 'Transformations': [('OCP.AX', 'None', '_', 'T+S+R'), ('OCP.AX', 'None', 'Diff_', 'T+S+R'), ('OCP.AX', 'None', 'RelDiff_', 'T+S+R'), ('OCP.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['OCP.AX'], 'Transformations': [('OCP.AX', [('OCP.AX', 'None', 'CumSum_', 'T+S+R'), ('OCP.AX', 'None', 'Diff_', 'T+S+R'), ('OCP.AX', 'None', 'RelDiff_', 'T+S+R'), ('OCP.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'OCP.AX', 'Transformations': [('OCP.AX', 'None', 'CumSum_', 'T+S+R'), ('OCP.AX', 'None', 'Diff_', 'T+S+R'), ('OCP.AX', 'None', 'RelDiff_', 'T+S+R'), ('OCP.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'OCP.AX', 'Transformations': [('OCP.AX', 'None', 'CumSum_', 'T+S+R'), ('OCP.AX', 'None', 'Diff_', 'T+S+R'), ('OCP.AX', 'None', 'RelDiff_', 'T+S+R'), ('OCP.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'OCP.AX', 'Model': '_OCP.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'OCP.AX', 'Model': '_OCP.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'OCP.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.187, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'OCP.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FINALIZE_TRAINING', {'Signals': ['OCP.AX'], 'Transformations': [('OCP.AX', [('OCP.AX', 'None', 'CumSum_', 'T+S+R'), ('OCP.AX', 'None', 'Diff_', 'T+S+R'), ('OCP.AX', 'None', 'RelDiff_', 'T+S+R'), ('OCP.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-17T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='OCP.AX' Length=1278  Min=1.1 Max=2.39  Mean=1.5845657276995362 StdDev=0.26590263785081186
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_OCP.AX' Min=0.0 Max=1.0  Mean=0.3756323470539019 StdDev=0.20612607585334103
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_OCP.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_OCP.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_OCP.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_OCP.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0052 MAPE_Forecast=0.0055 MAPE_Test=0.0167
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0051 SMAPE_Forecast=0.0055 SMAPE_Test=0.0165
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9961 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.07600106195607127 CRPS_Forecast=0.04101077277970012 CRPS_Test=0.024285714285714306
INFO:pyaf.std:MODEL_L1 L1_Fit=0.008622047244094487 L1_Forecast=0.007882352941176474 L1_Test=0.0285714285714286
INFO:pyaf.std:MODEL_L2 L2_Fit=0.02701250075151121 L2_Forecast=0.02245693045565659 L2_Test=0.04503966505838417
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.2583200708707131 LnQ_Forecast=0.065681151903621 LnQ_Test=0.004718654753268343
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0 MedAE_Forecast=0.0 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.8759689922480619
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _OCP.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _OCP.AX             T+S+R  ...  0.0052       0.0055   0.0167
1    None   CumSum_OCP.AX             T+S+R  ...  0.0057       0.0055   0.0167
2    None   CumSum_OCP.AX             T+S+R  ...  0.0057       0.0055   0.0167
3    None     Diff_OCP.AX             T+S+R  ...  0.0052       0.0055   0.0167
4    None         _OCP.AX             T+S+R  ...  0.0052       0.0055   0.0167
..    ...             ...               ...  ...     ...          ...      ...
163  None  RelDiff_OCP.AX             T+S+R  ...  0.4167       1.4159   2.2798
164  None   CumSum_OCP.AX             T+S+R  ...  1.4548       1.4758   1.1710
165  None  RelDiff_OCP.AX             T+S+R  ...  0.4144       7.9270   0.2975
166  None  RelDiff_OCP.AX             T+S+R  ...  0.4144       7.9270   0.2975
167  None  RelDiff_OCP.AX             T+S+R  ...  0.4144       7.9270   0.2975

[168 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _OCP.AX             T+S+R  ...  0.0052       0.0055   0.0167
1  None  CumSum_OCP.AX             T+S+R  ...  0.0057       0.0055   0.0167
2  None  CumSum_OCP.AX             T+S+R  ...  0.0057       0.0055   0.0167
3  None    Diff_OCP.AX             T+S+R  ...  0.0052       0.0055   0.0167
4  None        _OCP.AX             T+S+R  ...  0.0052       0.0055   0.0167

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['OCP.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.153, ('FORECASTING', {'Signals': ['OCP.AX'], 'Horizon': 7}))
7 0    1.69
1    1.75
2    1.75
3    1.75
4    1.75
5    1.75
6    1.75
Name: OCP.AX, dtype: float64
7 0    1.69
1    1.69
2    1.69
3    1.69
4    1.69
5    1.69
6    1.69
Name: OCP.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_OCP.AX OCP.AX [1.69, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_OCP.AX OCP.AX [1.69, 1.69, 1.69, 1.69, 1.69, 1.69, 1.69]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_OCP.AX OCP.AX 1278 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_OCP.AX OCP.AX 10.387326955795288
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_OCP.AX OCP.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_OCP.AX OCP.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_OCP.AX OCP.AX 0.0294 0.0299 5.1429
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_OCP.AX OCP.AX 0.051428571428571476 0.05554920598635314 -5.999999773148157
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_OCP.AX_7'
