BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  TLS.AX N= 1299 H= 7 HEAD= [3.   2.99 3.02 3.01 2.98] TAIL= [5.68 5.75 5.75 5.78 5.78]
   TLS.AX       Date
0    3.00 2011-07-28
1    2.99 2011-07-29
2    3.02 2011-08-01
3    3.01 2011-08-02
4    2.98 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   TLS.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['TLS.AX'], 'Transformations': [('TLS.AX', 'None', '_', 'T+S+R'), ('TLS.AX', 'None', 'Diff_', 'T+S+R'), ('TLS.AX', 'None', 'RelDiff_', 'T+S+R'), ('TLS.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TLS.AX', 'Transformation': '_TLS.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.214, ('TRAINING', {'Signal': 'TLS.AX', 'Transformation': '_TLS.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TLS.AX', 'Transformation': 'Diff_TLS.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.427, ('TRAINING', {'Signal': 'TLS.AX', 'Transformation': 'Diff_TLS.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TLS.AX', 'Transformation': 'RelDiff_TLS.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.095, ('TRAINING', {'Signal': 'TLS.AX', 'Transformation': 'RelDiff_TLS.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TLS.AX', 'Transformation': 'CumSum_TLS.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.817, ('TRAINING', {'Signal': 'TLS.AX', 'Transformation': 'CumSum_TLS.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.555, ('SIGNAL_TRAINING', {'Signals': ['TLS.AX'], 'Transformations': [('TLS.AX', 'None', '_', 'T+S+R'), ('TLS.AX', 'None', 'Diff_', 'T+S+R'), ('TLS.AX', 'None', 'RelDiff_', 'T+S+R'), ('TLS.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['TLS.AX'], 'Transformations': [('TLS.AX', [('TLS.AX', 'None', 'CumSum_', 'T+S+R'), ('TLS.AX', 'None', 'Diff_', 'T+S+R'), ('TLS.AX', 'None', 'RelDiff_', 'T+S+R'), ('TLS.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'TLS.AX', 'Transformations': [('TLS.AX', 'None', 'CumSum_', 'T+S+R'), ('TLS.AX', 'None', 'Diff_', 'T+S+R'), ('TLS.AX', 'None', 'RelDiff_', 'T+S+R'), ('TLS.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'TLS.AX', 'Transformations': [('TLS.AX', 'None', 'CumSum_', 'T+S+R'), ('TLS.AX', 'None', 'Diff_', 'T+S+R'), ('TLS.AX', 'None', 'RelDiff_', 'T+S+R'), ('TLS.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TLS.AX', 'Model': '_TLS.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TLS.AX', 'Model': '_TLS.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TLS.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.187, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TLS.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FINALIZE_TRAINING', {'Signals': ['TLS.AX'], 'Transformations': [('TLS.AX', [('TLS.AX', 'None', 'CumSum_', 'T+S+R'), ('TLS.AX', 'None', 'Diff_', 'T+S+R'), ('TLS.AX', 'None', 'RelDiff_', 'T+S+R'), ('TLS.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='TLS.AX' Length=1299  Min=2.79 Max=6.67  Mean=4.8658583525789005 StdDev=0.9779874064408746
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_TLS.AX' Min=0.0 Max=1.0  Mean=0.5350150393244613 StdDev=0.2520586099074415
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_TLS.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_TLS.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_TLS.AX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_TLS.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.007 MAPE_Forecast=0.0095 MAPE_Test=0.0047
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.007 SMAPE_Forecast=0.0095 SMAPE_Test=0.0048
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0028 MASE_Test=1.4805
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.30376163448310994 CRPS_Forecast=0.08375012309788779 CRPS_Test=0.030000000000000058
INFO:pyaf.std:MODEL_L1 L1_Fit=0.032303969022265254 L1_Forecast=0.052432432432432445 L1_Test=0.027142857142857198
INFO:pyaf.std:MODEL_L2 L2_Fit=0.043648911701663226 L2_Forecast=0.0674179037435439 L2_Test=0.041918287860346425
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.09171972787814137 LnQ_Forecast=0.038573680709653585 LnQ_Test=0.00038213290147193034
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.02999999999999936 MedAE_Forecast=0.040000000000000036 MedAE_Test=0.009999999999999787
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.05412371134020618
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _TLS.AX_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ...  FitMAPE ForecastMAPE    TestMAPE
0    None         _TLS.AX             T+S+R  ...   0.0068       0.0093      0.0046
1    None         _TLS.AX             T+S+R  ...   0.0068       0.0093      0.0045
2    None         _TLS.AX             T+S+R  ...   0.0070       0.0095      0.0047
3    None         _TLS.AX             T+S+R  ...   0.0070       0.0095      0.0047
4    None   CumSum_TLS.AX             T+S+R  ...   0.0071       0.0095      0.0047
..    ...             ...               ...  ...      ...          ...         ...
203  None  RelDiff_TLS.AX             T+S+R  ...  18.0322    2168.7726  28427.4599
204  None  RelDiff_TLS.AX             T+S+R  ...  18.4557    2239.7605  29566.4032
205  None  RelDiff_TLS.AX             T+S+R  ...  14.4166    2292.3362  33584.1031
206  None  RelDiff_TLS.AX             T+S+R  ...  15.8527    2372.8098  34950.0801
207  None  RelDiff_TLS.AX             T+S+R  ...  21.4250    2680.8010  35796.5368

[208 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _TLS.AX             T+S+R  ...  0.0068       0.0093   0.0046
1  None        _TLS.AX             T+S+R  ...  0.0068       0.0093   0.0045
2  None        _TLS.AX             T+S+R  ...  0.0070       0.0095   0.0047
3  None        _TLS.AX             T+S+R  ...  0.0070       0.0095   0.0047
4  None  CumSum_TLS.AX             T+S+R  ...  0.0071       0.0095   0.0047

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['TLS.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.153, ('FORECASTING', {'Signals': ['TLS.AX'], 'Horizon': 7}))
7 0    5.83
1    5.83
2    5.80
3    5.82
4    5.77
5    5.73
6    5.74
Name: TLS.AX, dtype: float64
7 0    5.78
1    5.78
2    5.78
3    5.78
4    5.78
5    5.78
6    5.78
Name: TLS.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_TLS.AX TLS.AX [5.83, 5.83, 5.8, 5.82, 5.77, 5.73, 5.74]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_TLS.AX TLS.AX [5.78, 5.78, 5.78, 5.78, 5.78, 5.78, 5.78]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_TLS.AX TLS.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_TLS.AX TLS.AX 12.028899908065796
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_TLS.AX TLS.AX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_TLS.AX TLS.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_TLS.AX TLS.AX 0.0064 0.0064 1.4857
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_TLS.AX TLS.AX 0.03714285714285711 0.039999999999999904 -0.04812833243729964
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_TLS.AX_7'
