BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  ACR.AX N= 1299 H= 7 HEAD= [4.16 4.1  4.15 4.24 4.17] TAIL= [0.74  0.735 0.735 0.73  0.73 ]
   ACR.AX       Date
0    4.16 2011-07-28
1    4.10 2011-07-29
2    4.15 2011-08-01
3    4.24 2011-08-02
4    4.17 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   ACR.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ACR.AX'], 'Transformations': [('ACR.AX', 'None', '_', 'T+S+R'), ('ACR.AX', 'None', 'Diff_', 'T+S+R'), ('ACR.AX', 'None', 'RelDiff_', 'T+S+R'), ('ACR.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ACR.AX', 'Transformation': '_ACR.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.324, ('TRAINING', {'Signal': 'ACR.AX', 'Transformation': '_ACR.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ACR.AX', 'Transformation': 'Diff_ACR.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.785, ('TRAINING', {'Signal': 'ACR.AX', 'Transformation': 'Diff_ACR.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ACR.AX', 'Transformation': 'RelDiff_ACR.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.153, ('TRAINING', {'Signal': 'ACR.AX', 'Transformation': 'RelDiff_ACR.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ACR.AX', 'Transformation': 'CumSum_ACR.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.453, ('TRAINING', {'Signal': 'ACR.AX', 'Transformation': 'CumSum_ACR.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.716, ('SIGNAL_TRAINING', {'Signals': ['ACR.AX'], 'Transformations': [('ACR.AX', 'None', '_', 'T+S+R'), ('ACR.AX', 'None', 'Diff_', 'T+S+R'), ('ACR.AX', 'None', 'RelDiff_', 'T+S+R'), ('ACR.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ACR.AX'], 'Transformations': [('ACR.AX', [('ACR.AX', 'None', 'CumSum_', 'T+S+R'), ('ACR.AX', 'None', 'Diff_', 'T+S+R'), ('ACR.AX', 'None', 'RelDiff_', 'T+S+R'), ('ACR.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ACR.AX', 'Transformations': [('ACR.AX', 'None', 'CumSum_', 'T+S+R'), ('ACR.AX', 'None', 'Diff_', 'T+S+R'), ('ACR.AX', 'None', 'RelDiff_', 'T+S+R'), ('ACR.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': 'ACR.AX', 'Transformations': [('ACR.AX', 'None', 'CumSum_', 'T+S+R'), ('ACR.AX', 'None', 'Diff_', 'T+S+R'), ('ACR.AX', 'None', 'RelDiff_', 'T+S+R'), ('ACR.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ACR.AX', 'Model': '_ACR.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ACR.AX', 'Model': '_ACR.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ACR.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.191, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ACR.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.228, ('FINALIZE_TRAINING', {'Signals': ['ACR.AX'], 'Transformations': [('ACR.AX', [('ACR.AX', 'None', 'CumSum_', 'T+S+R'), ('ACR.AX', 'None', 'Diff_', 'T+S+R'), ('ACR.AX', 'None', 'RelDiff_', 'T+S+R'), ('ACR.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ACR.AX' Length=1299  Min=0.57 Max=4.76  Mean=2.2368052347959955 StdDev=1.2848413577735662
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ACR.AX' Min=0.0 Max=1.0  Mean=0.3978055452973754 StdDev=0.3066447154590856
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ACR.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ACR.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ACR.AX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_ACR.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.022 MAPE_Forecast=0.022 MAPE_Test=0.0107
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0218 SMAPE_Forecast=0.022 SMAPE_Test=0.0107
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9974 MASE_Test=1.1786
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.3393678682427268 CRPS_Forecast=0.018734891664774017 CRPS_Test=0.0032142857142857173
INFO:pyaf.std:MODEL_L1 L1_Fit=0.051350435624394966 L1_Forecast=0.01536679536679537 L1_Test=0.007857142857142865
INFO:pyaf.std:MODEL_L2 L2_Fit=0.08168941606474507 L2_Forecast=0.0220608145062583 L2_Test=0.010177004891982158
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=1.3484189910301476 LnQ_Forecast=0.23747371196605394 LnQ_Test=0.0013340055335369972
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.03000000000000025 MedAE_Forecast=0.010000000000000009 MedAE_Test=0.0050000000000000044
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.856801909307876
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _ACR.AX_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None        _ACR.AX             T+S+R  ...  0.0220       0.0220   0.0107
1    None        _ACR.AX             T+S+R  ...  0.0220       0.0220   0.0107
2    None  CumSum_ACR.AX             T+S+R  ...  0.0228       0.0220   0.0107
3    None  CumSum_ACR.AX             T+S+R  ...  0.0228       0.0220   0.0107
4    None    Diff_ACR.AX             T+S+R  ...  0.0220       0.0220   0.0107
..    ...            ...               ...  ...     ...          ...      ...
211  None  CumSum_ACR.AX             T+S+R  ...  2.6324       9.7125   3.4616
212  None  CumSum_ACR.AX             T+S+R  ...  4.9114      15.3563   5.3816
213  None  CumSum_ACR.AX             T+S+R  ...  4.1941      15.7558   3.7169
214  None  CumSum_ACR.AX             T+S+R  ...  3.9445      16.2353   4.9920
215  None  CumSum_ACR.AX             T+S+R  ...  9.7767      28.6055  28.9655

[216 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _ACR.AX             T+S+R  ...  0.0220        0.022   0.0107
1  None        _ACR.AX             T+S+R  ...  0.0220        0.022   0.0107
2  None  CumSum_ACR.AX             T+S+R  ...  0.0228        0.022   0.0107
3  None  CumSum_ACR.AX             T+S+R  ...  0.0228        0.022   0.0107
4  None    Diff_ACR.AX             T+S+R  ...  0.0220        0.022   0.0107

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ACR.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.221, ('FORECASTING', {'Signals': ['ACR.AX'], 'Horizon': 7}))
7 0    0.760
1    0.770
2    0.780
3    0.800
4    0.830
5    0.745
6    0.740
Name: ACR.AX, dtype: float64
7 0    0.73
1    0.73
2    0.73
3    0.73
4    0.73
5    0.73
6    0.73
Name: ACR.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_ACR.AX ACR.AX [0.76, 0.77, 0.78, 0.8, 0.83, 0.745, 0.74]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_ACR.AX ACR.AX [0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_ACR.AX ACR.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_ACR.AX ACR.AX 12.261868000030518
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_ACR.AX ACR.AX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_ACR.AX ACR.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_ACR.AX ACR.AX 0.0567 0.0591 1.6875
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_ACR.AX ACR.AX 0.045000000000000026 0.05375207637185484 -2.3429751513557853
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_ACR.AX_7'
