BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1298 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  TOE.AX N= 1298 H= 7 HEAD= [0.091 0.085 0.088 0.085 0.083] TAIL= [0.051 0.053 0.051 0.05  0.051]
   TOE.AX       Date
0   0.091 2011-07-28
1   0.085 2011-07-29
2   0.088 2011-08-01
3   0.085 2011-08-02
4   0.083 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1298 entries, 0 to 1297
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   TOE.AX  1298 non-null   float64       
 1   Date    1298 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['TOE.AX'], 'Transformations': [('TOE.AX', 'None', '_', 'T+S+R'), ('TOE.AX', 'None', 'Diff_', 'T+S+R'), ('TOE.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOE.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TOE.AX', 'Transformation': '_TOE.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.558, ('TRAINING', {'Signal': 'TOE.AX', 'Transformation': '_TOE.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TOE.AX', 'Transformation': 'Diff_TOE.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.466, ('TRAINING', {'Signal': 'TOE.AX', 'Transformation': 'Diff_TOE.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TOE.AX', 'Transformation': 'RelDiff_TOE.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.399, ('TRAINING', {'Signal': 'TOE.AX', 'Transformation': 'RelDiff_TOE.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TOE.AX', 'Transformation': 'CumSum_TOE.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.448, ('TRAINING', {'Signal': 'TOE.AX', 'Transformation': 'CumSum_TOE.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 8.873, ('SIGNAL_TRAINING', {'Signals': ['TOE.AX'], 'Transformations': [('TOE.AX', 'None', '_', 'T+S+R'), ('TOE.AX', 'None', 'Diff_', 'T+S+R'), ('TOE.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOE.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['TOE.AX'], 'Transformations': [('TOE.AX', [('TOE.AX', 'None', 'CumSum_', 'T+S+R'), ('TOE.AX', 'None', 'Diff_', 'T+S+R'), ('TOE.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOE.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'TOE.AX', 'Transformations': [('TOE.AX', 'None', 'CumSum_', 'T+S+R'), ('TOE.AX', 'None', 'Diff_', 'T+S+R'), ('TOE.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOE.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'TOE.AX', 'Transformations': [('TOE.AX', 'None', 'CumSum_', 'T+S+R'), ('TOE.AX', 'None', 'Diff_', 'T+S+R'), ('TOE.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOE.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TOE.AX', 'Model': '_TOE.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TOE.AX', 'Model': '_TOE.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TOE.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.183, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TOE.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.216, ('FINALIZE_TRAINING', {'Signals': ['TOE.AX'], 'Transformations': [('TOE.AX', [('TOE.AX', 'None', 'CumSum_', 'T+S+R'), ('TOE.AX', 'None', 'Diff_', 'T+S+R'), ('TOE.AX', 'None', 'RelDiff_', 'T+S+R'), ('TOE.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='TOE.AX' Length=1298  Min=0.044 Max=0.145  Mean=0.07778582434514635 StdDev=0.0165918663861428
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_TOE.AX' Min=0.0 Max=1.0  Mean=0.3345131123281823 StdDev=0.16427590481329504
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_TOE.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_TOE.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_TOE.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_TOE.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.022 MAPE_Forecast=0.018 MAPE_Test=0.0167
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0221 SMAPE_Forecast=0.018 SMAPE_Test=0.0166
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9997 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.0041876264789881676 CRPS_Forecast=0.0018685558028616858 CRPS_Test=0.00021428571428571398
INFO:pyaf.std:MODEL_L1 L1_Fit=0.0019118217054263568 L1_Forecast=0.001084942084942085 L1_Test=0.0008571428571428559
INFO:pyaf.std:MODEL_L2 L2_Fit=0.0033397709154134904 L2_Forecast=0.0016521893746570735 L2_Test=0.001195228609334393
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=1.3026342238808808 LnQ_Forecast=0.19169903574844485 LnQ_Test=0.0037435976171085418
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0010000000000000009 MedAE_Forecast=0.0010000000000000009 MedAE_Test=0.000999999999999994
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.46534653465346537
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _TOE.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _TOE.AX             T+S+R  ...  0.0220       0.0180   0.0167
1    None   CumSum_TOE.AX             T+S+R  ...  0.0224       0.0180   0.0167
2    None   CumSum_TOE.AX             T+S+R  ...  0.0224       0.0180   0.0167
3    None     Diff_TOE.AX             T+S+R  ...  0.0220       0.0180   0.0167
4    None         _TOE.AX             T+S+R  ...  0.0220       0.0180   0.0167
..    ...             ...               ...  ...     ...          ...      ...
139  None  RelDiff_TOE.AX             T+S+R  ...  1.4880       7.1008   9.3904
140  None  RelDiff_TOE.AX             T+S+R  ...  1.4880       7.1008   9.3904
141  None  RelDiff_TOE.AX             T+S+R  ...  2.0778       7.1195   8.8743
142  None  RelDiff_TOE.AX             T+S+R  ...  2.0778       7.1195   8.8743
143  None  RelDiff_TOE.AX             T+S+R  ...  1.6472       8.7201  13.0735

[144 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _TOE.AX             T+S+R  ...  0.0220        0.018   0.0167
1  None  CumSum_TOE.AX             T+S+R  ...  0.0224        0.018   0.0167
2  None  CumSum_TOE.AX             T+S+R  ...  0.0224        0.018   0.0167
3  None    Diff_TOE.AX             T+S+R  ...  0.0220        0.018   0.0167
4  None        _TOE.AX             T+S+R  ...  0.0220        0.018   0.0167

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['TOE.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.153, ('FORECASTING', {'Signals': ['TOE.AX'], 'Horizon': 7}))
7 0    0.050
1    0.051
2    0.050
3    0.049
4    0.050
5    0.049
6    0.049
Name: TOE.AX, dtype: float64
7 0    0.051
1    0.051
2    0.051
3    0.051
4    0.051
5    0.051
6    0.051
Name: TOE.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_TOE.AX TOE.AX [0.05, 0.051, 0.05, 0.049, 0.05, 0.049, 0.049]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_TOE.AX TOE.AX [0.051, 0.051, 0.051, 0.051, 0.051, 0.051, 0.051]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_TOE.AX TOE.AX 1298 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_TOE.AX TOE.AX 9.337535619735718
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_TOE.AX TOE.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_TOE.AX TOE.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_TOE.AX TOE.AX 0.0261 0.0256 1.5429
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_TOE.AX TOE.AX 0.0012857142857142809 0.0014638501094227949 -3.3748723995549987
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_TOE.AX_7'
