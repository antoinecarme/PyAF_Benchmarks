BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  TRY.AX N= 1299 H= 7 HEAD= [4.1  4.05 4.1  4.07 4.07] TAIL= [0.595 0.57  0.56  0.54  0.54 ]
   TRY.AX       Date
0    4.10 2011-07-28
1    4.05 2011-07-29
2    4.10 2011-08-01
3    4.07 2011-08-02
4    4.07 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   TRY.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['TRY.AX'], 'Transformations': [('TRY.AX', 'None', '_', 'T+S+R'), ('TRY.AX', 'None', 'Diff_', 'T+S+R'), ('TRY.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRY.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TRY.AX', 'Transformation': '_TRY.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.229, ('TRAINING', {'Signal': 'TRY.AX', 'Transformation': '_TRY.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TRY.AX', 'Transformation': 'Diff_TRY.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.84, ('TRAINING', {'Signal': 'TRY.AX', 'Transformation': 'Diff_TRY.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TRY.AX', 'Transformation': 'RelDiff_TRY.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.852, ('TRAINING', {'Signal': 'TRY.AX', 'Transformation': 'RelDiff_TRY.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'TRY.AX', 'Transformation': 'CumSum_TRY.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.503, ('TRAINING', {'Signal': 'TRY.AX', 'Transformation': 'CumSum_TRY.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.425, ('SIGNAL_TRAINING', {'Signals': ['TRY.AX'], 'Transformations': [('TRY.AX', 'None', '_', 'T+S+R'), ('TRY.AX', 'None', 'Diff_', 'T+S+R'), ('TRY.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRY.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['TRY.AX'], 'Transformations': [('TRY.AX', [('TRY.AX', 'None', 'CumSum_', 'T+S+R'), ('TRY.AX', 'None', 'Diff_', 'T+S+R'), ('TRY.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRY.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'TRY.AX', 'Transformations': [('TRY.AX', 'None', 'CumSum_', 'T+S+R'), ('TRY.AX', 'None', 'Diff_', 'T+S+R'), ('TRY.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRY.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'TRY.AX', 'Transformations': [('TRY.AX', 'None', 'CumSum_', 'T+S+R'), ('TRY.AX', 'None', 'Diff_', 'T+S+R'), ('TRY.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRY.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TRY.AX', 'Model': '_TRY.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'TRY.AX', 'Model': '_TRY.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TRY.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.223, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'TRY.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.259, ('FINALIZE_TRAINING', {'Signals': ['TRY.AX'], 'Transformations': [('TRY.AX', [('TRY.AX', 'None', 'CumSum_', 'T+S+R'), ('TRY.AX', 'None', 'Diff_', 'T+S+R'), ('TRY.AX', 'None', 'RelDiff_', 'T+S+R'), ('TRY.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='TRY.AX' Length=1299  Min=0.195 Max=5.05  Mean=1.9457744418783702 StdDev=1.6624852781792687
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_TRY.AX' Min=0.0 Max=1.0  Mean=0.3606126553817447 StdDev=0.3424274517362036
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_TRY.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_TRY.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_TRY.AX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_TRY.AX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0273 MAPE_Forecast=0.0344 MAPE_Test=0.0236
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0271 SMAPE_Forecast=0.0346 SMAPE_Test=0.0232
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9961 MASE_Test=0.9048
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.47939642584195247 CRPS_Forecast=0.04278768512377924 CRPS_Test=0.014999999999999989
INFO:pyaf.std:MODEL_L1 L1_Fit=0.05200871248789932 L1_Forecast=0.014131274131274128 L1_Test=0.01357142857142852
INFO:pyaf.std:MODEL_L2 L2_Fit=0.07754382329040596 L2_Forecast=0.02005629143822023 L2_Test=0.01721710113313418
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=1.495347398245391 LnQ_Forecast=0.5416963730231303 LnQ_Test=0.005992439485782636
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.03499999999999992 MedAE_Forecast=0.010000000000000009 MedAE_Test=0.009999999999999787
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.8043254376930999
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _TRY.AX_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ...  FitMAPE ForecastMAPE TestMAPE
0    None        _TRY.AX             T+S+R  ...   0.0273       0.0344   0.0236
1    None        _TRY.AX             T+S+R  ...   0.0273       0.0344   0.0236
2    None  CumSum_TRY.AX             T+S+R  ...   0.0282       0.0344   0.0236
3    None  CumSum_TRY.AX             T+S+R  ...   0.0282       0.0344   0.0236
4    None    Diff_TRY.AX             T+S+R  ...   0.0273       0.0344   0.0236
..    ...            ...               ...  ...      ...          ...      ...
195  None  CumSum_TRY.AX             T+S+R  ...   8.4577      31.6502   6.1910
196  None  CumSum_TRY.AX             T+S+R  ...  12.3745      45.4482   8.1333
197  None  CumSum_TRY.AX             T+S+R  ...  11.2635      47.3661   8.4657
198  None  CumSum_TRY.AX             T+S+R  ...  12.8438      47.6566  16.4134
199  None  CumSum_TRY.AX             T+S+R  ...  24.4721      91.2139  47.8824

[200 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _TRY.AX             T+S+R  ...  0.0273       0.0344   0.0236
1  None        _TRY.AX             T+S+R  ...  0.0273       0.0344   0.0236
2  None  CumSum_TRY.AX             T+S+R  ...  0.0282       0.0344   0.0236
3  None  CumSum_TRY.AX             T+S+R  ...  0.0282       0.0344   0.0236
4  None    Diff_TRY.AX             T+S+R  ...  0.0273       0.0344   0.0236

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['TRY.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FORECASTING', {'Signals': ['TRY.AX'], 'Horizon': 7}))
7 0    0.560
1    0.530
2    0.515
3    0.510
4    0.510
5    0.520
6    0.535
Name: TRY.AX, dtype: float64
7 0    0.54
1    0.54
2    0.54
3    0.54
4    0.54
5    0.54
6    0.54
Name: TRY.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_TRY.AX TRY.AX [0.56, 0.53, 0.515, 0.51, 0.51, 0.52, 0.535]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_TRY.AX TRY.AX [0.54, 0.54, 0.54, 0.54, 0.54, 0.54, 0.54]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_TRY.AX TRY.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_TRY.AX TRY.AX 12.003220081329346
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_TRY.AX TRY.AX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_TRY.AX TRY.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_TRY.AX TRY.AX 0.0384 0.0377 1.6
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_TRY.AX TRY.AX 0.020000000000000018 0.02187627547301938 -0.7434943330523391
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_TRY.AX_7'
