BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1297 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  DUE.AX N= 1297 H= 7 HEAD= [1.46792 1.4632  1.53872 1.51984 1.5104 ] TAIL= [2.48 2.51 2.51 2.52 2.59]
    DUE.AX       Date
0  1.46792 2011-07-28
1  1.46320 2011-07-29
2  1.53872 2011-08-01
3  1.51984 2011-08-02
4  1.51040 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1297 entries, 0 to 1296
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   DUE.AX  1297 non-null   float64       
 1   Date    1297 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['DUE.AX'], 'Transformations': [('DUE.AX', 'None', '_', 'T+S+R'), ('DUE.AX', 'None', 'Diff_', 'T+S+R'), ('DUE.AX', 'None', 'RelDiff_', 'T+S+R'), ('DUE.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DUE.AX', 'Transformation': '_DUE.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.449, ('TRAINING', {'Signal': 'DUE.AX', 'Transformation': '_DUE.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DUE.AX', 'Transformation': 'Diff_DUE.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.188, ('TRAINING', {'Signal': 'DUE.AX', 'Transformation': 'Diff_DUE.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DUE.AX', 'Transformation': 'RelDiff_DUE.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.201, ('TRAINING', {'Signal': 'DUE.AX', 'Transformation': 'RelDiff_DUE.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DUE.AX', 'Transformation': 'CumSum_DUE.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.806, ('TRAINING', {'Signal': 'DUE.AX', 'Transformation': 'CumSum_DUE.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.646, ('SIGNAL_TRAINING', {'Signals': ['DUE.AX'], 'Transformations': [('DUE.AX', 'None', '_', 'T+S+R'), ('DUE.AX', 'None', 'Diff_', 'T+S+R'), ('DUE.AX', 'None', 'RelDiff_', 'T+S+R'), ('DUE.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['DUE.AX'], 'Transformations': [('DUE.AX', [('DUE.AX', 'None', 'CumSum_', 'T+S+R'), ('DUE.AX', 'None', 'Diff_', 'T+S+R'), ('DUE.AX', 'None', 'RelDiff_', 'T+S+R'), ('DUE.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'DUE.AX', 'Transformations': [('DUE.AX', 'None', 'CumSum_', 'T+S+R'), ('DUE.AX', 'None', 'Diff_', 'T+S+R'), ('DUE.AX', 'None', 'RelDiff_', 'T+S+R'), ('DUE.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'DUE.AX', 'Transformations': [('DUE.AX', 'None', 'CumSum_', 'T+S+R'), ('DUE.AX', 'None', 'Diff_', 'T+S+R'), ('DUE.AX', 'None', 'RelDiff_', 'T+S+R'), ('DUE.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DUE.AX', 'Model': '_DUE.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.029, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DUE.AX', 'Model': '_DUE.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DUE.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.192, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DUE.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.229, ('FINALIZE_TRAINING', {'Signals': ['DUE.AX'], 'Transformations': [('DUE.AX', [('DUE.AX', 'None', 'CumSum_', 'T+S+R'), ('DUE.AX', 'None', 'Diff_', 'T+S+R'), ('DUE.AX', 'None', 'RelDiff_', 'T+S+R'), ('DUE.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-14T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='DUE.AX' Length=1297  Min=1.46122 Max=2.59  Mean=2.094549768696994 StdDev=0.25982569792108245
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_DUE.AX' Min=0.0 Max=1.0  Mean=0.5610745837957754 StdDev=0.2301827618500355
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_DUE.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_DUE.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_DUE.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_DUE.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0077 MAPE_Forecast=0.0073 MAPE_Test=0.0096
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0077 SMAPE_Forecast=0.0073 SMAPE_Test=0.0097
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0052 MASE_Test=1.1209
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.07967028208894329 CRPS_Forecast=0.024611655038759683 CRPS_Test=0.015714285714285663
INFO:pyaf.std:MODEL_L1 L1_Fit=0.015570203488372089 L1_Forecast=0.016551899224806207 L1_Test=0.024285714285714275
INFO:pyaf.std:MODEL_L2 L2_Fit=0.022597443390156277 L2_Forecast=0.02316585057678083 L2_Test=0.03316624790355394
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.13094422600578337 LnQ_Forecast=0.02654160097243699 LnQ_Test=0.001212634299072474
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.009520000000000195 MedAE_Forecast=0.010000000000000231 MedAE_Test=0.010000000000000231
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.005935611899572927
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _DUE.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation  ... ForecastMAPE     TestMAPE
0    None         _DUE.AX  ...       0.0072       0.0096
1    None         _DUE.AX  ...       0.0073       0.0096
2    None   CumSum_DUE.AX  ...       0.0073       0.0096
3    None     Diff_DUE.AX  ...       0.0073       0.0096
4    None         _DUE.AX  ...       0.0073       0.0096
..    ...             ...  ...          ...          ...
203  None  RelDiff_DUE.AX  ...   53705.6467  267456.5677
204  None  RelDiff_DUE.AX  ...   55232.8714  267456.5677
205  None  RelDiff_DUE.AX  ...   55232.8714  267456.5677
206  None  RelDiff_DUE.AX  ...   57215.3409  267456.5677
207  None  RelDiff_DUE.AX  ...   58667.2627  267456.5677

[208 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _DUE.AX             T+S+R  ...  0.0077       0.0072   0.0096
1  None        _DUE.AX             T+S+R  ...  0.0077       0.0073   0.0096
2  None  CumSum_DUE.AX             T+S+R  ...  0.0077       0.0073   0.0096
3  None    Diff_DUE.AX             T+S+R  ...  0.0077       0.0073   0.0096
4  None        _DUE.AX             T+S+R  ...  0.0077       0.0073   0.0096

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['DUE.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.16, ('FORECASTING', {'Signals': ['DUE.AX'], 'Horizon': 7}))
7 0    2.59
1    2.64
2    2.62
3    2.65
4    2.68
5    2.65
6    2.62
Name: DUE.AX, dtype: float64
7 0    2.59
1    2.59
2    2.59
3    2.59
4    2.59
5    2.59
6    2.59
Name: DUE.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_DUE.AX DUE.AX [2.59, 2.64, 2.62, 2.65, 2.68, 2.65, 2.62]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_DUE.AX DUE.AX [2.59, 2.59, 2.59, 2.59, 2.59, 2.59, 2.59]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_DUE.AX DUE.AX 1297 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_DUE.AX DUE.AX 12.1575448513031
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_DUE.AX DUE.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_DUE.AX DUE.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_DUE.AX DUE.AX 0.0172 0.0174 1.4436
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_DUE.AX DUE.AX 0.04571428571428588 0.05291502622129198 -2.9425286563284585
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_DUE.AX_7'
