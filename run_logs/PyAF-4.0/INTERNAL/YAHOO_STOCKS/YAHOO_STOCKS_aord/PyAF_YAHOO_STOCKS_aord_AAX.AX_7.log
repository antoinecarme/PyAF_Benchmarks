BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1299 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  AAX.AX N= 1299 H= 7 HEAD= [2.56 2.53 2.66 2.6  2.54] TAIL= [0.38  0.375 0.375 0.375 0.37 ]
   AAX.AX       Date
0    2.56 2011-07-28
1    2.53 2011-07-29
2    2.66 2011-08-01
3    2.60 2011-08-02
4    2.54 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1299 entries, 0 to 1298
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AAX.AX  1299 non-null   float64       
 1   Date    1299 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AAX.AX'], 'Transformations': [('AAX.AX', 'None', '_', 'T+S+R'), ('AAX.AX', 'None', 'Diff_', 'T+S+R'), ('AAX.AX', 'None', 'RelDiff_', 'T+S+R'), ('AAX.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AAX.AX', 'Transformation': '_AAX.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.773, ('TRAINING', {'Signal': 'AAX.AX', 'Transformation': '_AAX.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AAX.AX', 'Transformation': 'Diff_AAX.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.406, ('TRAINING', {'Signal': 'AAX.AX', 'Transformation': 'Diff_AAX.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AAX.AX', 'Transformation': 'RelDiff_AAX.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.746, ('TRAINING', {'Signal': 'AAX.AX', 'Transformation': 'RelDiff_AAX.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AAX.AX', 'Transformation': 'CumSum_AAX.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.421, ('TRAINING', {'Signal': 'AAX.AX', 'Transformation': 'CumSum_AAX.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 10.347, ('SIGNAL_TRAINING', {'Signals': ['AAX.AX'], 'Transformations': [('AAX.AX', 'None', '_', 'T+S+R'), ('AAX.AX', 'None', 'Diff_', 'T+S+R'), ('AAX.AX', 'None', 'RelDiff_', 'T+S+R'), ('AAX.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AAX.AX'], 'Transformations': [('AAX.AX', [('AAX.AX', 'None', 'CumSum_', 'T+S+R'), ('AAX.AX', 'None', 'Diff_', 'T+S+R'), ('AAX.AX', 'None', 'RelDiff_', 'T+S+R'), ('AAX.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AAX.AX', 'Transformations': [('AAX.AX', 'None', 'CumSum_', 'T+S+R'), ('AAX.AX', 'None', 'Diff_', 'T+S+R'), ('AAX.AX', 'None', 'RelDiff_', 'T+S+R'), ('AAX.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'AAX.AX', 'Transformations': [('AAX.AX', 'None', 'CumSum_', 'T+S+R'), ('AAX.AX', 'None', 'Diff_', 'T+S+R'), ('AAX.AX', 'None', 'RelDiff_', 'T+S+R'), ('AAX.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AAX.AX', 'Model': '_AAX.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AAX.AX', 'Model': '_AAX.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AAX.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.182, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AAX.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.216, ('FINALIZE_TRAINING', {'Signals': ['AAX.AX'], 'Transformations': [('AAX.AX', [('AAX.AX', 'None', 'CumSum_', 'T+S+R'), ('AAX.AX', 'None', 'Diff_', 'T+S+R'), ('AAX.AX', 'None', 'RelDiff_', 'T+S+R'), ('AAX.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AAX.AX' Length=1299  Min=0.2 Max=4.55  Mean=1.5640354118552704 StdDev=1.347299788777508
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AAX.AX' Min=0.0 Max=1.0  Mean=0.31357135904719086 StdDev=0.3097240893741393
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AAX.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AAX.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AAX.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_AAX.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0251 MAPE_Forecast=0.0367 MAPE_Test=0.0057
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0248 SMAPE_Forecast=0.0367 SMAPE_Test=0.0057
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0029 MASE_Test=1.2857
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.3939948260049931 CRPS_Forecast=0.016683096070860774 CRPS_Test=0.0017857142857142874
INFO:pyaf.std:MODEL_L1 L1_Fit=0.0429622458857696 L1_Forecast=0.011432432432432433 L1_Test=0.0021428571428571447
INFO:pyaf.std:MODEL_L2 L2_Fit=0.07248393352705615 L2_Forecast=0.01819276872762456 L2_Test=0.003273268353539889
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=1.688534592987831 LnQ_Forecast=0.8188522731153214 LnQ_Test=0.0005264928230000473
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.020000000000000018 MedAE_Forecast=0.0050000000000000044 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.542528735632184
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _AAX.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE    TestMAPE
0    None         _AAX.AX             T+S+R  ...  0.0251       0.0367      0.0057
1    None   CumSum_AAX.AX             T+S+R  ...  0.0260       0.0367      0.0057
2    None   CumSum_AAX.AX             T+S+R  ...  0.0260       0.0367      0.0057
3    None     Diff_AAX.AX             T+S+R  ...  0.0251       0.0367      0.0057
4    None     Diff_AAX.AX             T+S+R  ...  0.0251       0.0367      0.0057
..    ...             ...               ...  ...     ...          ...         ...
179  None  RelDiff_AAX.AX             T+S+R  ...  2.2386     922.5446  12205.8065
180  None  RelDiff_AAX.AX             T+S+R  ...  2.2386     922.5446  12205.8065
181  None  RelDiff_AAX.AX             T+S+R  ...  2.3029     979.3358  11455.8015
182  None  RelDiff_AAX.AX             T+S+R  ...  2.2621    1034.6236  13850.2186
183  None  RelDiff_AAX.AX             T+S+R  ...  2.2234    1496.7919  20593.4558

[184 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _AAX.AX             T+S+R  ...  0.0251       0.0367   0.0057
1  None  CumSum_AAX.AX             T+S+R  ...  0.0260       0.0367   0.0057
2  None  CumSum_AAX.AX             T+S+R  ...  0.0260       0.0367   0.0057
3  None    Diff_AAX.AX             T+S+R  ...  0.0251       0.0367   0.0057
4  None    Diff_AAX.AX             T+S+R  ...  0.0251       0.0367   0.0057

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AAX.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.152, ('FORECASTING', {'Signals': ['AAX.AX'], 'Horizon': 7}))
7 0    0.380
1    0.375
2    0.380
3    0.380
4    0.385
5    0.385
6    0.385
Name: AAX.AX, dtype: float64
7 0    0.37
1    0.37
2    0.37
3    0.37
4    0.37
5    0.37
6    0.37
Name: AAX.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AAX.AX AAX.AX [0.38, 0.375, 0.38, 0.38, 0.385, 0.385, 0.385]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AAX.AX AAX.AX [0.37, 0.37, 0.37, 0.37, 0.37, 0.37, 0.37]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AAX.AX AAX.AX 1299 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AAX.AX AAX.AX 10.809690475463867
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AAX.AX AAX.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AAX.AX AAX.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AAX.AX AAX.AX 0.0299 0.0304 4.5714
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AAX.AX AAX.AX 0.011428571428571439 0.011952286093343947 -10.666653055571436
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_AAX.AX_7'
