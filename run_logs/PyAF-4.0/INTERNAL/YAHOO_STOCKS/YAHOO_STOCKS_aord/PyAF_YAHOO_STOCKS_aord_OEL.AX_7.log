BENCH_DATA YAHOO_STOCKS_aord
TIME :  Date N= 1296 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  OEL.AX N= 1296 H= 7 HEAD= [0.08  0.082 0.083 0.083 0.081] TAIL= [0.05  0.049 0.051 0.053 0.057]
   OEL.AX       Date
0   0.080 2011-07-28
1   0.082 2011-07-29
2   0.083 2011-08-01
3   0.083 2011-08-02
4   0.081 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1296 entries, 0 to 1295
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   OEL.AX  1296 non-null   float64       
 1   Date    1296 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['OEL.AX'], 'Transformations': [('OEL.AX', 'None', '_', 'T+S+R'), ('OEL.AX', 'None', 'Diff_', 'T+S+R'), ('OEL.AX', 'None', 'RelDiff_', 'T+S+R'), ('OEL.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'OEL.AX', 'Transformation': '_OEL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.933, ('TRAINING', {'Signal': 'OEL.AX', 'Transformation': '_OEL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'OEL.AX', 'Transformation': 'Diff_OEL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.782, ('TRAINING', {'Signal': 'OEL.AX', 'Transformation': 'Diff_OEL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'OEL.AX', 'Transformation': 'RelDiff_OEL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.869, ('TRAINING', {'Signal': 'OEL.AX', 'Transformation': 'RelDiff_OEL.AX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'OEL.AX', 'Transformation': 'CumSum_OEL.AX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.398, ('TRAINING', {'Signal': 'OEL.AX', 'Transformation': 'CumSum_OEL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 8.984, ('SIGNAL_TRAINING', {'Signals': ['OEL.AX'], 'Transformations': [('OEL.AX', 'None', '_', 'T+S+R'), ('OEL.AX', 'None', 'Diff_', 'T+S+R'), ('OEL.AX', 'None', 'RelDiff_', 'T+S+R'), ('OEL.AX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['OEL.AX'], 'Transformations': [('OEL.AX', [('OEL.AX', 'None', 'CumSum_', 'T+S+R'), ('OEL.AX', 'None', 'Diff_', 'T+S+R'), ('OEL.AX', 'None', 'RelDiff_', 'T+S+R'), ('OEL.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'OEL.AX', 'Transformations': [('OEL.AX', 'None', 'CumSum_', 'T+S+R'), ('OEL.AX', 'None', 'Diff_', 'T+S+R'), ('OEL.AX', 'None', 'RelDiff_', 'T+S+R'), ('OEL.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'OEL.AX', 'Transformations': [('OEL.AX', 'None', 'CumSum_', 'T+S+R'), ('OEL.AX', 'None', 'Diff_', 'T+S+R'), ('OEL.AX', 'None', 'RelDiff_', 'T+S+R'), ('OEL.AX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'OEL.AX', 'Model': '_OEL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'OEL.AX', 'Model': '_OEL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'OEL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.184, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'OEL.AX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.218, ('FINALIZE_TRAINING', {'Signals': ['OEL.AX'], 'Transformations': [('OEL.AX', [('OEL.AX', 'None', 'CumSum_', 'T+S+R'), ('OEL.AX', 'None', 'Diff_', 'T+S+R'), ('OEL.AX', 'None', 'RelDiff_', 'T+S+R'), ('OEL.AX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-14T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='OEL.AX' Length=1296  Min=0.019 Max=0.15  Mean=0.08022608024691356 StdDev=0.02664325880168954
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_OEL.AX' Min=0.0 Max=1.0  Mean=0.46737465837338277 StdDev=0.20338365497472907
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_OEL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_OEL.AX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_OEL.AX_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_OEL.AX_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0205 MAPE_Forecast=0.0333 MAPE_Test=0.0527
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0202 SMAPE_Forecast=0.0331 SMAPE_Test=0.0544
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9961 MASE_Test=1.2527
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.0036943016488845777 CRPS_Forecast=0.0030662881896944823 CRPS_Test=0.0009285714285714294
INFO:pyaf.std:MODEL_L1 L1_Fit=0.0018874878758486909 L1_Forecast=0.001124031007751938 L1_Test=0.002714285714285714
INFO:pyaf.std:MODEL_L2 L2_Fit=0.0034727706216355065 L2_Forecast=0.0023999353996473783 L2_Test=0.003139608710833702
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=1.3548416296960712 LnQ_Forecast=1.067135276990341 LnQ_Test=0.0284563959216379
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0010000000000000009 MedAE_Forecast=0.0009999999999999974 MedAE_Test=0.0020000000000000018
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.46564885496183206
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _OEL.AX_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _OEL.AX             T+S+R  ...  0.0205       0.0333   0.0527
1    None   CumSum_OEL.AX             T+S+R  ...  0.0212       0.0333   0.0527
2    None   CumSum_OEL.AX             T+S+R  ...  0.0212       0.0333   0.0527
3    None     Diff_OEL.AX             T+S+R  ...  0.0205       0.0333   0.0527
4    None         _OEL.AX             T+S+R  ...  0.0205       0.0333   0.0527
..    ...             ...               ...  ...     ...          ...      ...
147  None  RelDiff_OEL.AX             T+S+R  ...  0.3461      13.9431  31.3279
148  None  RelDiff_OEL.AX             T+S+R  ...  0.2957      14.6383  32.9352
149  None  RelDiff_OEL.AX             T+S+R  ...  0.2959      14.6402  32.9295
150  None  RelDiff_OEL.AX             T+S+R  ...  0.2959      14.6402  32.9295
151  None   CumSum_OEL.AX             T+S+R  ...  8.2020      19.5214  49.2334

[152 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _OEL.AX             T+S+R  ...  0.0205       0.0333   0.0527
1  None  CumSum_OEL.AX             T+S+R  ...  0.0212       0.0333   0.0527
2  None  CumSum_OEL.AX             T+S+R  ...  0.0212       0.0333   0.0527
3  None    Diff_OEL.AX             T+S+R  ...  0.0205       0.0333   0.0527
4  None        _OEL.AX             T+S+R  ...  0.0205       0.0333   0.0527

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['OEL.AX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.154, ('FORECASTING', {'Signals': ['OEL.AX'], 'Horizon': 7}))
7 0    0.055
1    0.062
2    0.061
3    0.060
4    0.057
5    0.056
6    0.057
Name: OEL.AX, dtype: float64
7 0    0.057
1    0.057
2    0.057
3    0.057
4    0.057
5    0.057
6    0.057
Name: OEL.AX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_OEL.AX OEL.AX [0.055, 0.062, 0.061, 0.06, 0.057, 0.056, 0.057]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_OEL.AX OEL.AX [0.05700000000000001, 0.05700000000000001, 0.05700000000000001, 0.05700000000000001, 0.05700000000000001, 0.05700000000000001, 0.05700000000000001]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_OEL.AX OEL.AX 1296 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_OEL.AX OEL.AX 9.441059112548828
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_OEL.AX OEL.AX Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_OEL.AX OEL.AX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_OEL.AX OEL.AX 0.0358 0.0366 0.9184
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_OEL.AX OEL.AX 0.002142857142857143 0.0028030595529069356 -0.26644445226606095
BENCHMARK_SUCCESS 'YAHOO_STOCKS_aord_OEL.AX_7'
