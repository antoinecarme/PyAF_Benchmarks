BENCH_DATA YAHOO_STOCKS_gdaxi
TIME :  Date N= 1298 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  DAI.DE N= 1298 H= 7 HEAD= [51.07  50.66  49.005 47.415 45.33 ] TAIL= [57.65 57.26 58.49 58.39 58.31]
   DAI.DE       Date
0  51.070 2011-07-28
1  50.660 2011-07-29
2  49.005 2011-08-01
3  47.415 2011-08-02
4  45.330 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1298 entries, 0 to 1297
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   DAI.DE  1298 non-null   float64       
 1   Date    1298 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['DAI.DE'], 'Transformations': [('DAI.DE', 'None', '_', 'T+S+R'), ('DAI.DE', 'None', 'Diff_', 'T+S+R'), ('DAI.DE', 'None', 'RelDiff_', 'T+S+R'), ('DAI.DE', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DAI.DE', 'Transformation': '_DAI.DE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.343, ('TRAINING', {'Signal': 'DAI.DE', 'Transformation': '_DAI.DE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DAI.DE', 'Transformation': 'Diff_DAI.DE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.87, ('TRAINING', {'Signal': 'DAI.DE', 'Transformation': 'Diff_DAI.DE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DAI.DE', 'Transformation': 'RelDiff_DAI.DE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.269, ('TRAINING', {'Signal': 'DAI.DE', 'Transformation': 'RelDiff_DAI.DE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DAI.DE', 'Transformation': 'CumSum_DAI.DE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.884, ('TRAINING', {'Signal': 'DAI.DE', 'Transformation': 'CumSum_DAI.DE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.368, ('SIGNAL_TRAINING', {'Signals': ['DAI.DE'], 'Transformations': [('DAI.DE', 'None', '_', 'T+S+R'), ('DAI.DE', 'None', 'Diff_', 'T+S+R'), ('DAI.DE', 'None', 'RelDiff_', 'T+S+R'), ('DAI.DE', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['DAI.DE'], 'Transformations': [('DAI.DE', [('DAI.DE', 'None', 'CumSum_', 'T+S+R'), ('DAI.DE', 'None', 'Diff_', 'T+S+R'), ('DAI.DE', 'None', 'RelDiff_', 'T+S+R'), ('DAI.DE', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'DAI.DE', 'Transformations': [('DAI.DE', 'None', 'CumSum_', 'T+S+R'), ('DAI.DE', 'None', 'Diff_', 'T+S+R'), ('DAI.DE', 'None', 'RelDiff_', 'T+S+R'), ('DAI.DE', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'DAI.DE', 'Transformations': [('DAI.DE', 'None', 'CumSum_', 'T+S+R'), ('DAI.DE', 'None', 'Diff_', 'T+S+R'), ('DAI.DE', 'None', 'RelDiff_', 'T+S+R'), ('DAI.DE', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DAI.DE', 'Model': '_DAI.DE_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DAI.DE', 'Model': '_DAI.DE_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DAI.DE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.188, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DAI.DE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FINALIZE_TRAINING', {'Signals': ['DAI.DE'], 'Transformations': [('DAI.DE', [('DAI.DE', 'None', 'CumSum_', 'T+S+R'), ('DAI.DE', 'None', 'Diff_', 'T+S+R'), ('DAI.DE', 'None', 'RelDiff_', 'T+S+R'), ('DAI.DE', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-10T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='DAI.DE' Length=1298  Min=29.155 Max=95.79  Mean=57.26057395993837 StdDev=16.12029363354114
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_DAI.DE' Min=0.0 Max=1.0  Mean=0.42178395677854574 StdDev=0.2419193161783015
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_DAI.DE_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_DAI.DE_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_DAI.DE_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_DAI.DE_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0138 MAPE_Forecast=0.0158 MAPE_Test=0.0181
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0138 SMAPE_Forecast=0.0157 SMAPE_Test=0.0184
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9983 MASE_Test=1.1596
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=4.809868609751122 CRPS_Forecast=2.4014513268226207 CRPS_Test=0.9478571428571431
INFO:pyaf.std:MODEL_L1 L1_Fit=0.7090794573643411 L1_Forecast=1.076370656370656 L1_Test=1.0242857142857145
INFO:pyaf.std:MODEL_L2 L2_Fit=0.9594558979729286 L2_Forecast=1.4396277940246167 L2_Test=1.3216926377079614
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.36243951481472736 LnQ_Forecast=0.11485232934468748 LnQ_Test=0.00397517626639282
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.5300000000000011 MedAE_Forecast=0.7900000000000063 MedAE_Test=1.0700000000000003
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.3288812185788249
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _DAI.DE_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ...   FitMAPE ForecastMAPE   TestMAPE
0    None         _DAI.DE             T+S+R  ...    0.0138       0.0158     0.0181
1    None         _DAI.DE             T+S+R  ...    0.0138       0.0158     0.0181
2    None   CumSum_DAI.DE             T+S+R  ...    0.0142       0.0158     0.0181
3    None     Diff_DAI.DE             T+S+R  ...    0.0138       0.0158     0.0181
4    None     Diff_DAI.DE             T+S+R  ...    0.0138       0.0158     0.0181
..    ...             ...               ...  ...       ...          ...        ...
219  None  RelDiff_DAI.DE             T+S+R  ...   42.8836     456.3459  1896.4893
220  None  RelDiff_DAI.DE             T+S+R  ...   49.7081    1123.4067  2779.1321
221  None  RelDiff_DAI.DE             T+S+R  ...   49.7081    1123.4067  2779.1321
222  None  RelDiff_DAI.DE             T+S+R  ...  162.8883    1167.3636  4202.2292
223  None  RelDiff_DAI.DE             T+S+R  ...  162.8883    1167.3636  4202.2292

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _DAI.DE             T+S+R  ...  0.0138       0.0158   0.0181
1  None        _DAI.DE             T+S+R  ...  0.0138       0.0158   0.0181
2  None  CumSum_DAI.DE             T+S+R  ...  0.0142       0.0158   0.0181
3  None    Diff_DAI.DE             T+S+R  ...  0.0138       0.0158   0.0181
4  None    Diff_DAI.DE             T+S+R  ...  0.0138       0.0158   0.0181

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['DAI.DE'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.155, ('FORECASTING', {'Signals': ['DAI.DE'], 'Horizon': 7}))
7 0    57.66
1    58.68
2    59.45
3    59.51
4    59.95
5    60.76
6    61.92
Name: DAI.DE, dtype: float64
7 0    58.31
1    58.31
2    58.31
3    58.31
4    58.31
5    58.31
6    58.31
Name: DAI.DE_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_DAI.DE DAI.DE [57.66, 58.68, 59.45, 59.51, 59.95, 60.76, 61.92]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_DAI.DE DAI.DE [58.31, 58.31, 58.31, 58.31, 58.31, 58.31, 58.31]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_DAI.DE DAI.DE 1298 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_DAI.DE DAI.DE 12.829964637756348
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_DAI.DE DAI.DE Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_DAI.DE DAI.DE 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_DAI.DE DAI.DE 0.0261 0.0266 2.2254
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_DAI.DE DAI.DE 1.5799999999999994 1.890699039282258 -1.1921386449683258
BENCHMARK_SUCCESS 'YAHOO_STOCKS_gdaxi_DAI.DE_7'
