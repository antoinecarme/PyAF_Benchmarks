BENCH_DATA YAHOO_STOCKS_gdaxi
TIME :  Date N= 1298 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  BMW.DE N= 1298 H= 7 HEAD= [70.25 69.82 67.71 65.97 65.55] TAIL= [73.31 72.98 74.74 74.66 74.91]
   BMW.DE       Date
0   70.25 2011-07-28
1   69.82 2011-07-29
2   67.71 2011-08-01
3   65.97 2011-08-02
4   65.55 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1298 entries, 0 to 1297
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   BMW.DE  1298 non-null   float64       
 1   Date    1298 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['BMW.DE'], 'Transformations': [('BMW.DE', 'None', '_', 'T+S+R'), ('BMW.DE', 'None', 'Diff_', 'T+S+R'), ('BMW.DE', 'None', 'RelDiff_', 'T+S+R'), ('BMW.DE', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'BMW.DE', 'Transformation': '_BMW.DE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.386, ('TRAINING', {'Signal': 'BMW.DE', 'Transformation': '_BMW.DE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'BMW.DE', 'Transformation': 'Diff_BMW.DE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.854, ('TRAINING', {'Signal': 'BMW.DE', 'Transformation': 'Diff_BMW.DE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'BMW.DE', 'Transformation': 'RelDiff_BMW.DE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.296, ('TRAINING', {'Signal': 'BMW.DE', 'Transformation': 'RelDiff_BMW.DE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'BMW.DE', 'Transformation': 'CumSum_BMW.DE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.924, ('TRAINING', {'Signal': 'BMW.DE', 'Transformation': 'CumSum_BMW.DE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.461, ('SIGNAL_TRAINING', {'Signals': ['BMW.DE'], 'Transformations': [('BMW.DE', 'None', '_', 'T+S+R'), ('BMW.DE', 'None', 'Diff_', 'T+S+R'), ('BMW.DE', 'None', 'RelDiff_', 'T+S+R'), ('BMW.DE', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['BMW.DE'], 'Transformations': [('BMW.DE', [('BMW.DE', 'None', 'CumSum_', 'T+S+R'), ('BMW.DE', 'None', 'Diff_', 'T+S+R'), ('BMW.DE', 'None', 'RelDiff_', 'T+S+R'), ('BMW.DE', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'BMW.DE', 'Transformations': [('BMW.DE', 'None', 'CumSum_', 'T+S+R'), ('BMW.DE', 'None', 'Diff_', 'T+S+R'), ('BMW.DE', 'None', 'RelDiff_', 'T+S+R'), ('BMW.DE', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'BMW.DE', 'Transformations': [('BMW.DE', 'None', 'CumSum_', 'T+S+R'), ('BMW.DE', 'None', 'Diff_', 'T+S+R'), ('BMW.DE', 'None', 'RelDiff_', 'T+S+R'), ('BMW.DE', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'BMW.DE', 'Model': '_BMW.DE_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'BMW.DE', 'Model': '_BMW.DE_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'BMW.DE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.186, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'BMW.DE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.221, ('FINALIZE_TRAINING', {'Signals': ['BMW.DE'], 'Transformations': [('BMW.DE', [('BMW.DE', 'None', 'CumSum_', 'T+S+R'), ('BMW.DE', 'None', 'Diff_', 'T+S+R'), ('BMW.DE', 'None', 'RelDiff_', 'T+S+R'), ('BMW.DE', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-10T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='BMW.DE' Length=1298  Min=45.04 Max=122.6  Mean=78.26658320493075 StdDev=15.364841041556232
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_BMW.DE' Min=0.0 Max=1.0  Mean=0.4283984425597042 StdDev=0.19810264365080257
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_BMW.DE_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_BMW.DE_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_BMW.DE_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_BMW.DE_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0132 MAPE_Forecast=0.0166 MAPE_Test=0.0202
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0132 SMAPE_Forecast=0.0166 SMAPE_Test=0.0206
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9968 MASE_Test=1.1911
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=4.847605834353324 CRPS_Forecast=2.6676160944810356 CRPS_Test=1.3542857142857139
INFO:pyaf.std:MODEL_L1 L1_Fit=0.9749709302325582 L1_Forecast=1.355675675675676 L1_Test=1.4471428571428564
INFO:pyaf.std:MODEL_L2 L2_Fit=1.3267982896998274 L2_Forecast=1.7503162427992693 L2_Test=1.8744103834844397
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.3468761517452963 LnQ_Forecast=0.12029433726983338 LnQ_Test=0.005012930826705922
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.7150000000000034 MedAE_Forecast=1.1199999999999903 MedAE_Test=1.6000000000000085
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.32503867973182055
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _BMW.DE_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split  Transformation DecompositionType  ...  FitMAPE ForecastMAPE  TestMAPE
0    None         _BMW.DE             T+S+R  ...   0.0132       0.0166    0.0202
1    None         _BMW.DE             T+S+R  ...   0.0132       0.0166    0.0202
2    None   CumSum_BMW.DE             T+S+R  ...   0.0135       0.0166    0.0202
3    None     Diff_BMW.DE             T+S+R  ...   0.0132       0.0166    0.0202
4    None     Diff_BMW.DE             T+S+R  ...   0.0132       0.0166    0.0202
..    ...             ...               ...  ...      ...          ...       ...
219  None  RelDiff_BMW.DE             T+S+R  ...   3.8961     134.8914  379.1735
220  None  RelDiff_BMW.DE             T+S+R  ...  35.9444     142.8552  366.0640
221  None  RelDiff_BMW.DE             T+S+R  ...  35.9444     142.8552  366.0640
222  None  RelDiff_BMW.DE             T+S+R  ...  11.1437     157.9120  323.1158
223  None  RelDiff_BMW.DE             T+S+R  ...  11.1437     157.9120  323.1158

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _BMW.DE             T+S+R  ...  0.0132       0.0166   0.0202
1  None        _BMW.DE             T+S+R  ...  0.0132       0.0166   0.0202
2  None  CumSum_BMW.DE             T+S+R  ...  0.0135       0.0166   0.0202
3  None    Diff_BMW.DE             T+S+R  ...  0.0132       0.0166   0.0202
4  None    Diff_BMW.DE             T+S+R  ...  0.0132       0.0166   0.0202

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['BMW.DE'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.154, ('FORECASTING', {'Signals': ['BMW.DE'], 'Horizon': 7}))
7 0    73.58
1    75.39
2    75.98
3    75.50
4    76.14
5    76.78
6    78.36
Name: BMW.DE, dtype: float64
7 0    74.91
1    74.91
2    74.91
3    74.91
4    74.91
5    74.91
6    74.91
Name: BMW.DE_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_BMW.DE BMW.DE [73.58, 75.39, 75.98, 75.5, 76.14, 76.78, 78.36]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_BMW.DE BMW.DE [74.91, 74.91, 74.91, 74.91, 74.91, 74.91, 74.91]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_BMW.DE BMW.DE 1298 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_BMW.DE BMW.DE 12.93412470817566
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_BMW.DE BMW.DE Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_BMW.DE BMW.DE 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_BMW.DE BMW.DE 0.0187 0.0189 1.4963
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_BMW.DE BMW.DE 1.4314285714285748 1.707320373316873 -0.6109633599609385
BENCHMARK_SUCCESS 'YAHOO_STOCKS_gdaxi_BMW.DE_7'
