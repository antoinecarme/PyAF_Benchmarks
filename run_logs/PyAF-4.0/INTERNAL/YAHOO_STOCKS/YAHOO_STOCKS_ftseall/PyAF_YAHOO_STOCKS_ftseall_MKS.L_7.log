BENCH_DATA YAHOO_STOCKS_ftseall
TIME :  Date N= 1036 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2015-07-13T00:00:00.000000000' '2015-07-14T00:00:00.000000000'
 '2015-07-15T00:00:00.000000000' '2015-07-16T00:00:00.000000000'
 '2015-07-17T00:00:00.000000000']
SIGNAL :  MKS.L N= 1036 H= 7 HEAD= [348.5 346.2 339.1 335.6 339.2] TAIL= [547.5 544.5 547.  546.  539.5]
   MKS.L       Date
0  348.5 2011-07-28
1  346.2 2011-07-29
2  339.1 2011-08-01
3  335.6 2011-08-02
4  339.2 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1036 entries, 0 to 1035
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   MKS.L   1036 non-null   float64       
 1   Date    1036 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 24.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['MKS.L'], 'Transformations': [('MKS.L', 'None', '_', 'T+S+R'), ('MKS.L', 'None', 'Diff_', 'T+S+R'), ('MKS.L', 'None', 'RelDiff_', 'T+S+R'), ('MKS.L', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MKS.L', 'Transformation': '_MKS.L'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.236, ('TRAINING', {'Signal': 'MKS.L', 'Transformation': '_MKS.L'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MKS.L', 'Transformation': 'Diff_MKS.L'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.678, ('TRAINING', {'Signal': 'MKS.L', 'Transformation': 'Diff_MKS.L'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MKS.L', 'Transformation': 'RelDiff_MKS.L'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.045, ('TRAINING', {'Signal': 'MKS.L', 'Transformation': 'RelDiff_MKS.L'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MKS.L', 'Transformation': 'CumSum_MKS.L'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.65, ('TRAINING', {'Signal': 'MKS.L', 'Transformation': 'CumSum_MKS.L'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.61, ('SIGNAL_TRAINING', {'Signals': ['MKS.L'], 'Transformations': [('MKS.L', 'None', '_', 'T+S+R'), ('MKS.L', 'None', 'Diff_', 'T+S+R'), ('MKS.L', 'None', 'RelDiff_', 'T+S+R'), ('MKS.L', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['MKS.L'], 'Transformations': [('MKS.L', [('MKS.L', 'None', 'CumSum_', 'T+S+R'), ('MKS.L', 'None', 'Diff_', 'T+S+R'), ('MKS.L', 'None', 'RelDiff_', 'T+S+R'), ('MKS.L', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'MKS.L', 'Transformations': [('MKS.L', 'None', 'CumSum_', 'T+S+R'), ('MKS.L', 'None', 'Diff_', 'T+S+R'), ('MKS.L', 'None', 'RelDiff_', 'T+S+R'), ('MKS.L', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'MKS.L', 'Transformations': [('MKS.L', 'None', 'CumSum_', 'T+S+R'), ('MKS.L', 'None', 'Diff_', 'T+S+R'), ('MKS.L', 'None', 'RelDiff_', 'T+S+R'), ('MKS.L', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MKS.L', 'Model': '_MKS.L_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MKS.L', 'Model': '_MKS.L_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MKS.L'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.18, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MKS.L'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.215, ('FINALIZE_TRAINING', {'Signals': ['MKS.L'], 'Transformations': [('MKS.L', [('MKS.L', 'None', 'CumSum_', 'T+S+R'), ('MKS.L', 'None', 'Diff_', 'T+S+R'), ('MKS.L', 'None', 'RelDiff_', 'T+S+R'), ('MKS.L', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2014-09-23T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='MKS.L' Length=1036  Min=301.8 Max=596.5  Mean=421.347393822394 StdDev=71.289776155684
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_MKS.L' Min=0.0 Max=1.0  Mean=0.4056579362823003 StdDev=0.2419062645255649
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_MKS.L_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_MKS.L_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_MKS.L_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_MKS.L_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0109 MAPE_Forecast=0.0103 MAPE_Test=0.0108
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0109 SMAPE_Forecast=0.0103 SMAPE_Test=0.0109
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9988 MASE_Forecast=1.0023 MASE_Test=0.8786
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=18.000278154377437 CRPS_Forecast=14.914404789644014 CRPS_Test=4.321428571428571
INFO:pyaf.std:MODEL_L1 L1_Fit=4.319198055893074 L1_Forecast=5.062621359223299 L1_Test=5.857142857142857
INFO:pyaf.std:MODEL_L2 L2_Fit=5.724058710097793 L2_Forecast=7.382750165080759 L2_Test=8.071112509614592
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.17084380637725155 LnQ_Forecast=0.04903584039483756 LnQ_Test=0.001601559126710608
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=3.5 MedAE_Forecast=3.450000000000017 MedAE_Test=3.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.15846623685103492
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _MKS.L_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ... ForecastMAPE      TestMAPE
0    None         _MKS.L  ...       0.0103  1.080000e-02
1    None         _MKS.L  ...       0.0103  1.080000e-02
2    None   CumSum_MKS.L  ...       0.0103  1.080000e-02
3    None     Diff_MKS.L  ...       0.0103  1.080000e-02
4    None     Diff_MKS.L  ...       0.0103  1.080000e-02
..    ...            ...  ...          ...           ...
219  None  RelDiff_MKS.L  ...   48603.1162  5.314735e+05
220  None  RelDiff_MKS.L  ...  738396.0804  5.385888e+06
221  None  RelDiff_MKS.L  ...  738396.0804  5.385888e+06
222  None  RelDiff_MKS.L  ...  980939.1848  3.737088e+06
223  None  RelDiff_MKS.L  ...  980939.1848  3.737088e+06

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None         _MKS.L             T+S+R  ...  0.0109       0.0103   0.0108
1  None         _MKS.L             T+S+R  ...  0.0109       0.0103   0.0108
2  None   CumSum_MKS.L             T+S+R  ...  0.0110       0.0103   0.0108
3  None     Diff_MKS.L             T+S+R  ...  0.0109       0.0103   0.0108
4  None     Diff_MKS.L             T+S+R  ...  0.0109       0.0103   0.0108

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['MKS.L'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.148, ('FORECASTING', {'Signals': ['MKS.L'], 'Horizon': 7}))
7 0    534.0
1    531.5
2    535.0
3    527.0
4    525.0
5    518.5
6    523.0
Name: MKS.L, dtype: float64
7 0    539.5
1    539.5
2    539.5
3    539.5
4    539.5
5    539.5
6    539.5
Name: MKS.L_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_MKS.L MKS.L [534.0, 531.5, 535.0, 527.0, 525.0, 518.5, 523.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_MKS.L MKS.L [539.5, 539.5, 539.5, 539.5, 539.5, 539.5, 539.5]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_MKS.L MKS.L 1036 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_MKS.L MKS.L 12.081881284713745
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_MKS.L MKS.L Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_MKS.L MKS.L 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_MKS.L MKS.L 0.0225 0.0221 2.619
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_MKS.L MKS.L 11.785714285714286 13.061666924904449 -4.381235918890398
BENCHMARK_SUCCESS 'YAHOO_STOCKS_ftseall_MKS.L_7'
