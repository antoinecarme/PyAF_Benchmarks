BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 596 H= 7 HEAD= ['2011-08-02T00:00:00.000000000' '2011-08-03T00:00:00.000000000'
 '2011-08-08T00:00:00.000000000' '2011-08-09T00:00:00.000000000'
 '2011-08-10T00:00:00.000000000'] TAIL= ['2014-01-24T00:00:00.000000000' '2014-01-27T00:00:00.000000000'
 '2014-01-28T00:00:00.000000000' '2014-01-29T00:00:00.000000000'
 '2014-01-30T00:00:00.000000000']
SIGNAL :  080960.KS N= 596 H= 7 HEAD= [4970. 4950. 4920. 4920. 4915.] TAIL= [5040. 5040. 5040. 5040. 5040.]
   080960.KS       Date
0     4970.0 2011-08-02
1     4950.0 2011-08-03
2     4920.0 2011-08-08
3     4920.0 2011-08-09
4     4915.0 2011-08-10
<class 'pandas.core.frame.DataFrame'>
Int64Index: 596 entries, 0 to 595
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   080960.KS  596 non-null    float64       
 1   Date       596 non-null    datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 14.0 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['080960.KS'], 'Transformations': [('080960.KS', 'None', '_', 'T+S+R'), ('080960.KS', 'None', 'Diff_', 'T+S+R'), ('080960.KS', 'None', 'RelDiff_', 'T+S+R'), ('080960.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080960.KS', 'Transformation': '_080960.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.924, ('TRAINING', {'Signal': '080960.KS', 'Transformation': '_080960.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080960.KS', 'Transformation': 'Diff_080960.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.301, ('TRAINING', {'Signal': '080960.KS', 'Transformation': 'Diff_080960.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080960.KS', 'Transformation': 'RelDiff_080960.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.431, ('TRAINING', {'Signal': '080960.KS', 'Transformation': 'RelDiff_080960.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080960.KS', 'Transformation': 'CumSum_080960.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.571, ('TRAINING', {'Signal': '080960.KS', 'Transformation': 'CumSum_080960.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 7.228, ('SIGNAL_TRAINING', {'Signals': ['080960.KS'], 'Transformations': [('080960.KS', 'None', '_', 'T+S+R'), ('080960.KS', 'None', 'Diff_', 'T+S+R'), ('080960.KS', 'None', 'RelDiff_', 'T+S+R'), ('080960.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['080960.KS'], 'Transformations': [('080960.KS', [('080960.KS', 'None', 'CumSum_', 'T+S+R'), ('080960.KS', 'None', 'Diff_', 'T+S+R'), ('080960.KS', 'None', 'RelDiff_', 'T+S+R'), ('080960.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '080960.KS', 'Transformations': [('080960.KS', 'None', 'CumSum_', 'T+S+R'), ('080960.KS', 'None', 'Diff_', 'T+S+R'), ('080960.KS', 'None', 'RelDiff_', 'T+S+R'), ('080960.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': '080960.KS', 'Transformations': [('080960.KS', 'None', 'CumSum_', 'T+S+R'), ('080960.KS', 'None', 'Diff_', 'T+S+R'), ('080960.KS', 'None', 'RelDiff_', 'T+S+R'), ('080960.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '080960.KS', 'Model': '_080960.KS_ConstantTrend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.026, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '080960.KS', 'Model': '_080960.KS_ConstantTrend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '080960.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.16, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '080960.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.194, ('FINALIZE_TRAINING', {'Signals': ['080960.KS'], 'Transformations': [('080960.KS', [('080960.KS', 'None', 'CumSum_', 'T+S+R'), ('080960.KS', 'None', 'Diff_', 'T+S+R'), ('080960.KS', 'None', 'RelDiff_', 'T+S+R'), ('080960.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-08-02T00:00:00.000000 TimeMax=2013-08-06T00:00:00.000000 TimeDelta=<DateOffset: days=2> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='080960.KS' Length=596  Min=4660.0 Max=5110.0  Mean=4958.758389261745 StdDev=78.31254290296681
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_080960.KS' Min=0.0 Max=1.0  Mean=0.6639075316927688 StdDev=0.17402787311770374
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_080960.KS_ConstantTrend_residue_zeroCycle[0.0]_residue_NoAR' [ConstantTrend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_080960.KS_ConstantTrend' [ConstantTrend]
INFO:pyaf.std:CYCLE_DETAIL '_080960.KS_ConstantTrend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_080960.KS_ConstantTrend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0132 MAPE_Forecast=0.007 MAPE_Test=0.0159
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0131 SMAPE_Forecast=0.007 SMAPE_Test=0.016
INFO:pyaf.std:MODEL_MASE MASE_Fit=7.7137 MASE_Forecast=3.7724 MASE_Test=799787685774.9362
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=11.193457369538297 CRPS_Forecast=6.925760792639953 CRPS_Test=39.989384288746805
INFO:pyaf.std:MODEL_L1 L1_Fit=64.66383581033226 L1_Forecast=34.49944222534137 L1_Test=79.97876857749361
INFO:pyaf.std:MODEL_L2 L2_Fit=85.14194202815956 L2_Forecast=40.86000069669649 L2_Test=79.97876857749361
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.14199340459281848 LnQ_Forecast=0.008017623457402135 LnQ_Test=0.0017911177338388966
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=45.02123142250639 MedAE_Forecast=30.02123142250639 MedAE_Test=79.97876857749361
INFO:pyaf.std:MODEL_COMPLEXITY 0.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:CONSTANT_TREND _080960.KS_ConstantTrend 0.6667138476055694
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _080960.KS_ConstantTrend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation  ...  ForecastMAPE      TestMAPE
0    None         _080960.KS  ...  1.900000e-03  0.000000e+00
1    None   CumSum_080960.KS  ...  1.900000e-03  0.000000e+00
2    None     Diff_080960.KS  ...  1.900000e-03  0.000000e+00
3    None         _080960.KS  ...  1.900000e-03  0.000000e+00
4    None         _080960.KS  ...  1.900000e-03  0.000000e+00
..    ...                ...  ...           ...           ...
131  None  RelDiff_080960.KS  ...  5.406776e+06  6.150794e+06
132  None  RelDiff_080960.KS  ...  5.483409e+06  6.150794e+06
133  None  RelDiff_080960.KS  ...  6.245822e+06  6.150794e+06
134  None  RelDiff_080960.KS  ...  6.261535e+06  6.150794e+06
135  None  RelDiff_080960.KS  ...  6.264414e+06  6.150794e+06

[136 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _080960.KS             T+S+R  ...  0.0017       0.0019      0.0
1  None  CumSum_080960.KS             T+S+R  ...  0.0018       0.0019      0.0
2  None    Diff_080960.KS             T+S+R  ...  0.0017       0.0019      0.0
3  None        _080960.KS             T+S+R  ...  0.0017       0.0019      0.0
4  None        _080960.KS             T+S+R  ...  0.0017       0.0019      0.0

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['080960.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.13, ('FORECASTING', {'Signals': ['080960.KS'], 'Horizon': 7}))
7 0    5040.0
1    5040.0
2    5040.0
3    5040.0
4    5040.0
5    5040.0
6    5040.0
Name: 080960.KS, dtype: float64
7 0    4960.021231
1    4960.021231
2    4960.021231
3    4960.021231
4    4960.021231
5    4960.021231
6    4960.021231
Name: 080960.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_080960.KS 080960.KS [5040.0, 5040.0, 5040.0, 5040.0, 5040.0, 5040.0, 5040.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_080960.KS 080960.KS [4960.021231422506, 4960.021231422506, 4960.021231422506, 4960.021231422506, 4960.021231422506, 4960.021231422506, 4960.021231422506]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_080960.KS 080960.KS 596 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_080960.KS 080960.KS 7.662792444229126
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_080960.KS 080960.KS ConstantTrend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_080960.KS 080960.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_080960.KS 080960.KS 0.0159 0.016 799787685774.9362
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_080960.KS 080960.KS 79.97876857749361 79.97876857749361 -447762239622058.56
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_080960.KS_7'
