BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 1292 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  000150.KS N= 1292 H= 7 HEAD= [148000. 148000. 149000. 145000. 140000.] TAIL= [ 99700. 100000.  98800. 103000. 105000.]
   000150.KS       Date
0   148000.0 2011-07-28
1   148000.0 2011-07-29
2   149000.0 2011-08-01
3   145000.0 2011-08-02
4   140000.0 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1292 entries, 0 to 1291
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   000150.KS  1292 non-null   float64       
 1   Date       1292 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['000150.KS'], 'Transformations': [('000150.KS', 'None', '_', 'T+S+R'), ('000150.KS', 'None', 'Diff_', 'T+S+R'), ('000150.KS', 'None', 'RelDiff_', 'T+S+R'), ('000150.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '000150.KS', 'Transformation': '_000150.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.404, ('TRAINING', {'Signal': '000150.KS', 'Transformation': '_000150.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '000150.KS', 'Transformation': 'Diff_000150.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.489, ('TRAINING', {'Signal': '000150.KS', 'Transformation': 'Diff_000150.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '000150.KS', 'Transformation': 'RelDiff_000150.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.849, ('TRAINING', {'Signal': '000150.KS', 'Transformation': 'RelDiff_000150.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '000150.KS', 'Transformation': 'CumSum_000150.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.478, ('TRAINING', {'Signal': '000150.KS', 'Transformation': 'CumSum_000150.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 9.222, ('SIGNAL_TRAINING', {'Signals': ['000150.KS'], 'Transformations': [('000150.KS', 'None', '_', 'T+S+R'), ('000150.KS', 'None', 'Diff_', 'T+S+R'), ('000150.KS', 'None', 'RelDiff_', 'T+S+R'), ('000150.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['000150.KS'], 'Transformations': [('000150.KS', [('000150.KS', 'None', 'CumSum_', 'T+S+R'), ('000150.KS', 'None', 'Diff_', 'T+S+R'), ('000150.KS', 'None', 'RelDiff_', 'T+S+R'), ('000150.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '000150.KS', 'Transformations': [('000150.KS', 'None', 'CumSum_', 'T+S+R'), ('000150.KS', 'None', 'Diff_', 'T+S+R'), ('000150.KS', 'None', 'RelDiff_', 'T+S+R'), ('000150.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': '000150.KS', 'Transformations': [('000150.KS', 'None', 'CumSum_', 'T+S+R'), ('000150.KS', 'None', 'Diff_', 'T+S+R'), ('000150.KS', 'None', 'RelDiff_', 'T+S+R'), ('000150.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '000150.KS', 'Model': '_000150.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '000150.KS', 'Model': '_000150.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '000150.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.188, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '000150.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.223, ('FINALIZE_TRAINING', {'Signals': ['000150.KS'], 'Transformations': [('000150.KS', [('000150.KS', 'None', 'CumSum_', 'T+S+R'), ('000150.KS', 'None', 'Diff_', 'T+S+R'), ('000150.KS', 'None', 'RelDiff_', 'T+S+R'), ('000150.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-14T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='000150.KS' Length=1292  Min=70200.0 Max=171500.0  Mean=123306.81114551083 StdDev=18815.847432390834
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_000150.KS' Min=0.0 Max=1.0  Mean=0.5242528247335708 StdDev=0.1857438048607191
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_000150.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_000150.KS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_000150.KS_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_000150.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0139 MAPE_Forecast=0.0196 MAPE_Test=0.0194
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0139 SMAPE_Forecast=0.0196 SMAPE_Test=0.0197
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9971 MASE_Test=0.8698
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=3800.8181445832474 CRPS_Forecast=3396.184353398947 CRPS_Test=1257.142857142857
INFO:pyaf.std:MODEL_L1 L1_Fit=1801.556420233463 L1_Forecast=1885.9922178988327 L1_Test=1957.142857142857
INFO:pyaf.std:MODEL_L2 L2_Fit=2470.054111790893 L2_Forecast=2543.2370071835953 L2_Test=2475.8836806279896
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.37377090680750447 LnQ_Forecast=0.17713923321721992 LnQ_Test=0.00438455569879662
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=1500.0 MedAE_Forecast=1500.0 MedAE_Test=1700.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.7680157946692991
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _000150.KS_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _000150.KS             T+S+R  ...  0.0139       0.0196   0.0194
1    None   CumSum_000150.KS             T+S+R  ...  0.0144       0.0196   0.0194
2    None   CumSum_000150.KS             T+S+R  ...  0.0144       0.0196   0.0194
3    None     Diff_000150.KS             T+S+R  ...  0.0139       0.0196   0.0194
4    None         _000150.KS             T+S+R  ...  0.0139       0.0196   0.0194
..    ...                ...               ...  ...     ...          ...      ...
147  None  RelDiff_000150.KS             T+S+R  ...  0.1803       8.5103  24.3455
148  None  RelDiff_000150.KS             T+S+R  ...  0.1804       8.5140  24.3573
149  None  RelDiff_000150.KS             T+S+R  ...  0.1804       8.5140  24.3573
150  None  RelDiff_000150.KS             T+S+R  ...  0.1852       8.5986  24.9379
151  None  RelDiff_000150.KS             T+S+R  ...  0.1879       9.0395  27.3133

[152 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _000150.KS             T+S+R  ...  0.0139       0.0196   0.0194
1  None  CumSum_000150.KS             T+S+R  ...  0.0144       0.0196   0.0194
2  None  CumSum_000150.KS             T+S+R  ...  0.0144       0.0196   0.0194
3  None    Diff_000150.KS             T+S+R  ...  0.0139       0.0196   0.0194
4  None        _000150.KS             T+S+R  ...  0.0139       0.0196   0.0194

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['000150.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.17, ('FORECASTING', {'Signals': ['000150.KS'], 'Horizon': 7}))
7 0    104000.0
1    106500.0
2    106000.0
3    105000.0
4    106000.0
5    113000.0
6    113500.0
Name: 000150.KS, dtype: float64
7 0    105000.0
1    105000.0
2    105000.0
3    105000.0
4    105000.0
5    105000.0
6    105000.0
Name: 000150.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_000150.KS 000150.KS [104000.0, 106500.0, 106000.0, 105000.0, 106000.0, 113000.0, 113500.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_000150.KS 000150.KS [105000.0, 105000.0, 105000.0, 105000.0, 105000.0, 105000.0, 105000.0]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_000150.KS 000150.KS 1292 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_000150.KS 000150.KS 9.732500076293945
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_000150.KS 000150.KS Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_000150.KS 000150.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_000150.KS 000150.KS 0.0269 0.0277 1.44
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_000150.KS 000150.KS 3000.0 4496.029994816061 -0.5734710087370929
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_000150.KS_7'
