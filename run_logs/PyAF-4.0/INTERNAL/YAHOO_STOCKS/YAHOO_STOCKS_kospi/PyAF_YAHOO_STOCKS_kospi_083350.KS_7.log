BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 1269 H= 7 HEAD= ['2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000' '2011-08-04T00:00:00.000000000'
 '2011-08-05T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  083350.KS N= 1269 H= 7 HEAD= [4870. 4890. 4900. 4855. 4930.] TAIL= [4075. 4075. 4340. 4295. 4280.]
   083350.KS       Date
0     4870.0 2011-08-01
1     4890.0 2011-08-02
2     4900.0 2011-08-03
3     4855.0 2011-08-04
4     4930.0 2011-08-05
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1269 entries, 0 to 1268
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   083350.KS  1269 non-null   float64       
 1   Date       1269 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.7 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['083350.KS'], 'Transformations': [('083350.KS', 'None', '_', 'T+S+R'), ('083350.KS', 'None', 'Diff_', 'T+S+R'), ('083350.KS', 'None', 'RelDiff_', 'T+S+R'), ('083350.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083350.KS', 'Transformation': '_083350.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.51, ('TRAINING', {'Signal': '083350.KS', 'Transformation': '_083350.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083350.KS', 'Transformation': 'Diff_083350.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.813, ('TRAINING', {'Signal': '083350.KS', 'Transformation': 'Diff_083350.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083350.KS', 'Transformation': 'RelDiff_083350.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.661, ('TRAINING', {'Signal': '083350.KS', 'Transformation': 'RelDiff_083350.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083350.KS', 'Transformation': 'CumSum_083350.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.466, ('TRAINING', {'Signal': '083350.KS', 'Transformation': 'CumSum_083350.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 8.451, ('SIGNAL_TRAINING', {'Signals': ['083350.KS'], 'Transformations': [('083350.KS', 'None', '_', 'T+S+R'), ('083350.KS', 'None', 'Diff_', 'T+S+R'), ('083350.KS', 'None', 'RelDiff_', 'T+S+R'), ('083350.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['083350.KS'], 'Transformations': [('083350.KS', [('083350.KS', 'None', 'CumSum_', 'T+S+R'), ('083350.KS', 'None', 'Diff_', 'T+S+R'), ('083350.KS', 'None', 'RelDiff_', 'T+S+R'), ('083350.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '083350.KS', 'Transformations': [('083350.KS', 'None', 'CumSum_', 'T+S+R'), ('083350.KS', 'None', 'Diff_', 'T+S+R'), ('083350.KS', 'None', 'RelDiff_', 'T+S+R'), ('083350.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': '083350.KS', 'Transformations': [('083350.KS', 'None', 'CumSum_', 'T+S+R'), ('083350.KS', 'None', 'Diff_', 'T+S+R'), ('083350.KS', 'None', 'RelDiff_', 'T+S+R'), ('083350.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '083350.KS', 'Model': '_083350.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '083350.KS', 'Model': '_083350.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '083350.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.186, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '083350.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.221, ('FINALIZE_TRAINING', {'Signals': ['083350.KS'], 'Transformations': [('083350.KS', [('083350.KS', 'None', 'CumSum_', 'T+S+R'), ('083350.KS', 'None', 'Diff_', 'T+S+R'), ('083350.KS', 'None', 'RelDiff_', 'T+S+R'), ('083350.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-08-01T00:00:00.000000 TimeMax=2015-07-21T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='083350.KS' Length=1269  Min=2560.0 Max=5150.0  Mean=4578.01024428684 StdDev=474.2633962310287
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_083350.KS' Min=0.0 Max=1.0  Mean=0.779154534473687 StdDev=0.18311328039808036
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_083350.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_083350.KS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_083350.KS_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_083350.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0073 MAPE_Forecast=0.0172 MAPE_Test=0.0116
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0073 SMAPE_Forecast=0.0172 SMAPE_Test=0.0119
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.996 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=67.71331177299047 CRPS_Forecast=214.73243431760054 CRPS_Test=34.642857142857146
INFO:pyaf.std:MODEL_L1 L1_Fit=33.637264618434095 L1_Forecast=65.57312252964427 L1_Test=50.0
INFO:pyaf.std:MODEL_L2 L2_Fit=75.87644486944396 L2_Forecast=131.83562648642132 L2_Test=102.19029867290311
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.2799555869704668 LnQ_Forecast=0.30802833522882844 LnQ_Test=0.0041277364549356385
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0 MedAE_Forecast=15.0 MedAE_Test=15.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.8918918918918919
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _083350.KS_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _083350.KS             T+S+R  ...  0.0073       0.0172   0.0116
1    None   CumSum_083350.KS             T+S+R  ...  0.0078       0.0172   0.0116
2    None   CumSum_083350.KS             T+S+R  ...  0.0078       0.0172   0.0116
3    None     Diff_083350.KS             T+S+R  ...  0.0073       0.0172   0.0116
4    None         _083350.KS             T+S+R  ...  0.0073       0.0172   0.0116
..    ...                ...               ...  ...     ...          ...      ...
131  None  RelDiff_083350.KS             T+S+R  ...  0.2120       1.3839   1.5776
132  None  RelDiff_083350.KS             T+S+R  ...  0.2138       1.4219   1.6858
133  None  RelDiff_083350.KS             T+S+R  ...  0.1663       4.2049  20.6501
134  None  RelDiff_083350.KS             T+S+R  ...  0.1663       4.2049  20.6501
135  None  RelDiff_083350.KS             T+S+R  ...  0.1663       4.2049  20.6501

[136 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _083350.KS             T+S+R  ...  0.0073       0.0172   0.0116
1  None  CumSum_083350.KS             T+S+R  ...  0.0078       0.0172   0.0116
2  None  CumSum_083350.KS             T+S+R  ...  0.0078       0.0172   0.0116
3  None    Diff_083350.KS             T+S+R  ...  0.0073       0.0172   0.0116
4  None        _083350.KS             T+S+R  ...  0.0073       0.0172   0.0116

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['083350.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.154, ('FORECASTING', {'Signals': ['083350.KS'], 'Horizon': 7}))
7 0    4280.0
1    4395.0
2    4390.0
3    4350.0
4    4350.0
5    4300.0
6    4295.0
Name: 083350.KS, dtype: float64
7 0    4280.0
1    4280.0
2    4280.0
3    4280.0
4    4280.0
5    4280.0
6    4280.0
Name: 083350.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_083350.KS 083350.KS [4280.0, 4395.0, 4390.0, 4350.0, 4350.0, 4300.0, 4295.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_083350.KS 083350.KS [4280.0, 4280.0, 4280.0, 4280.0, 4280.0, 4280.0, 4280.0]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_083350.KS 083350.KS 1269 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_083350.KS 083350.KS 8.924793004989624
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_083350.KS 083350.KS Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_083350.KS 083350.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_083350.KS 083350.KS 0.0131 0.0132 1.5947
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_083350.KS 083350.KS 57.142857142857146 71.46427679017579 -1.7728531855955465
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_083350.KS_7'
