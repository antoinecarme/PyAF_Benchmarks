BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 476 H= 7 HEAD= ['2011-08-02T00:00:00.000000000' '2011-08-03T00:00:00.000000000'
 '2011-08-08T00:00:00.000000000' '2011-08-09T00:00:00.000000000'
 '2011-08-10T00:00:00.000000000'] TAIL= ['2013-07-31T00:00:00.000000000' '2013-08-01T00:00:00.000000000'
 '2013-08-02T00:00:00.000000000' '2013-08-05T00:00:00.000000000'
 '2013-08-06T00:00:00.000000000']
SIGNAL :  080030.KS N= 476 H= 7 HEAD= [4955. 5040. 5000. 4955. 4950.] TAIL= [5020. 5020. 5020. 5020. 5020.]
   080030.KS       Date
0     4955.0 2011-08-02
1     5040.0 2011-08-03
2     5000.0 2011-08-08
3     4955.0 2011-08-09
4     4950.0 2011-08-10
<class 'pandas.core.frame.DataFrame'>
Int64Index: 476 entries, 0 to 475
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   080030.KS  476 non-null    float64       
 1   Date       476 non-null    datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 11.2 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['080030.KS'], 'Transformations': [('080030.KS', 'None', '_', 'T+S+R'), ('080030.KS', 'None', 'Diff_', 'T+S+R'), ('080030.KS', 'None', 'RelDiff_', 'T+S+R'), ('080030.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080030.KS', 'Transformation': '_080030.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.94, ('TRAINING', {'Signal': '080030.KS', 'Transformation': '_080030.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080030.KS', 'Transformation': 'Diff_080030.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.509, ('TRAINING', {'Signal': '080030.KS', 'Transformation': 'Diff_080030.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080030.KS', 'Transformation': 'RelDiff_080030.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.006, ('TRAINING', {'Signal': '080030.KS', 'Transformation': 'RelDiff_080030.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080030.KS', 'Transformation': 'CumSum_080030.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.999, ('TRAINING', {'Signal': '080030.KS', 'Transformation': 'CumSum_080030.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 7.456, ('SIGNAL_TRAINING', {'Signals': ['080030.KS'], 'Transformations': [('080030.KS', 'None', '_', 'T+S+R'), ('080030.KS', 'None', 'Diff_', 'T+S+R'), ('080030.KS', 'None', 'RelDiff_', 'T+S+R'), ('080030.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['080030.KS'], 'Transformations': [('080030.KS', [('080030.KS', 'None', 'CumSum_', 'T+S+R'), ('080030.KS', 'None', 'Diff_', 'T+S+R'), ('080030.KS', 'None', 'RelDiff_', 'T+S+R'), ('080030.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '080030.KS', 'Transformations': [('080030.KS', 'None', 'CumSum_', 'T+S+R'), ('080030.KS', 'None', 'Diff_', 'T+S+R'), ('080030.KS', 'None', 'RelDiff_', 'T+S+R'), ('080030.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': '080030.KS', 'Transformations': [('080030.KS', 'None', 'CumSum_', 'T+S+R'), ('080030.KS', 'None', 'Diff_', 'T+S+R'), ('080030.KS', 'None', 'RelDiff_', 'T+S+R'), ('080030.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '080030.KS', 'Model': '_080030.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.024, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '080030.KS', 'Model': '_080030.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '080030.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.162, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '080030.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.194, ('FINALIZE_TRAINING', {'Signals': ['080030.KS'], 'Transformations': [('080030.KS', [('080030.KS', 'None', 'CumSum_', 'T+S+R'), ('080030.KS', 'None', 'Diff_', 'T+S+R'), ('080030.KS', 'None', 'RelDiff_', 'T+S+R'), ('080030.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-08-02T00:00:00.000000 TimeMax=2013-03-13T00:00:00.000000 TimeDelta=<DateOffset: days=2> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='080030.KS' Length=476  Min=4700.0 Max=5560.0  Mean=4991.41806722689 StdDev=87.57251262635421
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_080030.KS' Min=0.0 Max=1.0  Mean=0.3388582177056878 StdDev=0.10182850305390016
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_080030.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_080030.KS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_080030.KS_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_080030.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0022 MAPE_Forecast=0.004 MAPE_Test=0.0003
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0022 SMAPE_Forecast=0.004 SMAPE_Test=0.0003
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9973 MASE_Forecast=1.0058 MASE_Test=14285714285.7143
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=9.933122807017543 CRPS_Forecast=21.45693144208038 CRPS_Test=0.7142857142857143
INFO:pyaf.std:MODEL_L1 L1_Fit=11.266666666666667 L1_Forecast=19.574468085106382 L1_Test=1.4285714285714286
INFO:pyaf.std:MODEL_L2 L2_Fit=48.321837713398274 L2_Forecast=34.73302432445819 L2_Test=3.779644730092272
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.032143262199696765 LnQ_Forecast=0.004890280545668048 LnQ_Test=3.976110204524677e-06
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0 MedAE_Forecast=10.0 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.29651162790697677
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _080030.KS_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _080030.KS             T+S+R  ...  0.0022       0.0040   0.0003
1    None   CumSum_080030.KS             T+S+R  ...  0.0023       0.0040   0.0003
2    None   CumSum_080030.KS             T+S+R  ...  0.0023       0.0040   0.0003
3    None     Diff_080030.KS             T+S+R  ...  0.0022       0.0040   0.0003
4    None         _080030.KS             T+S+R  ...  0.0022       0.0040   0.0003
..    ...                ...               ...  ...     ...          ...      ...
139  None  RelDiff_080030.KS             T+S+R  ...  0.1073       0.5218   0.6343
140  None   CumSum_080030.KS             T+S+R  ...  0.6138       0.5980   1.1025
141  None  RelDiff_080030.KS             T+S+R  ...  0.2125       8.6897   0.0124
142  None  RelDiff_080030.KS             T+S+R  ...  0.2125       8.6897   0.0124
143  None  RelDiff_080030.KS             T+S+R  ...  0.2125       8.6897   0.0124

[144 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _080030.KS             T+S+R  ...  0.0022        0.004   0.0003
1  None  CumSum_080030.KS             T+S+R  ...  0.0023        0.004   0.0003
2  None  CumSum_080030.KS             T+S+R  ...  0.0023        0.004   0.0003
3  None    Diff_080030.KS             T+S+R  ...  0.0022        0.004   0.0003
4  None        _080030.KS             T+S+R  ...  0.0022        0.004   0.0003

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['080030.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.126, ('FORECASTING', {'Signals': ['080030.KS'], 'Horizon': 7}))
7 0    5020.0
1    5020.0
2    5020.0
3    5020.0
4    5020.0
5    5020.0
6    5020.0
Name: 080030.KS, dtype: float64
7 0    5020.0
1    5020.0
2    5020.0
3    5020.0
4    5020.0
5    5020.0
6    5020.0
Name: 080030.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_080030.KS 080030.KS [5020.0, 5020.0, 5020.0, 5020.0, 5020.0, 5020.0, 5020.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_080030.KS 080030.KS [5020.0, 5020.0, 5020.0, 5020.0, 5020.0, 5020.0, 5020.0]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_080030.KS 080030.KS 476 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_080030.KS 080030.KS 7.873016834259033
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_080030.KS 080030.KS Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_080030.KS 080030.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_080030.KS 080030.KS 0.0 0.0 0.0
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_080030.KS 080030.KS 0.0 0.0 1.0
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_080030.KS_7'
