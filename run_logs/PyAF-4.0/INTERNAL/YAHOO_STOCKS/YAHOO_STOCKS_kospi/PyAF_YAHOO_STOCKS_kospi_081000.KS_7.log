BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 1293 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  081000.KS N= 1293 H= 7 HEAD= [14350. 14100. 15200. 14600. 14200.] TAIL= [7820. 7820. 7820. 7780. 7820.]
   081000.KS       Date
0    14350.0 2011-07-28
1    14100.0 2011-07-29
2    15200.0 2011-08-01
3    14600.0 2011-08-02
4    14200.0 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1293 entries, 0 to 1292
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   081000.KS  1293 non-null   float64       
 1   Date       1293 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['081000.KS'], 'Transformations': [('081000.KS', 'None', '_', 'T+S+R'), ('081000.KS', 'None', 'Diff_', 'T+S+R'), ('081000.KS', 'None', 'RelDiff_', 'T+S+R'), ('081000.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '081000.KS', 'Transformation': '_081000.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.33, ('TRAINING', {'Signal': '081000.KS', 'Transformation': '_081000.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '081000.KS', 'Transformation': 'Diff_081000.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.459, ('TRAINING', {'Signal': '081000.KS', 'Transformation': 'Diff_081000.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '081000.KS', 'Transformation': 'RelDiff_081000.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.199, ('TRAINING', {'Signal': '081000.KS', 'Transformation': 'RelDiff_081000.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '081000.KS', 'Transformation': 'CumSum_081000.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.128, ('TRAINING', {'Signal': '081000.KS', 'Transformation': 'CumSum_081000.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.118, ('SIGNAL_TRAINING', {'Signals': ['081000.KS'], 'Transformations': [('081000.KS', 'None', '_', 'T+S+R'), ('081000.KS', 'None', 'Diff_', 'T+S+R'), ('081000.KS', 'None', 'RelDiff_', 'T+S+R'), ('081000.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['081000.KS'], 'Transformations': [('081000.KS', [('081000.KS', 'None', 'CumSum_', 'T+S+R'), ('081000.KS', 'None', 'Diff_', 'T+S+R'), ('081000.KS', 'None', 'RelDiff_', 'T+S+R'), ('081000.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '081000.KS', 'Transformations': [('081000.KS', 'None', 'CumSum_', 'T+S+R'), ('081000.KS', 'None', 'Diff_', 'T+S+R'), ('081000.KS', 'None', 'RelDiff_', 'T+S+R'), ('081000.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': '081000.KS', 'Transformations': [('081000.KS', 'None', 'CumSum_', 'T+S+R'), ('081000.KS', 'None', 'Diff_', 'T+S+R'), ('081000.KS', 'None', 'RelDiff_', 'T+S+R'), ('081000.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '081000.KS', 'Model': '_081000.KS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '081000.KS', 'Model': '_081000.KS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '081000.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.184, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '081000.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.219, ('FINALIZE_TRAINING', {'Signals': ['081000.KS'], 'Transformations': [('081000.KS', [('081000.KS', 'None', 'CumSum_', 'T+S+R'), ('081000.KS', 'None', 'Diff_', 'T+S+R'), ('081000.KS', 'None', 'RelDiff_', 'T+S+R'), ('081000.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-14T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='081000.KS' Length=1293  Min=5500.0 Max=15200.0  Mean=7994.215003866976 StdDev=1445.8932237228032
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_081000.KS' Min=0.0 Max=1.0  Mean=0.2571355674089673 StdDev=0.14906115708482504
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_081000.KS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_081000.KS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_081000.KS_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_081000.KS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0165 MAPE_Forecast=0.022 MAPE_Test=0.0051
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0165 SMAPE_Forecast=0.0222 SMAPE_Test=0.0051
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9967 MASE_Test=1.6
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=412.67711959860736 CRPS_Forecast=263.4647970816234 CRPS_Test=13.571428571428571
INFO:pyaf.std:MODEL_L1 L1_Fit=138.04474708171207 L1_Forecast=193.48837209302326 L1_Test=40.0
INFO:pyaf.std:MODEL_L2 L2_Fit=232.0461764726241 L2_Forecast=321.4658770033289 L2_Test=57.32115042211108
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.6368715627335564 LnQ_Forecast=0.3422526091771504 LnQ_Test=0.0003788467332381021
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=90.0 MedAE_Forecast=130.0 MedAE_Test=40.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.9123711340206185
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _081000.KS_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation  ... ForecastMAPE    TestMAPE
0    None         _081000.KS  ...       0.0219      0.0051
1    None         _081000.KS  ...       0.0220      0.0051
2    None         _081000.KS  ...       0.0220      0.0051
3    None   CumSum_081000.KS  ...       0.0220      0.0051
4    None     Diff_081000.KS  ...       0.0220      0.0051
..    ...                ...  ...          ...         ...
195  None  RelDiff_081000.KS  ...    1638.4160   7468.3694
196  None  RelDiff_081000.KS  ...    1668.1720   7632.2660
197  None  RelDiff_081000.KS  ...    1668.1720   7632.2660
198  None  RelDiff_081000.KS  ...    6688.1195  33289.1620
199  None  RelDiff_081000.KS  ...    6688.1195  33289.1620

[200 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _081000.KS             T+S+R  ...  0.0164       0.0219   0.0051
1  None        _081000.KS             T+S+R  ...  0.0165       0.0220   0.0051
2  None        _081000.KS             T+S+R  ...  0.0165       0.0220   0.0051
3  None  CumSum_081000.KS             T+S+R  ...  0.0171       0.0220   0.0051
4  None    Diff_081000.KS             T+S+R  ...  0.0165       0.0220   0.0051

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['081000.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.155, ('FORECASTING', {'Signals': ['081000.KS'], 'Horizon': 7}))
7 0    7860.0
1    7990.0
2    8000.0
3    7910.0
4    7890.0
5    7840.0
6    7780.0
Name: 081000.KS, dtype: float64
7 0    7820.0
1    7820.0
2    7820.0
3    7820.0
4    7820.0
5    7820.0
6    7820.0
Name: 081000.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_081000.KS 081000.KS [7860.0, 7990.0, 8000.0, 7910.0, 7890.0, 7840.0, 7780.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_081000.KS 081000.KS [7820.0, 7820.0, 7820.0, 7820.0, 7820.0, 7820.0, 7820.0]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_081000.KS 081000.KS 1293 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_081000.KS 081000.KS 11.587564706802368
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_081000.KS 081000.KS Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_081000.KS 081000.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_081000.KS 081000.KS 0.011 0.0111 1.4524
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_081000.KS 081000.KS 87.14285714285714 105.49204438521149 -1.0624054462934889
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_081000.KS_7'
