BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 687 H= 7 HEAD= ['2011-08-03T00:00:00.000000000' '2011-08-04T00:00:00.000000000'
 '2011-08-08T00:00:00.000000000' '2011-08-10T00:00:00.000000000'
 '2011-08-12T00:00:00.000000000'] TAIL= ['2014-06-02T00:00:00.000000000' '2014-06-03T00:00:00.000000000'
 '2014-06-04T00:00:00.000000000' '2014-06-05T00:00:00.000000000'
 '2014-06-06T00:00:00.000000000']
SIGNAL :  080970.KS N= 687 H= 7 HEAD= [4950. 4990. 4920. 4915. 4950.] TAIL= [5040. 5040. 5040. 5040. 5040.]
   080970.KS       Date
0     4950.0 2011-08-03
1     4990.0 2011-08-04
2     4920.0 2011-08-08
3     4915.0 2011-08-10
4     4950.0 2011-08-12
<class 'pandas.core.frame.DataFrame'>
Int64Index: 687 entries, 0 to 686
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   080970.KS  687 non-null    float64       
 1   Date       687 non-null    datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 16.1 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['080970.KS'], 'Transformations': [('080970.KS', 'None', '_', 'T+S+R'), ('080970.KS', 'None', 'Diff_', 'T+S+R'), ('080970.KS', 'None', 'RelDiff_', 'T+S+R'), ('080970.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080970.KS', 'Transformation': '_080970.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.651, ('TRAINING', {'Signal': '080970.KS', 'Transformation': '_080970.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080970.KS', 'Transformation': 'Diff_080970.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.314, ('TRAINING', {'Signal': '080970.KS', 'Transformation': 'Diff_080970.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080970.KS', 'Transformation': 'RelDiff_080970.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.505, ('TRAINING', {'Signal': '080970.KS', 'Transformation': 'RelDiff_080970.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '080970.KS', 'Transformation': 'CumSum_080970.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.95, ('TRAINING', {'Signal': '080970.KS', 'Transformation': 'CumSum_080970.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 7.421, ('SIGNAL_TRAINING', {'Signals': ['080970.KS'], 'Transformations': [('080970.KS', 'None', '_', 'T+S+R'), ('080970.KS', 'None', 'Diff_', 'T+S+R'), ('080970.KS', 'None', 'RelDiff_', 'T+S+R'), ('080970.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['080970.KS'], 'Transformations': [('080970.KS', [('080970.KS', 'None', 'CumSum_', 'T+S+R'), ('080970.KS', 'None', 'Diff_', 'T+S+R'), ('080970.KS', 'None', 'RelDiff_', 'T+S+R'), ('080970.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '080970.KS', 'Transformations': [('080970.KS', 'None', 'CumSum_', 'T+S+R'), ('080970.KS', 'None', 'Diff_', 'T+S+R'), ('080970.KS', 'None', 'RelDiff_', 'T+S+R'), ('080970.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': '080970.KS', 'Transformations': [('080970.KS', 'None', 'CumSum_', 'T+S+R'), ('080970.KS', 'None', 'Diff_', 'T+S+R'), ('080970.KS', 'None', 'RelDiff_', 'T+S+R'), ('080970.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '080970.KS', 'Model': '_080970.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.026, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '080970.KS', 'Model': '_080970.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '080970.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.171, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '080970.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.206, ('FINALIZE_TRAINING', {'Signals': ['080970.KS'], 'Transformations': [('080970.KS', [('080970.KS', 'None', 'CumSum_', 'T+S+R'), ('080970.KS', 'None', 'Diff_', 'T+S+R'), ('080970.KS', 'None', 'RelDiff_', 'T+S+R'), ('080970.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-08-03T00:00:00.000000 TimeMax=2013-11-19T00:00:00.000000 TimeDelta=<DateOffset: days=2> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='080970.KS' Length=687  Min=4660.0 Max=5100.0  Mean=4968.5007278020375 StdDev=75.65055791988357
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_080970.KS' Min=0.0 Max=1.0  Mean=0.7011380177319062 StdDev=0.17193308618155387
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_080970.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_080970.KS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_080970.KS_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_080970.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0018 MAPE_Forecast=0.001 MAPE_Test=0.0
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0018 SMAPE_Forecast=0.001 SMAPE_Test=0.0
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9982 MASE_Forecast=0.9926 MASE_Test=0.0
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=21.2375 CRPS_Forecast=13.183823529411768 CRPS_Test=0.0
INFO:pyaf.std:MODEL_L1 L1_Fit=8.988970588235293 L1_Forecast=4.779411764705882 L1_Test=0.0
INFO:pyaf.std:MODEL_L2 L2_Fit=23.249367480327162 L2_Forecast=14.011549857591225 L2_Test=0.0
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.01241559812024895 LnQ_Forecast=0.001097330712937464 LnQ_Test=0.0
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0 MedAE_Forecast=0.0 MedAE_Test=0.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.6590909090909091
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _080970.KS_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation  ...  ForecastMAPE      TestMAPE
0    None         _080970.KS  ...  1.000000e-03  0.000000e+00
1    None   CumSum_080970.KS  ...  1.000000e-03  0.000000e+00
2    None     Diff_080970.KS  ...  1.000000e-03  0.000000e+00
3    None         _080970.KS  ...  1.000000e-03  0.000000e+00
4    None         _080970.KS  ...  1.000000e-03  0.000000e+00
..    ...                ...  ...           ...           ...
123  None  RelDiff_080970.KS  ...  2.652867e+05  4.800498e+06
124  None  RelDiff_080970.KS  ...  3.045742e+05  5.217885e+06
125  None  RelDiff_080970.KS  ...  5.489569e+06  5.753968e+06
126  None  RelDiff_080970.KS  ...  5.595744e+06  5.753968e+06
127  None  RelDiff_080970.KS  ...  5.612920e+06  5.753968e+06

[128 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _080970.KS             T+S+R  ...  0.0018        0.001      0.0
1  None  CumSum_080970.KS             T+S+R  ...  0.0019        0.001      0.0
2  None    Diff_080970.KS             T+S+R  ...  0.0018        0.001      0.0
3  None        _080970.KS             T+S+R  ...  0.0018        0.001      0.0
4  None        _080970.KS             T+S+R  ...  0.0018        0.001      0.0

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['080970.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.136, ('FORECASTING', {'Signals': ['080970.KS'], 'Horizon': 7}))
7 0    5040.0
1    5040.0
2    5040.0
3    5040.0
4    5040.0
5    5040.0
6    5040.0
Name: 080970.KS, dtype: float64
7 0    5040.0
1    5040.0
2    5040.0
3    5040.0
4    5040.0
5    5040.0
6    5040.0
Name: 080970.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_080970.KS 080970.KS [5040.0, 5040.0, 5040.0, 5040.0, 5040.0, 5040.0, 5040.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_080970.KS 080970.KS [5040.0, 5040.0, 5040.0, 5040.0, 5040.0, 5040.0, 5040.0]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_080970.KS 080970.KS 687 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_080970.KS 080970.KS 7.872298717498779
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_080970.KS 080970.KS Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_080970.KS 080970.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_080970.KS 080970.KS 0.0 0.0 0.0
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_080970.KS 080970.KS 0.0 0.0 1.0
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_080970.KS_7'
