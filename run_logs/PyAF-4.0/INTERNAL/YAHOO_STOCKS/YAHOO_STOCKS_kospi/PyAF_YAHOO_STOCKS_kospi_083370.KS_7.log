BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 1279 H= 7 HEAD= ['2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000' '2011-08-04T00:00:00.000000000'
 '2011-08-05T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  083370.KS N= 1279 H= 7 HEAD= [4730. 4655. 4870. 4890. 4890.] TAIL= [4075. 4070. 4285. 4285. 4280.]
   083370.KS       Date
0     4730.0 2011-08-01
1     4655.0 2011-08-02
2     4870.0 2011-08-03
3     4890.0 2011-08-04
4     4890.0 2011-08-05
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1279 entries, 0 to 1278
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   083370.KS  1279 non-null   float64       
 1   Date       1279 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.0 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['083370.KS'], 'Transformations': [('083370.KS', 'None', '_', 'T+S+R'), ('083370.KS', 'None', 'Diff_', 'T+S+R'), ('083370.KS', 'None', 'RelDiff_', 'T+S+R'), ('083370.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083370.KS', 'Transformation': '_083370.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.466, ('TRAINING', {'Signal': '083370.KS', 'Transformation': '_083370.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083370.KS', 'Transformation': 'Diff_083370.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.875, ('TRAINING', {'Signal': '083370.KS', 'Transformation': 'Diff_083370.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083370.KS', 'Transformation': 'RelDiff_083370.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.642, ('TRAINING', {'Signal': '083370.KS', 'Transformation': 'RelDiff_083370.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083370.KS', 'Transformation': 'CumSum_083370.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.448, ('TRAINING', {'Signal': '083370.KS', 'Transformation': 'CumSum_083370.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 8.433, ('SIGNAL_TRAINING', {'Signals': ['083370.KS'], 'Transformations': [('083370.KS', 'None', '_', 'T+S+R'), ('083370.KS', 'None', 'Diff_', 'T+S+R'), ('083370.KS', 'None', 'RelDiff_', 'T+S+R'), ('083370.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['083370.KS'], 'Transformations': [('083370.KS', [('083370.KS', 'None', 'CumSum_', 'T+S+R'), ('083370.KS', 'None', 'Diff_', 'T+S+R'), ('083370.KS', 'None', 'RelDiff_', 'T+S+R'), ('083370.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '083370.KS', 'Transformations': [('083370.KS', 'None', 'CumSum_', 'T+S+R'), ('083370.KS', 'None', 'Diff_', 'T+S+R'), ('083370.KS', 'None', 'RelDiff_', 'T+S+R'), ('083370.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': '083370.KS', 'Transformations': [('083370.KS', 'None', 'CumSum_', 'T+S+R'), ('083370.KS', 'None', 'Diff_', 'T+S+R'), ('083370.KS', 'None', 'RelDiff_', 'T+S+R'), ('083370.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '083370.KS', 'Model': '_083370.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '083370.KS', 'Model': '_083370.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '083370.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.188, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '083370.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.223, ('FINALIZE_TRAINING', {'Signals': ['083370.KS'], 'Transformations': [('083370.KS', [('083370.KS', 'None', 'CumSum_', 'T+S+R'), ('083370.KS', 'None', 'Diff_', 'T+S+R'), ('083370.KS', 'None', 'RelDiff_', 'T+S+R'), ('083370.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-08-01T00:00:00.000000 TimeMax=2015-07-17T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='083370.KS' Length=1279  Min=2495.0 Max=5430.0  Mean=4550.609851446443 StdDev=491.70354913436455
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_083370.KS' Min=0.0 Max=1.0  Mean=0.7003781435933338 StdDev=0.16753102185157223
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_083370.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_083370.KS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_083370.KS_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_083370.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0084 MAPE_Forecast=0.0174 MAPE_Test=0.0082
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0084 SMAPE_Forecast=0.0174 SMAPE_Test=0.0084
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9961 MASE_Test=0.875
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=78.48129172488744 CRPS_Forecast=221.36434140715107 CRPS_Test=30.714285714285715
INFO:pyaf.std:MODEL_L1 L1_Fit=38.23992133726647 L1_Forecast=66.01960784313725 L1_Test=35.0
INFO:pyaf.std:MODEL_L2 L2_Fit=81.93247333520448 L2_Forecast=137.74052047379578 L2_Test=81.52563137706186
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.3291991524013409 LnQ_Forecast=0.3273933051843301 LnQ_Test=0.00266780152352016
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=5.0 MedAE_Forecast=20.0 MedAE_Test=5.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.7614991482112436
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _083370.KS_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _083370.KS             T+S+R  ...  0.0084       0.0174   0.0082
1    None   CumSum_083370.KS             T+S+R  ...  0.0088       0.0174   0.0082
2    None   CumSum_083370.KS             T+S+R  ...  0.0088       0.0174   0.0082
3    None     Diff_083370.KS             T+S+R  ...  0.0084       0.0174   0.0082
4    None         _083370.KS             T+S+R  ...  0.0084       0.0174   0.0082
..    ...                ...               ...  ...     ...          ...      ...
131  None  RelDiff_083370.KS             T+S+R  ...  0.2792       1.6236   1.9757
132  None   CumSum_083370.KS             T+S+R  ...  2.2074       2.2982   1.8447
133  None  RelDiff_083370.KS             T+S+R  ...  0.2041       3.3352  23.2397
134  None  RelDiff_083370.KS             T+S+R  ...  0.2041       3.3352  23.2397
135  None  RelDiff_083370.KS             T+S+R  ...  0.2041       3.3352  23.2397

[136 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _083370.KS             T+S+R  ...  0.0084       0.0174   0.0082
1  None  CumSum_083370.KS             T+S+R  ...  0.0088       0.0174   0.0082
2  None  CumSum_083370.KS             T+S+R  ...  0.0088       0.0174   0.0082
3  None    Diff_083370.KS             T+S+R  ...  0.0084       0.0174   0.0082
4  None        _083370.KS             T+S+R  ...  0.0084       0.0174   0.0082

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['083370.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.156, ('FORECASTING', {'Signals': ['083370.KS'], 'Horizon': 7}))
7 0    4280.0
1    4280.0
2    4290.0
3    4310.0
4    4300.0
5    4280.0
6    4290.0
Name: 083370.KS, dtype: float64
7 0    4280.0
1    4280.0
2    4280.0
3    4280.0
4    4280.0
5    4280.0
6    4280.0
Name: 083370.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_083370.KS 083370.KS [4280.0, 4280.0, 4290.0, 4310.0, 4300.0, 4280.0, 4290.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_083370.KS 083370.KS [4280.0, 4280.0, 4280.0, 4280.0, 4280.0, 4280.0, 4280.0]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_083370.KS 083370.KS 1279 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_083370.KS 083370.KS 8.913271188735962
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_083370.KS 083370.KS Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_083370.KS 083370.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_083370.KS 083370.KS 0.0023 0.0023 0.8571
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_083370.KS 083370.KS 10.0 14.638501094227998 -0.8749999999997655
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_083370.KS_7'
