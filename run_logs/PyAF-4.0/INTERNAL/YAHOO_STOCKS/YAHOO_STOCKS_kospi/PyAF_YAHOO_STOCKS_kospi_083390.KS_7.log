BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 1230 H= 7 HEAD= ['2011-08-05T00:00:00.000000000' '2011-08-09T00:00:00.000000000'
 '2011-08-11T00:00:00.000000000' '2011-09-05T00:00:00.000000000'
 '2011-09-06T00:00:00.000000000'] TAIL= ['2016-07-13T00:00:00.000000000' '2016-07-14T00:00:00.000000000'
 '2016-07-15T00:00:00.000000000' '2016-07-18T00:00:00.000000000'
 '2016-07-19T00:00:00.000000000']
SIGNAL :  083390.KS N= 1230 H= 7 HEAD= [4605. 4550. 4560. 4600. 4555.] TAIL= [4000. 4010. 4290. 4290. 4300.]
   083390.KS       Date
0     4605.0 2011-08-05
1     4550.0 2011-08-09
2     4560.0 2011-08-11
3     4600.0 2011-09-05
4     4555.0 2011-09-06
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1230 entries, 0 to 1229
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   083390.KS  1230 non-null   float64       
 1   Date       1230 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 28.8 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['083390.KS'], 'Transformations': [('083390.KS', 'None', '_', 'T+S+R'), ('083390.KS', 'None', 'Diff_', 'T+S+R'), ('083390.KS', 'None', 'RelDiff_', 'T+S+R'), ('083390.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083390.KS', 'Transformation': '_083390.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.81, ('TRAINING', {'Signal': '083390.KS', 'Transformation': '_083390.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083390.KS', 'Transformation': 'Diff_083390.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.523, ('TRAINING', {'Signal': '083390.KS', 'Transformation': 'Diff_083390.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083390.KS', 'Transformation': 'RelDiff_083390.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.645, ('TRAINING', {'Signal': '083390.KS', 'Transformation': 'RelDiff_083390.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '083390.KS', 'Transformation': 'CumSum_083390.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.47, ('TRAINING', {'Signal': '083390.KS', 'Transformation': 'CumSum_083390.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 8.451, ('SIGNAL_TRAINING', {'Signals': ['083390.KS'], 'Transformations': [('083390.KS', 'None', '_', 'T+S+R'), ('083390.KS', 'None', 'Diff_', 'T+S+R'), ('083390.KS', 'None', 'RelDiff_', 'T+S+R'), ('083390.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['083390.KS'], 'Transformations': [('083390.KS', [('083390.KS', 'None', 'CumSum_', 'T+S+R'), ('083390.KS', 'None', 'Diff_', 'T+S+R'), ('083390.KS', 'None', 'RelDiff_', 'T+S+R'), ('083390.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '083390.KS', 'Transformations': [('083390.KS', 'None', 'CumSum_', 'T+S+R'), ('083390.KS', 'None', 'Diff_', 'T+S+R'), ('083390.KS', 'None', 'RelDiff_', 'T+S+R'), ('083390.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': '083390.KS', 'Transformations': [('083390.KS', 'None', 'CumSum_', 'T+S+R'), ('083390.KS', 'None', 'Diff_', 'T+S+R'), ('083390.KS', 'None', 'RelDiff_', 'T+S+R'), ('083390.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '083390.KS', 'Model': '_083390.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '083390.KS', 'Model': '_083390.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '083390.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.189, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '083390.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.225, ('FINALIZE_TRAINING', {'Signals': ['083390.KS'], 'Transformations': [('083390.KS', [('083390.KS', 'None', 'CumSum_', 'T+S+R'), ('083390.KS', 'None', 'Diff_', 'T+S+R'), ('083390.KS', 'None', 'RelDiff_', 'T+S+R'), ('083390.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-08-05T00:00:00.000000 TimeMax=2015-07-31T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='083390.KS' Length=1230  Min=2580.0 Max=5480.0  Mean=4544.089430894309 StdDev=492.01992008272657
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_083390.KS' Min=0.0 Max=1.0  Mean=0.6772722175497604 StdDev=0.1696620414078369
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_083390.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_083390.KS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_083390.KS_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_083390.KS_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0092 MAPE_Forecast=0.0168 MAPE_Test=0.0122
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0092 SMAPE_Forecast=0.0168 SMAPE_Test=0.0125
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9959 MASE_Test=0.8571
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=75.33780674846628 CRPS_Forecast=219.98364945978392 CRPS_Test=41.42857142857143
INFO:pyaf.std:MODEL_L1 L1_Fit=41.73312883435583 L1_Forecast=62.857142857142854 L1_Test=51.42857142857143
INFO:pyaf.std:MODEL_L2 L2_Fit=97.00960781376223 L2_Forecast=110.62992177452145 L2_Test=107.70329614269008
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.4569106301605789 LnQ_Forecast=0.22858850475472747 LnQ_Test=0.004727697348461139
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0 MedAE_Forecast=30.0 MedAE_Test=10.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.6982758620689655
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _083390.KS_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None         _083390.KS             T+S+R  ...  0.0092       0.0168   0.0122
1    None   CumSum_083390.KS             T+S+R  ...  0.0096       0.0168   0.0122
2    None   CumSum_083390.KS             T+S+R  ...  0.0096       0.0168   0.0122
3    None     Diff_083390.KS             T+S+R  ...  0.0092       0.0168   0.0122
4    None         _083390.KS             T+S+R  ...  0.0092       0.0168   0.0122
..    ...                ...               ...  ...     ...          ...      ...
131  None  RelDiff_083390.KS             T+S+R  ...  0.3641       5.0164   0.1176
132  None  RelDiff_083390.KS             T+S+R  ...  0.3640       5.0175   0.1176
133  None  RelDiff_083390.KS             T+S+R  ...  0.3128      11.2288  96.0631
134  None  RelDiff_083390.KS             T+S+R  ...  0.3128      11.2288  96.0631
135  None  RelDiff_083390.KS             T+S+R  ...  0.3128      11.2288  96.0631

[136 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _083390.KS             T+S+R  ...  0.0092       0.0168   0.0122
1  None  CumSum_083390.KS             T+S+R  ...  0.0096       0.0168   0.0122
2  None  CumSum_083390.KS             T+S+R  ...  0.0096       0.0168   0.0122
3  None    Diff_083390.KS             T+S+R  ...  0.0092       0.0168   0.0122
4  None        _083390.KS             T+S+R  ...  0.0092       0.0168   0.0122

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['083390.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.157, ('FORECASTING', {'Signals': ['083390.KS'], 'Horizon': 7}))
7 0    4300.0
1    4385.0
2    4355.0
3    4355.0
4    4265.0
5    4270.0
6    4270.0
Name: 083390.KS, dtype: float64
7 0    4300.0
1    4300.0
2    4300.0
3    4300.0
4    4300.0
5    4300.0
6    4300.0
Name: 083390.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_083390.KS 083390.KS [4300.0, 4385.0, 4355.0, 4355.0, 4265.0, 4270.0, 4270.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_083390.KS 083390.KS [4300.0, 4300.0, 4300.0, 4300.0, 4300.0, 4300.0, 4300.0]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_083390.KS 083390.KS 1230 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_083390.KS 083390.KS 8.934535026550293
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_083390.KS 083390.KS Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_083390.KS 083390.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_083390.KS 083390.KS 0.0096 0.0096 1.1837
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_083390.KS 083390.KS 41.42857142857143 48.25527358301296 -0.09606147934677445
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_083390.KS_7'
