BENCH_DATA YAHOO_STOCKS_kospi
TIME :  Date N= 1292 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  000020.KS N= 1292 H= 7 HEAD= [5620. 5970. 6100. 5990. 6020.] TAIL= [10550. 10450. 10300. 10100. 10100.]
   000020.KS       Date
0     5620.0 2011-07-28
1     5970.0 2011-07-29
2     6100.0 2011-08-01
3     5990.0 2011-08-02
4     6020.0 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1292 entries, 0 to 1291
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype         
---  ------     --------------  -----         
 0   000020.KS  1292 non-null   float64       
 1   Date       1292 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['000020.KS'], 'Transformations': [('000020.KS', 'None', '_', 'T+S+R'), ('000020.KS', 'None', 'Diff_', 'T+S+R'), ('000020.KS', 'None', 'RelDiff_', 'T+S+R'), ('000020.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '000020.KS', 'Transformation': '_000020.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.659, ('TRAINING', {'Signal': '000020.KS', 'Transformation': '_000020.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '000020.KS', 'Transformation': 'Diff_000020.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.536, ('TRAINING', {'Signal': '000020.KS', 'Transformation': 'Diff_000020.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '000020.KS', 'Transformation': 'RelDiff_000020.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.246, ('TRAINING', {'Signal': '000020.KS', 'Transformation': 'RelDiff_000020.KS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '000020.KS', 'Transformation': 'CumSum_000020.KS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.196, ('TRAINING', {'Signal': '000020.KS', 'Transformation': 'CumSum_000020.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.64, ('SIGNAL_TRAINING', {'Signals': ['000020.KS'], 'Transformations': [('000020.KS', 'None', '_', 'T+S+R'), ('000020.KS', 'None', 'Diff_', 'T+S+R'), ('000020.KS', 'None', 'RelDiff_', 'T+S+R'), ('000020.KS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['000020.KS'], 'Transformations': [('000020.KS', [('000020.KS', 'None', 'CumSum_', 'T+S+R'), ('000020.KS', 'None', 'Diff_', 'T+S+R'), ('000020.KS', 'None', 'RelDiff_', 'T+S+R'), ('000020.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '000020.KS', 'Transformations': [('000020.KS', 'None', 'CumSum_', 'T+S+R'), ('000020.KS', 'None', 'Diff_', 'T+S+R'), ('000020.KS', 'None', 'RelDiff_', 'T+S+R'), ('000020.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': '000020.KS', 'Transformations': [('000020.KS', 'None', 'CumSum_', 'T+S+R'), ('000020.KS', 'None', 'Diff_', 'T+S+R'), ('000020.KS', 'None', 'RelDiff_', 'T+S+R'), ('000020.KS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '000020.KS', 'Model': '_000020.KS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '000020.KS', 'Model': '_000020.KS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '000020.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.185, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '000020.KS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.219, ('FINALIZE_TRAINING', {'Signals': ['000020.KS'], 'Transformations': [('000020.KS', [('000020.KS', 'None', 'CumSum_', 'T+S+R'), ('000020.KS', 'None', 'Diff_', 'T+S+R'), ('000020.KS', 'None', 'RelDiff_', 'T+S+R'), ('000020.KS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-14T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='000020.KS' Length=1292  Min=4075.0 Max=11550.0  Mean=6362.256191950464 StdDev=1561.232222072921
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_000020.KS' Min=0.0 Max=1.0  Mean=0.3059874504281559 StdDev=0.20886049793617664
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_000020.KS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_000020.KS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_000020.KS_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_000020.KS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0137 MAPE_Forecast=0.0208 MAPE_Test=0.0117
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0137 SMAPE_Forecast=0.0208 SMAPE_Test=0.0116
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9996 MASE_Test=1.2143
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=309.80970714724555 CRPS_Forecast=311.23055344472425 CRPS_Test=96.42857142857143
INFO:pyaf.std:MODEL_L1 L1_Fit=82.94747081712062 L1_Forecast=177.8599221789883 L1_Test=121.42857142857143
INFO:pyaf.std:MODEL_L2 L2_Fit=137.2735135039809 L2_Forecast=254.7257623558758 L2_Test=145.16001023501124
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.42314294508765504 LnQ_Forecast=0.2159471108344839 LnQ_Test=0.001338785410978142
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=50.0 MedAE_Forecast=120.0 MedAE_Test=100.0
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.20668896321070235
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _000020.KS_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation  ...  ForecastMAPE      TestMAPE
0    None         _000020.KS  ...  2.080000e-02  1.170000e-02
1    None         _000020.KS  ...  2.080000e-02  1.170000e-02
2    None   CumSum_000020.KS  ...  2.080000e-02  1.170000e-02
3    None     Diff_000020.KS  ...  2.080000e-02  1.170000e-02
4    None     Diff_000020.KS  ...  2.080000e-02  1.170000e-02
..    ...                ...  ...           ...           ...
195  None  RelDiff_000020.KS  ...  3.728748e+06  1.487226e+07
196  None  RelDiff_000020.KS  ...  3.747112e+06  1.487226e+07
197  None  RelDiff_000020.KS  ...  3.839932e+06  1.487226e+07
198  None  RelDiff_000020.KS  ...  3.839932e+06  1.487226e+07
199  None  RelDiff_000020.KS  ...  3.974728e+06  1.487226e+07

[200 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _000020.KS             T+S+R  ...  0.0137       0.0208   0.0117
1  None        _000020.KS             T+S+R  ...  0.0137       0.0208   0.0117
2  None  CumSum_000020.KS             T+S+R  ...  0.0140       0.0208   0.0117
3  None    Diff_000020.KS             T+S+R  ...  0.0137       0.0208   0.0117
4  None    Diff_000020.KS             T+S+R  ...  0.0137       0.0208   0.0117

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['000020.KS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.153, ('FORECASTING', {'Signals': ['000020.KS'], 'Horizon': 7}))
7 0    10050.0
1     9970.0
2     9870.0
3     9990.0
4     9990.0
5    10200.0
6     9970.0
Name: 000020.KS, dtype: float64
7 0    10100.0
1    10100.0
2    10100.0
3    10100.0
4    10100.0
5    10100.0
6    10100.0
Name: 000020.KS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_000020.KS 000020.KS [10050.0, 9970.0, 9870.0, 9990.0, 9990.0, 10200.0, 9970.0]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_000020.KS 000020.KS [10100.0, 10100.0, 10100.0, 10100.0, 10100.0, 10100.0, 10100.0]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_000020.KS 000020.KS 1292 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_000020.KS 000020.KS 12.115009307861328
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_000020.KS 000020.KS Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_000020.KS 000020.KS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_000020.KS 000020.KS 0.0123 0.0122 0.9961
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_000020.KS 000020.KS 122.85714285714286 132.77263057035296 -1.0172816440915424
BENCHMARK_SUCCESS 'YAHOO_STOCKS_kospi_000020.KS_7'
