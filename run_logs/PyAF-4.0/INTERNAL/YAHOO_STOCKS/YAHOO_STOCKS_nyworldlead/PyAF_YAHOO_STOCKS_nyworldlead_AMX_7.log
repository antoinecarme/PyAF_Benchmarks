BENCH_DATA YAHOO_STOCKS_nyworldlead
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  AMX N= 1251 H= 7 HEAD= [25.93     25.799999 25.889999 24.58     24.360001] TAIL= [12.4  12.35 12.63 12.48 12.82]
         AMX       Date
0  25.930000 2011-07-28
1  25.799999 2011-07-29
2  25.889999 2011-08-01
3  24.580000 2011-08-02
4  24.360001 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AMX     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AMX'], 'Transformations': [('AMX', 'None', '_', 'T+S+R'), ('AMX', 'None', 'Diff_', 'T+S+R'), ('AMX', 'None', 'RelDiff_', 'T+S+R'), ('AMX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMX', 'Transformation': '_AMX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.547, ('TRAINING', {'Signal': 'AMX', 'Transformation': '_AMX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMX', 'Transformation': 'Diff_AMX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.831, ('TRAINING', {'Signal': 'AMX', 'Transformation': 'Diff_AMX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMX', 'Transformation': 'RelDiff_AMX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.168, ('TRAINING', {'Signal': 'AMX', 'Transformation': 'RelDiff_AMX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMX', 'Transformation': 'CumSum_AMX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.452, ('TRAINING', {'Signal': 'AMX', 'Transformation': 'CumSum_AMX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.001, ('SIGNAL_TRAINING', {'Signals': ['AMX'], 'Transformations': [('AMX', 'None', '_', 'T+S+R'), ('AMX', 'None', 'Diff_', 'T+S+R'), ('AMX', 'None', 'RelDiff_', 'T+S+R'), ('AMX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AMX'], 'Transformations': [('AMX', [('AMX', 'None', 'CumSum_', 'T+S+R'), ('AMX', 'None', 'Diff_', 'T+S+R'), ('AMX', 'None', 'RelDiff_', 'T+S+R'), ('AMX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AMX', 'Transformations': [('AMX', 'None', 'CumSum_', 'T+S+R'), ('AMX', 'None', 'Diff_', 'T+S+R'), ('AMX', 'None', 'RelDiff_', 'T+S+R'), ('AMX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'AMX', 'Transformations': [('AMX', 'None', 'CumSum_', 'T+S+R'), ('AMX', 'None', 'Diff_', 'T+S+R'), ('AMX', 'None', 'RelDiff_', 'T+S+R'), ('AMX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AMX', 'Model': '_AMX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.03, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AMX', 'Model': '_AMX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AMX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.186, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AMX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.224, ('FINALIZE_TRAINING', {'Signals': ['AMX'], 'Transformations': [('AMX', [('AMX', 'None', 'CumSum_', 'T+S+R'), ('AMX', 'None', 'Diff_', 'T+S+R'), ('AMX', 'None', 'RelDiff_', 'T+S+R'), ('AMX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AMX' Length=1251  Min=11.4 Max=28.25  Mean=21.09940848840927 StdDev=3.629118208004312
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AMX' Min=0.0 Max=1.0  Mean=0.575632551240906 StdDev=0.2153779351931342
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AMX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AMX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AMX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_AMX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0126 MAPE_Forecast=0.0169 MAPE_Test=0.0154
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0126 SMAPE_Forecast=0.0169 SMAPE_Test=0.0156
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9972 MASE_Test=1.231
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.6172915475971966 CRPS_Forecast=0.6682989974208363 CRPS_Test=0.07714285714285728
INFO:pyaf.std:MODEL_L1 L1_Fit=0.28439193065326623 L1_Forecast=0.2544979558232932 L1_Test=0.19285714285714356
INFO:pyaf.std:MODEL_L2 L2_Fit=0.3946838733216775 L2_Forecast=0.3308301374417193 L2_Test=0.23883646527039648
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.3014045412915092 LnQ_Forecast=0.12249913731759843 LnQ_Test=0.0026135353108407617
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.21000000000000085 MedAE_Forecast=0.21000000000000085 MedAE_Test=0.15000000000000036
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.862314540059347
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _AMX_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None           _AMX             T+S+R  ...  0.0124       0.0166   0.0144
1    None           _AMX             T+S+R  ...  0.0126       0.0167   0.0156
2    None           _AMX             T+S+R  ...  0.0126       0.0169   0.0154
3    None           _AMX             T+S+R  ...  0.0126       0.0169   0.0154
4    None     CumSum_AMX             T+S+R  ...  0.0132       0.0169   0.0154
..    ...            ...               ...  ...     ...          ...      ...
203  None     CumSum_AMX             T+S+R  ...  0.6682       1.4995   0.3460
204  None     CumSum_AMX             T+S+R  ...  0.9490       1.5670   2.7478
205  None     CumSum_AMX             T+S+R  ...  1.0088       1.6100   2.3665
206  None     CumSum_AMX             T+S+R  ...  1.1606       1.7474   3.5099
207  None     CumSum_AMX             T+S+R  ...  2.8984       3.6822   4.6779

[208 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _AMX             T+S+R  ...  0.0124       0.0166   0.0144
1  None           _AMX             T+S+R  ...  0.0126       0.0167   0.0156
2  None           _AMX             T+S+R  ...  0.0126       0.0169   0.0154
3  None           _AMX             T+S+R  ...  0.0126       0.0169   0.0154
4  None     CumSum_AMX             T+S+R  ...  0.0132       0.0169   0.0154

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AMX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.159, ('FORECASTING', {'Signals': ['AMX'], 'Horizon': 7}))
7 0    12.59
1    12.80
2    12.78
3    12.57
4    12.36
5    12.34
6    12.09
Name: AMX, dtype: float64
7 0    12.82
1    12.82
2    12.82
3    12.82
4    12.82
5    12.82
6    12.82
Name: AMX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AMX AMX [12.59, 12.8, 12.78, 12.57, 12.36, 12.34, 12.09]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AMX AMX [12.82, 12.82, 12.82, 12.82, 12.82, 12.82, 12.82]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AMX AMX 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AMX AMX 12.487815380096436
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AMX AMX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AMX AMX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AMX AMX 0.0256 0.0251 2.059
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AMX AMX 0.3157142857142861 0.39502260333157824 -1.7683200572274371
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nyworldlead_AMX_7'
