BENCH_DATA YAHOO_STOCKS_nyworldlead
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  AXP N= 1251 H= 7 HEAD= [50.549999 50.040001 50.02     48.52     48.860001] TAIL= [63.       63.099998 63.610001 63.779999 63.990002]
         AXP       Date
0  50.549999 2011-07-28
1  50.040001 2011-07-29
2  50.020000 2011-08-01
3  48.520000 2011-08-02
4  48.860001 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AXP     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AXP'], 'Transformations': [('AXP', 'None', '_', 'T+S+R'), ('AXP', 'None', 'Diff_', 'T+S+R'), ('AXP', 'None', 'RelDiff_', 'T+S+R'), ('AXP', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AXP', 'Transformation': '_AXP'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.544, ('TRAINING', {'Signal': 'AXP', 'Transformation': '_AXP'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AXP', 'Transformation': 'Diff_AXP'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.772, ('TRAINING', {'Signal': 'AXP', 'Transformation': 'Diff_AXP'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AXP', 'Transformation': 'RelDiff_AXP'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.106, ('TRAINING', {'Signal': 'AXP', 'Transformation': 'RelDiff_AXP'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AXP', 'Transformation': 'CumSum_AXP'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.715, ('TRAINING', {'Signal': 'AXP', 'Transformation': 'CumSum_AXP'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.137, ('SIGNAL_TRAINING', {'Signals': ['AXP'], 'Transformations': [('AXP', 'None', '_', 'T+S+R'), ('AXP', 'None', 'Diff_', 'T+S+R'), ('AXP', 'None', 'RelDiff_', 'T+S+R'), ('AXP', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AXP'], 'Transformations': [('AXP', [('AXP', 'None', 'CumSum_', 'T+S+R'), ('AXP', 'None', 'Diff_', 'T+S+R'), ('AXP', 'None', 'RelDiff_', 'T+S+R'), ('AXP', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AXP', 'Transformations': [('AXP', 'None', 'CumSum_', 'T+S+R'), ('AXP', 'None', 'Diff_', 'T+S+R'), ('AXP', 'None', 'RelDiff_', 'T+S+R'), ('AXP', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'AXP', 'Transformations': [('AXP', 'None', 'CumSum_', 'T+S+R'), ('AXP', 'None', 'Diff_', 'T+S+R'), ('AXP', 'None', 'RelDiff_', 'T+S+R'), ('AXP', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AXP', 'Model': '_AXP_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AXP', 'Model': '_AXP_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AXP'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.185, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AXP'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.219, ('FINALIZE_TRAINING', {'Signals': ['AXP'], 'Transformations': [('AXP', [('AXP', 'None', 'CumSum_', 'T+S+R'), ('AXP', 'None', 'Diff_', 'T+S+R'), ('AXP', 'None', 'RelDiff_', 'T+S+R'), ('AXP', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AXP' Length=1251  Min=42.799999 Max=95.839996  Mean=70.42774580975208 StdDev=14.403624855315655
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AXP' Min=0.0 Max=1.0  Mean=0.5208851503093439 StdDev=0.2715615699472162
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AXP_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AXP_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AXP_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_AXP_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0102 MAPE_Forecast=0.0105 MAPE_Test=0.0096
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0102 SMAPE_Forecast=0.0105 SMAPE_Test=0.0097
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9985 MASE_Test=1.4331
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=4.678340172045755 CRPS_Forecast=2.2236414217341838 CRPS_Test=0.5092852142857142
INFO:pyaf.std:MODEL_L1 L1_Fit=0.6886432804020102 L1_Forecast=0.6951806987951806 L1_Test=0.5971429999999996
INFO:pyaf.std:MODEL_L2 L2_Fit=0.9309689806984505 L2_Forecast=1.055541817400385 L2_Test=0.7855847612748639
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.19847141989331513 LnQ_Forecast=0.06455151602647699 LnQ_Test=0.0011502513402169784
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.5099980000000031 MedAE_Forecast=0.4400019999999927 MedAE_Test=0.5100029999999975
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.14611614702768555
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _AXP_Lag1Trend_residue_bestCycle_byMAPE None 0.0007541667093231008 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ...  ForecastMAPE      TestMAPE
0    None           _AXP  ...  1.050000e-02  9.600000e-03
1    None           _AXP  ...  1.050000e-02  9.600000e-03
2    None     CumSum_AXP  ...  1.050000e-02  9.600000e-03
3    None       Diff_AXP  ...  1.050000e-02  9.600000e-03
4    None       Diff_AXP  ...  1.050000e-02  9.600000e-03
..    ...            ...  ...           ...           ...
219  None    RelDiff_AXP  ...  7.636140e+06  1.230017e+07
220  None    RelDiff_AXP  ...  7.804521e+06  1.230017e+07
221  None    RelDiff_AXP  ...  7.950002e+06  1.230017e+07
222  None    RelDiff_AXP  ...  8.040519e+06  1.230017e+07
223  None    RelDiff_AXP  ...  8.040519e+06  1.230017e+07

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _AXP             T+S+R  ...  0.0102       0.0105   0.0096
1  None           _AXP             T+S+R  ...  0.0102       0.0105   0.0096
2  None     CumSum_AXP             T+S+R  ...  0.0103       0.0105   0.0096
3  None       Diff_AXP             T+S+R  ...  0.0102       0.0105   0.0096
4  None       Diff_AXP             T+S+R  ...  0.0102       0.0105   0.0096

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AXP'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.154, ('FORECASTING', {'Signals': ['AXP'], 'Horizon': 7}))
7 0    64.160004
1    64.480003
2    63.430000
3    64.279999
4    64.330002
5    64.370003
6    64.589996
Name: AXP, dtype: float64
7 0    63.990002
1    63.990002
2    63.990002
3    63.990002
4    63.990002
5    63.990002
6    63.990002
Name: AXP_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AXP AXP [64.160004, 64.480003, 63.43, 64.279999, 64.330002, 64.370003, 64.589996]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AXP AXP [63.990002, 63.990002, 63.990002, 63.990002, 63.990002, 63.990002, 63.990002]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AXP AXP 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AXP AXP 12.606144666671753
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AXP AXP Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AXP AXP 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AXP AXP 0.0063 0.0063 0.9588
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AXP AXP 0.40428528571428657 0.4287349697582082 -0.48071265745071834
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nyworldlead_AXP_7'
