BENCH_DATA YAHOO_STOCKS_nyworldlead
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  MON N= 1251 H= 7 HEAD= [74.519997 73.480003 72.349998 71.040001 70.910004] TAIL= [102.330002 101.129997 104.220001 103.449997 106.440002]
         MON       Date
0  74.519997 2011-07-28
1  73.480003 2011-07-29
2  72.349998 2011-08-01
3  71.040001 2011-08-02
4  70.910004 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   MON     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['MON'], 'Transformations': [('MON', 'None', '_', 'T+S+R'), ('MON', 'None', 'Diff_', 'T+S+R'), ('MON', 'None', 'RelDiff_', 'T+S+R'), ('MON', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MON', 'Transformation': '_MON'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.52, ('TRAINING', {'Signal': 'MON', 'Transformation': '_MON'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MON', 'Transformation': 'Diff_MON'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.861, ('TRAINING', {'Signal': 'MON', 'Transformation': 'Diff_MON'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MON', 'Transformation': 'RelDiff_MON'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.166, ('TRAINING', {'Signal': 'MON', 'Transformation': 'RelDiff_MON'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MON', 'Transformation': 'CumSum_MON'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.78, ('TRAINING', {'Signal': 'MON', 'Transformation': 'CumSum_MON'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.328, ('SIGNAL_TRAINING', {'Signals': ['MON'], 'Transformations': [('MON', 'None', '_', 'T+S+R'), ('MON', 'None', 'Diff_', 'T+S+R'), ('MON', 'None', 'RelDiff_', 'T+S+R'), ('MON', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['MON'], 'Transformations': [('MON', [('MON', 'None', 'CumSum_', 'T+S+R'), ('MON', 'None', 'Diff_', 'T+S+R'), ('MON', 'None', 'RelDiff_', 'T+S+R'), ('MON', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'MON', 'Transformations': [('MON', 'None', 'CumSum_', 'T+S+R'), ('MON', 'None', 'Diff_', 'T+S+R'), ('MON', 'None', 'RelDiff_', 'T+S+R'), ('MON', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': 'MON', 'Transformations': [('MON', 'None', 'CumSum_', 'T+S+R'), ('MON', 'None', 'Diff_', 'T+S+R'), ('MON', 'None', 'RelDiff_', 'T+S+R'), ('MON', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MON', 'Model': '_MON_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MON', 'Model': '_MON_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MON'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.186, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MON'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.223, ('FINALIZE_TRAINING', {'Signals': ['MON'], 'Transformations': [('MON', [('MON', 'None', 'CumSum_', 'T+S+R'), ('MON', 'None', 'Diff_', 'T+S+R'), ('MON', 'None', 'RelDiff_', 'T+S+R'), ('MON', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='MON' Length=1251  Min=60.040001 Max=126.730003  Mean=98.74784974100716 StdDev=15.755698985676467
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_MON' Min=0.0 Max=1.0  Mean=0.5804145686036593 StdDev=0.23625278922133564
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_MON_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_MON_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_MON_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_MON_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0105 MAPE_Forecast=0.0124 MAPE_Test=0.0143
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0105 SMAPE_Forecast=0.0124 SMAPE_Test=0.0145
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.999 MASE_Test=1.0653
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=5.120136722658026 CRPS_Forecast=1.899991240652776 CRPS_Test=0.4535712857142867
INFO:pyaf.std:MODEL_L1 L1_Fit=0.9948946462311555 L1_Forecast=1.1769476746987948 L1_Test=1.4914310000000017
INFO:pyaf.std:MODEL_L2 L2_Fit=1.3202249575823168 L2_Forecast=1.6959196062944573 L2_Test=1.8805499370467982
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.21183988441293233 LnQ_Forecast=0.08020196647677905 LnQ_Test=0.0023214535265901662
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.7700049999999976 MedAE_Forecast=0.7900009999999895 MedAE_Test=1.2000049999999902
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.2171239401072444
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _MON_Lag1Trend_residue_bestCycle_byMAPE None 0.0005998050502381558 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ...   FitMAPE ForecastMAPE    TestMAPE
0    None           _MON             T+S+R  ...    0.0105       0.0124      0.0143
1    None           _MON             T+S+R  ...    0.0105       0.0124      0.0143
2    None     CumSum_MON             T+S+R  ...    0.0107       0.0124      0.0143
3    None       Diff_MON             T+S+R  ...    0.0105       0.0124      0.0143
4    None       Diff_MON             T+S+R  ...    0.0105       0.0124      0.0143
..    ...            ...               ...  ...       ...          ...         ...
219  None    RelDiff_MON             T+S+R  ...   41.8538    1254.3267   2737.4631
220  None    RelDiff_MON             T+S+R  ...  213.0922    1429.7633   8387.5059
221  None    RelDiff_MON             T+S+R  ...  229.2347    1557.3223   9157.3179
222  None    RelDiff_MON             T+S+R  ...  298.3455    2934.0749  17639.7797
223  None    RelDiff_MON             T+S+R  ...  298.3455    2934.0749  17639.7797

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _MON             T+S+R  ...  0.0105       0.0124   0.0143
1  None           _MON             T+S+R  ...  0.0105       0.0124   0.0143
2  None     CumSum_MON             T+S+R  ...  0.0107       0.0124   0.0143
3  None       Diff_MON             T+S+R  ...  0.0105       0.0124   0.0143
4  None       Diff_MON             T+S+R  ...  0.0105       0.0124   0.0143

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['MON'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.163, ('FORECASTING', {'Signals': ['MON'], 'Horizon': 7}))
7 0    106.870003
1    106.760002
2    106.099998
3    105.680000
4    105.260002
5    106.019997
6    106.750000
Name: MON, dtype: float64
7 0    106.440002
1    106.440002
2    106.440002
3    106.440002
4    106.440002
5    106.440002
6    106.440002
Name: MON_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_MON MON [106.870003, 106.760002, 106.099998, 105.68, 105.260002, 106.019997, 106.75]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_MON MON [106.440002, 106.440002, 106.440002, 106.440002, 106.440002, 106.440002, 106.440002]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_MON MON 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_MON MON 12.822735071182251
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_MON MON Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_MON MON 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_MON MON 0.0051 0.0051 1.0396
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_MON MON 0.5371442857142849 0.6147484479792186 -0.16992675429417736
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nyworldlead_MON_7'
