BENCH_DATA YAHOO_STOCKS_nyworldlead
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  MRK N= 1251 H= 7 HEAD= [34.93     34.130001 33.439999 32.900002 32.700001] TAIL= [59.599998 59.549999 59.650002 59.630001 59.02    ]
         MRK       Date
0  34.930000 2011-07-28
1  34.130001 2011-07-29
2  33.439999 2011-08-01
3  32.900002 2011-08-02
4  32.700001 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   MRK     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['MRK'], 'Transformations': [('MRK', 'None', '_', 'T+S+R'), ('MRK', 'None', 'Diff_', 'T+S+R'), ('MRK', 'None', 'RelDiff_', 'T+S+R'), ('MRK', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MRK', 'Transformation': '_MRK'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.429, ('TRAINING', {'Signal': 'MRK', 'Transformation': '_MRK'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MRK', 'Transformation': 'Diff_MRK'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.896, ('TRAINING', {'Signal': 'MRK', 'Transformation': 'Diff_MRK'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MRK', 'Transformation': 'RelDiff_MRK'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.148, ('TRAINING', {'Signal': 'MRK', 'Transformation': 'RelDiff_MRK'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MRK', 'Transformation': 'CumSum_MRK'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.805, ('TRAINING', {'Signal': 'MRK', 'Transformation': 'CumSum_MRK'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.279, ('SIGNAL_TRAINING', {'Signals': ['MRK'], 'Transformations': [('MRK', 'None', '_', 'T+S+R'), ('MRK', 'None', 'Diff_', 'T+S+R'), ('MRK', 'None', 'RelDiff_', 'T+S+R'), ('MRK', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['MRK'], 'Transformations': [('MRK', [('MRK', 'None', 'CumSum_', 'T+S+R'), ('MRK', 'None', 'Diff_', 'T+S+R'), ('MRK', 'None', 'RelDiff_', 'T+S+R'), ('MRK', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'MRK', 'Transformations': [('MRK', 'None', 'CumSum_', 'T+S+R'), ('MRK', 'None', 'Diff_', 'T+S+R'), ('MRK', 'None', 'RelDiff_', 'T+S+R'), ('MRK', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'MRK', 'Transformations': [('MRK', 'None', 'CumSum_', 'T+S+R'), ('MRK', 'None', 'Diff_', 'T+S+R'), ('MRK', 'None', 'RelDiff_', 'T+S+R'), ('MRK', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MRK', 'Model': '_MRK_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MRK', 'Model': '_MRK_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MRK'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.209, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MRK'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.243, ('FINALIZE_TRAINING', {'Signals': ['MRK'], 'Transformations': [('MRK', [('MRK', 'None', 'CumSum_', 'T+S+R'), ('MRK', 'None', 'Diff_', 'T+S+R'), ('MRK', 'None', 'RelDiff_', 'T+S+R'), ('MRK', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='MRK' Length=1251  Min=29.809999 Max=63.029999  Mean=49.320919227018365 StdDev=8.35251077313253
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_MRK' Min=0.0 Max=1.0  Mean=0.587324510145045 StdDev=0.2514301858257834
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_MRK_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_MRK_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_MRK_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_MRK_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0086 MAPE_Forecast=0.0105 MAPE_Test=0.0039
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0086 SMAPE_Forecast=0.0105 SMAPE_Test=0.0039
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9983 MASE_Test=1.3224
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=2.658048150019836 CRPS_Forecast=0.7750213271102292 CRPS_Test=0.10071457142857147
INFO:pyaf.std:MODEL_L1 L1_Fit=0.40812064221105515 L1_Forecast=0.5599597831325299 L1_Test=0.23142842857142756
INFO:pyaf.std:MODEL_L2 L2_Fit=0.5590942573537153 L2_Forecast=0.7457884123979049 L2_Test=0.33329513733990807
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.138151040539018 LnQ_Forecast=0.0486887790067385 LnQ_Test=0.00022163414667749324
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.3099979999999931 MedAE_Forecast=0.43999900000000025 MedAE_Test=0.10000300000000095
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.1541240517760385
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _MRK_Lag1Trend_residue_bestCycle_byMAPE None 0.0009030403371462215 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ...   FitMAPE ForecastMAPE     TestMAPE
0    None           _MRK             T+S+R  ...    0.0085       0.0103       0.0042
1    None           _MRK             T+S+R  ...    0.0084       0.0103       0.0042
2    None           _MRK             T+S+R  ...    0.0085       0.0104       0.0036
3    None           _MRK             T+S+R  ...    0.0085       0.0104       0.0036
4    None       Diff_MRK             T+S+R  ...    0.0086       0.0104       0.0034
..    ...            ...               ...  ...       ...          ...          ...
219  None    RelDiff_MRK             T+S+R  ...  141.7187     906.2912    7379.3317
220  None    RelDiff_MRK             T+S+R  ...   71.5874    2538.2932    5952.0034
221  None    RelDiff_MRK             T+S+R  ...   71.5874    2538.2932    5952.0034
222  None    RelDiff_MRK             T+S+R  ...  577.3165   19928.4750  182401.1889
223  None    RelDiff_MRK             T+S+R  ...  577.3165   19928.4750  182401.1889

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _MRK             T+S+R  ...  0.0085       0.0103   0.0042
1  None           _MRK             T+S+R  ...  0.0084       0.0103   0.0042
2  None           _MRK             T+S+R  ...  0.0085       0.0104   0.0036
3  None           _MRK             T+S+R  ...  0.0085       0.0104   0.0036
4  None       Diff_MRK             T+S+R  ...  0.0086       0.0104   0.0034

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['MRK'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.189, ('FORECASTING', {'Signals': ['MRK'], 'Horizon': 7}))
7 0    58.660000
1    58.790001
2    58.790001
3    58.820000
4    58.560001
5    58.360001
6    58.599998
Name: MRK, dtype: float64
7 0    59.02
1    59.02
2    59.02
3    59.02
4    59.02
5    59.02
6    59.02
Name: MRK_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_MRK MRK [58.66, 58.790001, 58.790001, 58.82, 58.560001, 58.360001, 58.599998]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_MRK MRK [59.02, 59.02, 59.02, 59.02, 59.02, 59.02, 59.02]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_MRK MRK 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_MRK MRK 12.81197476387024
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_MRK MRK Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_MRK MRK 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_MRK MRK 0.0062 0.0062 2.5515
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_MRK MRK 0.3657140000000051 0.39623198832574735 -5.751790806734885
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nyworldlead_MRK_7'
