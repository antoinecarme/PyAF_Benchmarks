BENCH_DATA YAHOO_STOCKS_nyworldlead
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  MO N= 1251 H= 7 HEAD= [26.23     26.299999 26.15     26.18     26.360001] TAIL= [68.870003 69.080002 68.919998 69.410004 69.169998]
          MO       Date
0  26.230000 2011-07-28
1  26.299999 2011-07-29
2  26.150000 2011-08-01
3  26.180000 2011-08-02
4  26.360001 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   MO      1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['MO'], 'Transformations': [('MO', 'None', '_', 'T+S+R'), ('MO', 'None', 'Diff_', 'T+S+R'), ('MO', 'None', 'RelDiff_', 'T+S+R'), ('MO', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MO', 'Transformation': '_MO'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.549, ('TRAINING', {'Signal': 'MO', 'Transformation': '_MO'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MO', 'Transformation': 'Diff_MO'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.782, ('TRAINING', {'Signal': 'MO', 'Transformation': 'Diff_MO'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MO', 'Transformation': 'RelDiff_MO'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.101, ('TRAINING', {'Signal': 'MO', 'Transformation': 'RelDiff_MO'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MO', 'Transformation': 'CumSum_MO'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.724, ('TRAINING', {'Signal': 'MO', 'Transformation': 'CumSum_MO'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.158, ('SIGNAL_TRAINING', {'Signals': ['MO'], 'Transformations': [('MO', 'None', '_', 'T+S+R'), ('MO', 'None', 'Diff_', 'T+S+R'), ('MO', 'None', 'RelDiff_', 'T+S+R'), ('MO', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['MO'], 'Transformations': [('MO', [('MO', 'None', 'CumSum_', 'T+S+R'), ('MO', 'None', 'Diff_', 'T+S+R'), ('MO', 'None', 'RelDiff_', 'T+S+R'), ('MO', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'MO', 'Transformations': [('MO', 'None', 'CumSum_', 'T+S+R'), ('MO', 'None', 'Diff_', 'T+S+R'), ('MO', 'None', 'RelDiff_', 'T+S+R'), ('MO', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'MO', 'Transformations': [('MO', 'None', 'CumSum_', 'T+S+R'), ('MO', 'None', 'Diff_', 'T+S+R'), ('MO', 'None', 'RelDiff_', 'T+S+R'), ('MO', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MO', 'Model': '_MO_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.026, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MO', 'Model': '_MO_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MO'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.182, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MO'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.216, ('FINALIZE_TRAINING', {'Signals': ['MO'], 'Transformations': [('MO', [('MO', 'None', 'CumSum_', 'T+S+R'), ('MO', 'None', 'Diff_', 'T+S+R'), ('MO', 'None', 'RelDiff_', 'T+S+R'), ('MO', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='MO' Length=1251  Min=24.360001 Max=69.870003  Mean=42.143948864908054 StdDev=11.439729848163777
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_MO' Min=0.0 Max=1.0  Mean=0.3907700963165869 StdDev=0.2513673773990119
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_MO_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_MO_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_MO_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_MO_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0075 MAPE_Forecast=0.0082 MAPE_Test=0.0055
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0075 SMAPE_Forecast=0.0082 SMAPE_Test=0.0055
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9962 MASE_Test=1.0694
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=2.239155871606718 CRPS_Forecast=1.1471995687206236 CRPS_Test=0.16928649999999937
INFO:pyaf.std:MODEL_L1 L1_Fit=0.2837587296482411 L1_Forecast=0.481646413654619 L1_Test=0.3814307142857091
INFO:pyaf.std:MODEL_L2 L2_Fit=0.3847515017944326 L2_Forecast=0.6428503667102963 L2_Test=0.4854907149459304
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.10092491181442913 LnQ_Forecast=0.030410623968957114 LnQ_Test=0.0003430229411782469
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.2200019999999938 MedAE_Forecast=0.3899990000000031 MedAE_Test=0.24000599999999395
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0410898465792201
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _MO_Lag1Trend_residue_bestCycle_byMAPE None 0.0008789496427619725 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None            _MO             T+S+R  ...  0.0075       0.0081   0.0054
1    None            _MO             T+S+R  ...  0.0075       0.0081   0.0054
2    None            _MO             T+S+R  ...  0.0075       0.0081   0.0054
3    None        Diff_MO             T+S+R  ...  0.0075       0.0081   0.0051
4    None        Diff_MO             T+S+R  ...  0.0075       0.0081   0.0051
..    ...            ...               ...  ...     ...          ...      ...
219  None     RelDiff_MO             T+S+R  ...  2.9840      16.0778  52.1747
220  None     RelDiff_MO             T+S+R  ...  2.9840      16.0778  52.1747
221  None     RelDiff_MO             T+S+R  ...  2.6429      17.5897  79.1328
222  None     RelDiff_MO             T+S+R  ...  2.6631      18.1806  82.7980
223  None     RelDiff_MO             T+S+R  ...  2.6631      18.1806  82.7980

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None            _MO             T+S+R  ...  0.0075       0.0081   0.0054
1  None            _MO             T+S+R  ...  0.0075       0.0081   0.0054
2  None            _MO             T+S+R  ...  0.0075       0.0081   0.0054
3  None        Diff_MO             T+S+R  ...  0.0075       0.0081   0.0051
4  None        Diff_MO             T+S+R  ...  0.0075       0.0081   0.0051

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['MO'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.159, ('FORECASTING', {'Signals': ['MO'], 'Horizon': 7}))
7 0    69.220001
1    69.010002
2    68.730003
3    68.860001
4    68.800003
5    67.930000
6    66.750000
Name: MO, dtype: float64
7 0    69.169998
1    69.169998
2    69.169998
3    69.169998
4    69.169998
5    69.169998
6    69.169998
Name: MO_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_MO MO [69.220001, 69.010002, 68.730003, 68.860001, 68.800003, 67.93, 66.75]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_MO MO [69.169998, 69.169998, 69.169998, 69.169998, 69.169998, 69.169998, 69.169998]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_MO MO 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_MO MO 12.638855934143066
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_MO MO Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_MO MO 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_MO MO 0.0105 0.0104 1.5667
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_MO MO 0.7128545714285751 1.0588858308950464 -0.770633166150243
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nyworldlead_MO_7'
