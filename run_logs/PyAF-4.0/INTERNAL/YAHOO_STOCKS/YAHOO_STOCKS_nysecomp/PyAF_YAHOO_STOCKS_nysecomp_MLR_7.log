BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 1000 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  MLR N= 1000 H= 7 HEAD= [16.09     16.379999 16.629999 16.15     16.58    ] TAIL= [22.610001 22.18     21.57     21.610001 21.23    ]
         MLR       Date
0  16.090000 2011-07-28
1  16.379999 2011-07-29
2  16.629999 2011-08-01
3  16.150000 2011-08-02
4  16.580000 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1000 entries, 0 to 999
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   MLR     1000 non-null   float64       
 1   Date    1000 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 23.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['MLR'], 'Transformations': [('MLR', 'None', '_', 'T+S+R'), ('MLR', 'None', 'Diff_', 'T+S+R'), ('MLR', 'None', 'RelDiff_', 'T+S+R'), ('MLR', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MLR', 'Transformation': '_MLR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.385, ('TRAINING', {'Signal': 'MLR', 'Transformation': '_MLR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MLR', 'Transformation': 'Diff_MLR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.657, ('TRAINING', {'Signal': 'MLR', 'Transformation': 'Diff_MLR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MLR', 'Transformation': 'RelDiff_MLR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.983, ('TRAINING', {'Signal': 'MLR', 'Transformation': 'RelDiff_MLR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MLR', 'Transformation': 'CumSum_MLR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.68, ('TRAINING', {'Signal': 'MLR', 'Transformation': 'CumSum_MLR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.708, ('SIGNAL_TRAINING', {'Signals': ['MLR'], 'Transformations': [('MLR', 'None', '_', 'T+S+R'), ('MLR', 'None', 'Diff_', 'T+S+R'), ('MLR', 'None', 'RelDiff_', 'T+S+R'), ('MLR', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['MLR'], 'Transformations': [('MLR', [('MLR', 'None', 'CumSum_', 'T+S+R'), ('MLR', 'None', 'Diff_', 'T+S+R'), ('MLR', 'None', 'RelDiff_', 'T+S+R'), ('MLR', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'MLR', 'Transformations': [('MLR', 'None', 'CumSum_', 'T+S+R'), ('MLR', 'None', 'Diff_', 'T+S+R'), ('MLR', 'None', 'RelDiff_', 'T+S+R'), ('MLR', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'MLR', 'Transformations': [('MLR', 'None', 'CumSum_', 'T+S+R'), ('MLR', 'None', 'Diff_', 'T+S+R'), ('MLR', 'None', 'RelDiff_', 'T+S+R'), ('MLR', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MLR', 'Model': '_MLR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.026, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MLR', 'Model': '_MLR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MLR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.181, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MLR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.214, ('FINALIZE_TRAINING', {'Signals': ['MLR'], 'Transformations': [('MLR', [('MLR', 'None', 'CumSum_', 'T+S+R'), ('MLR', 'None', 'Diff_', 'T+S+R'), ('MLR', 'None', 'RelDiff_', 'T+S+R'), ('MLR', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-09-22T00:00:00.000000 TimeDelta=<DateOffset: days=2> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='MLR' Length=1000  Min=14.22 Max=25.280001  Mean=18.365679981999996 StdDev=2.626979259998989
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_MLR' Min=0.0 Max=1.0  Mean=0.37483540751940264 StdDev=0.23752070727651758
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_MLR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_MLR_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_MLR_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_MLR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0153 MAPE_Forecast=0.0145 MAPE_Test=0.0228
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0153 SMAPE_Forecast=0.0144 SMAPE_Test=0.023
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9987 MASE_Forecast=0.9979 MASE_Test=1.0761
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.7091354593540368 CRPS_Forecast=0.27767923630237856 CRPS_Test=0.21857135714285722
INFO:pyaf.std:MODEL_L1 L1_Fit=0.2722166662468513 L1_Forecast=0.305477311557789 L1_Test=0.49857200000000035
INFO:pyaf.std:MODEL_L2 L2_Fit=0.4101975120811257 L2_Forecast=0.41380136873246237 L2_Test=0.559783764375904
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.4067397707554322 LnQ_Forecast=0.07494411699670911 LnQ_Test=0.004646563573266201
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.1899999999999995 MedAE_Forecast=0.21000099999999833 MedAE_Test=0.43000100000000074
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.1690777423980341
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _MLR_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ...  ForecastMAPE      TestMAPE
0    None           _MLR  ...  1.430000e-02  2.310000e-02
1    None           _MLR  ...  1.430000e-02  2.310000e-02
2    None           _MLR  ...  1.430000e-02  2.300000e-02
3    None           _MLR  ...  1.440000e-02  2.330000e-02
4    None           _MLR  ...  1.440000e-02  2.500000e-02
..    ...            ...  ...           ...           ...
219  None    RelDiff_MLR  ...  8.921735e+06  8.604263e+06
220  None    RelDiff_MLR  ...  8.921735e+06  8.604263e+06
221  None    RelDiff_MLR  ...  8.921735e+06  8.604263e+06
222  None    RelDiff_MLR  ...  8.921735e+06  8.604263e+06
223  None    RelDiff_MLR  ...  8.921735e+06  8.604263e+06

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _MLR             T+S+R  ...  0.0148       0.0143   0.0231
1  None           _MLR             T+S+R  ...  0.0148       0.0143   0.0231
2  None           _MLR             T+S+R  ...  0.0148       0.0143   0.0230
3  None           _MLR             T+S+R  ...  0.0148       0.0144   0.0233
4  None           _MLR             T+S+R  ...  0.0145       0.0144   0.0250

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['MLR'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.145, ('FORECASTING', {'Signals': ['MLR'], 'Horizon': 7}))
7 0    21.120001
1    21.490000
2    21.730000
3    21.959999
4    21.080000
5    21.530001
6    21.940001
Name: MLR, dtype: float64
7 0    21.23
1    21.23
2    21.23
3    21.23
4    21.23
5    21.23
6    21.23
Name: MLR_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_MLR MLR [21.120001, 21.49, 21.73, 21.959999, 21.08, 21.530001, 21.940001]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_MLR MLR [21.23, 21.23, 21.23, 21.23, 21.23, 21.23, 21.23]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_MLR MLR 1000 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_MLR MLR 12.170141696929932
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_MLR MLR Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_MLR MLR 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_MLR MLR 0.0181 0.0184 0.9169
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_MLR MLR 0.394285714285714 0.4596893889206984 -0.9401917150885788
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_MLR_7'
