BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  PPS N= 1251 H= 7 HEAD= [42.029999 42.400002 42.220001 41.669998 40.93    ] TAIL= [62.169998 62.389999 62.130001 62.07     62.049999]
         PPS       Date
0  42.029999 2011-07-28
1  42.400002 2011-07-29
2  42.220001 2011-08-01
3  41.669998 2011-08-02
4  40.930000 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   PPS     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['PPS'], 'Transformations': [('PPS', 'None', '_', 'T+S+R'), ('PPS', 'None', 'Diff_', 'T+S+R'), ('PPS', 'None', 'RelDiff_', 'T+S+R'), ('PPS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'PPS', 'Transformation': '_PPS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.211, ('TRAINING', {'Signal': 'PPS', 'Transformation': '_PPS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'PPS', 'Transformation': 'Diff_PPS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.723, ('TRAINING', {'Signal': 'PPS', 'Transformation': 'Diff_PPS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'PPS', 'Transformation': 'RelDiff_PPS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.271, ('TRAINING', {'Signal': 'PPS', 'Transformation': 'RelDiff_PPS'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'PPS', 'Transformation': 'CumSum_PPS'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.739, ('TRAINING', {'Signal': 'PPS', 'Transformation': 'CumSum_PPS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.945, ('SIGNAL_TRAINING', {'Signals': ['PPS'], 'Transformations': [('PPS', 'None', '_', 'T+S+R'), ('PPS', 'None', 'Diff_', 'T+S+R'), ('PPS', 'None', 'RelDiff_', 'T+S+R'), ('PPS', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['PPS'], 'Transformations': [('PPS', [('PPS', 'None', 'CumSum_', 'T+S+R'), ('PPS', 'None', 'Diff_', 'T+S+R'), ('PPS', 'None', 'RelDiff_', 'T+S+R'), ('PPS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'PPS', 'Transformations': [('PPS', 'None', 'CumSum_', 'T+S+R'), ('PPS', 'None', 'Diff_', 'T+S+R'), ('PPS', 'None', 'RelDiff_', 'T+S+R'), ('PPS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'PPS', 'Transformations': [('PPS', 'None', 'CumSum_', 'T+S+R'), ('PPS', 'None', 'Diff_', 'T+S+R'), ('PPS', 'None', 'RelDiff_', 'T+S+R'), ('PPS', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'PPS', 'Model': '_PPS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'PPS', 'Model': '_PPS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'PPS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.184, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'PPS'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.218, ('FINALIZE_TRAINING', {'Signals': ['PPS'], 'Transformations': [('PPS', [('PPS', 'None', 'CumSum_', 'T+S+R'), ('PPS', 'None', 'Diff_', 'T+S+R'), ('PPS', 'None', 'RelDiff_', 'T+S+R'), ('PPS', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='PPS' Length=1251  Min=32.799999 Max=63.34  Mean=51.13940847561951 StdDev=6.168413011277237
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_PPS' Min=0.0 Max=1.0  Mean=0.6005045473187607 StdDev=0.201978153546139
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_PPS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_PPS_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_PPS_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_PPS_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0094 MAPE_Forecast=0.0096 MAPE_Test=0.004
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0094 SMAPE_Forecast=0.0096 SMAPE_Test=0.004
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9972 MASE_Test=1.373
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=1.6133731621462577 CRPS_Forecast=0.4994700715577604 CRPS_Test=0.14285678571428612
INFO:pyaf.std:MODEL_L1 L1_Fit=0.4460805216080401 L1_Forecast=0.5591966425702811 L1_Test=0.24714271428571521
INFO:pyaf.std:MODEL_L2 L2_Fit=0.6170595939090623 L2_Forecast=0.7105965817616048 L2_Test=0.31881490376101157
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.18570219568532342 LnQ_Forecast=0.03768044720061352 LnQ_Test=0.00018745014551606873
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.3200000000000003 MedAE_Forecast=0.48999799999999993 MedAE_Test=0.22000100000000344
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.30222657818511517
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _PPS_Lag1Trend_residue_bestCycle_byMAPE None 0.0006549115699112651 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ...  ForecastMAPE      TestMAPE
0    None           _PPS  ...  9.500000e-03  4.100000e-03
1    None           _PPS  ...  9.500000e-03  4.300000e-03
2    None           _PPS  ...  9.600000e-03  4.000000e-03
3    None           _PPS  ...  9.600000e-03  4.000000e-03
4    None     CumSum_PPS  ...  9.600000e-03  4.000000e-03
..    ...            ...  ...           ...           ...
219  None    RelDiff_PPS  ...  3.308524e+05  8.063687e+06
220  None    RelDiff_PPS  ...  3.421631e+05  8.369392e+06
221  None    RelDiff_PPS  ...  3.421631e+05  8.369392e+06
222  None    RelDiff_PPS  ...  2.856641e+06  1.487013e+07
223  None    RelDiff_PPS  ...  2.856641e+06  1.487013e+07

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _PPS             T+S+R  ...  0.0091       0.0095   0.0041
1  None           _PPS             T+S+R  ...  0.0089       0.0095   0.0043
2  None           _PPS             T+S+R  ...  0.0094       0.0096   0.0040
3  None           _PPS             T+S+R  ...  0.0094       0.0096   0.0040
4  None     CumSum_PPS             T+S+R  ...  0.0096       0.0096   0.0040

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['PPS'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.154, ('FORECASTING', {'Signals': ['PPS'], 'Horizon': 7}))
7 0    62.450001
1    62.400002
2    62.849998
3    63.470001
4    63.349998
5    63.070000
6    61.980000
Name: PPS, dtype: float64
7 0    62.049999
1    62.049999
2    62.049999
3    62.049999
4    62.049999
5    62.049999
6    62.049999
Name: PPS_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_PPS PPS [62.450001, 62.400002, 62.849998, 63.470001, 63.349998, 63.07, 61.98]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_PPS PPS [62.049999, 62.049999, 62.049999, 62.049999, 62.049999, 62.049999, 62.049999]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_PPS PPS 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_PPS PPS 12.420007705688477
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_PPS PPS Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_PPS PPS 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_PPS PPS 0.0121 0.0122 1.7603
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_PPS PPS 0.7657150000000011 0.9003338333260464 -2.1849510438340025
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_PPS_7'
