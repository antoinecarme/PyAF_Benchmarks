BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  LEE N= 1251 H= 7 HEAD= [0.95 0.91 0.92 0.88 0.94] TAIL= [1.98 1.98 2.04 2.02 2.02]
    LEE       Date
0  0.95 2011-07-28
1  0.91 2011-07-29
2  0.92 2011-08-01
3  0.88 2011-08-02
4  0.94 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   LEE     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['LEE'], 'Transformations': [('LEE', 'None', '_', 'T+S+R'), ('LEE', 'None', 'Diff_', 'T+S+R'), ('LEE', 'None', 'RelDiff_', 'T+S+R'), ('LEE', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'LEE', 'Transformation': '_LEE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.558, ('TRAINING', {'Signal': 'LEE', 'Transformation': '_LEE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'LEE', 'Transformation': 'Diff_LEE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.468, ('TRAINING', {'Signal': 'LEE', 'Transformation': 'Diff_LEE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'LEE', 'Transformation': 'RelDiff_LEE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.149, ('TRAINING', {'Signal': 'LEE', 'Transformation': 'RelDiff_LEE'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'LEE', 'Transformation': 'CumSum_LEE'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.774, ('TRAINING', {'Signal': 'LEE', 'Transformation': 'CumSum_LEE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.951, ('SIGNAL_TRAINING', {'Signals': ['LEE'], 'Transformations': [('LEE', 'None', '_', 'T+S+R'), ('LEE', 'None', 'Diff_', 'T+S+R'), ('LEE', 'None', 'RelDiff_', 'T+S+R'), ('LEE', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['LEE'], 'Transformations': [('LEE', [('LEE', 'None', 'CumSum_', 'T+S+R'), ('LEE', 'None', 'Diff_', 'T+S+R'), ('LEE', 'None', 'RelDiff_', 'T+S+R'), ('LEE', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'LEE', 'Transformations': [('LEE', 'None', 'CumSum_', 'T+S+R'), ('LEE', 'None', 'Diff_', 'T+S+R'), ('LEE', 'None', 'RelDiff_', 'T+S+R'), ('LEE', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'LEE', 'Transformations': [('LEE', 'None', 'CumSum_', 'T+S+R'), ('LEE', 'None', 'Diff_', 'T+S+R'), ('LEE', 'None', 'RelDiff_', 'T+S+R'), ('LEE', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'LEE', 'Model': '_LEE_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.03, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'LEE', 'Model': '_LEE_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'LEE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.184, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'LEE'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FINALIZE_TRAINING', {'Signals': ['LEE'], 'Transformations': [('LEE', [('LEE', 'None', 'CumSum_', 'T+S+R'), ('LEE', 'None', 'Diff_', 'T+S+R'), ('LEE', 'None', 'RelDiff_', 'T+S+R'), ('LEE', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='LEE' Length=1251  Min=0.53 Max=5.3  Mean=2.3004076738609114 StdDev=1.16857626934285
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_LEE' Min=0.0 Max=1.0  Mean=0.3711546486081575 StdDev=0.24498454283917137
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_LEE_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_LEE_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_LEE_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_LEE_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0256 MAPE_Forecast=0.0275 MAPE_Test=0.01
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0258 SMAPE_Forecast=0.0275 SMAPE_Test=0.0101
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9975 MASE_Test=0.9231
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.37915128272943666 CRPS_Forecast=0.11218085518544767 CRPS_Test=0.01857142857142859
INFO:pyaf.std:MODEL_L1 L1_Fit=0.055829145728643226 L1_Forecast=0.051566265060240965 L1_Test=0.020000000000000018
INFO:pyaf.std:MODEL_L2 L2_Fit=0.08497649689841086 L2_Forecast=0.0731340849229006 L2_Test=0.030705978943149567
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=1.7273390938226272 LnQ_Forecast=0.37088306881641847 LnQ_Test=0.0016694281123366208
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.03000000000000025 MedAE_Forecast=0.040000000000000036 MedAE_Test=0.010000000000000009
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0880503144654088
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _LEE_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ... ForecastMAPE     TestMAPE
0    None           _LEE  ...       0.0275       0.0100
1    None     CumSum_LEE  ...       0.0275       0.0100
2    None       Diff_LEE  ...       0.0275       0.0100
3    None       Diff_LEE  ...       0.0275       0.0100
4    None    RelDiff_LEE  ...       0.0275       0.0100
..    ...            ...  ...          ...          ...
211  None    RelDiff_LEE  ...    8398.3862   69906.4712
212  None    RelDiff_LEE  ...   19319.8453   49512.8229
213  None    RelDiff_LEE  ...   19319.8453   49512.8229
214  None    RelDiff_LEE  ...   22165.3109  111885.0880
215  None    RelDiff_LEE  ...   22165.3109  111885.0880

[216 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _LEE             T+S+R  ...  0.0256       0.0275     0.01
1  None     CumSum_LEE             T+S+R  ...  0.0260       0.0275     0.01
2  None       Diff_LEE             T+S+R  ...  0.0256       0.0275     0.01
3  None       Diff_LEE             T+S+R  ...  0.0256       0.0275     0.01
4  None    RelDiff_LEE             T+S+R  ...  0.0631       0.0275     0.01

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['LEE'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.152, ('FORECASTING', {'Signals': ['LEE'], 'Horizon': 7}))
7 0    2.01
1    1.99
2    1.95
3    1.93
4    1.92
5    1.93
6    1.89
Name: LEE, dtype: float64
7 0    2.02
1    2.02
2    2.02
3    2.02
4    2.02
5    2.02
6    2.02
Name: LEE_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_LEE LEE [2.01, 1.99, 1.95, 1.93, 1.92, 1.93, 1.89]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_LEE LEE [2.02, 2.02, 2.02, 2.02, 2.02, 2.02, 2.02]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_LEE LEE 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_LEE LEE 12.434937953948975
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_LEE LEE Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_LEE LEE 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_LEE LEE 0.0386 0.0377 3.1837
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_LEE LEE 0.07428571428571439 0.08366600265340764 -3.7245178607828997
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_LEE_7'
