BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  MLP N= 1251 H= 7 HEAD= [4.87 5.19 4.99 4.7  5.02] TAIL= [6.49 6.62 6.51 6.48 6.55]
    MLP       Date
0  4.87 2011-07-28
1  5.19 2011-07-29
2  4.99 2011-08-01
3  4.70 2011-08-02
4  5.02 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   MLP     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['MLP'], 'Transformations': [('MLP', 'None', '_', 'T+S+R'), ('MLP', 'None', 'Diff_', 'T+S+R'), ('MLP', 'None', 'RelDiff_', 'T+S+R'), ('MLP', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MLP', 'Transformation': '_MLP'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.504, ('TRAINING', {'Signal': 'MLP', 'Transformation': '_MLP'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MLP', 'Transformation': 'Diff_MLP'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.774, ('TRAINING', {'Signal': 'MLP', 'Transformation': 'Diff_MLP'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MLP', 'Transformation': 'RelDiff_MLP'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.153, ('TRAINING', {'Signal': 'MLP', 'Transformation': 'RelDiff_MLP'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MLP', 'Transformation': 'CumSum_MLP'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.801, ('TRAINING', {'Signal': 'MLP', 'Transformation': 'CumSum_MLP'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.233, ('SIGNAL_TRAINING', {'Signals': ['MLP'], 'Transformations': [('MLP', 'None', '_', 'T+S+R'), ('MLP', 'None', 'Diff_', 'T+S+R'), ('MLP', 'None', 'RelDiff_', 'T+S+R'), ('MLP', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['MLP'], 'Transformations': [('MLP', [('MLP', 'None', 'CumSum_', 'T+S+R'), ('MLP', 'None', 'Diff_', 'T+S+R'), ('MLP', 'None', 'RelDiff_', 'T+S+R'), ('MLP', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'MLP', 'Transformations': [('MLP', 'None', 'CumSum_', 'T+S+R'), ('MLP', 'None', 'Diff_', 'T+S+R'), ('MLP', 'None', 'RelDiff_', 'T+S+R'), ('MLP', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'MLP', 'Transformations': [('MLP', 'None', 'CumSum_', 'T+S+R'), ('MLP', 'None', 'Diff_', 'T+S+R'), ('MLP', 'None', 'RelDiff_', 'T+S+R'), ('MLP', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MLP', 'Model': '_MLP_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MLP', 'Model': '_MLP_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MLP'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.19, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MLP'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.225, ('FINALIZE_TRAINING', {'Signals': ['MLP'], 'Transformations': [('MLP', [('MLP', 'None', 'CumSum_', 'T+S+R'), ('MLP', 'None', 'Diff_', 'T+S+R'), ('MLP', 'None', 'RelDiff_', 'T+S+R'), ('MLP', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='MLP' Length=1251  Min=1.9 Max=9.0  Mean=5.035971223021574 StdDev=1.2799714272153235
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_MLP' Min=0.0 Max=1.0  Mean=0.44168608774951884 StdDev=0.18027766580497534
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_MLP_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_MLP_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_MLP_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_MLP_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0204 MAPE_Forecast=0.0143 MAPE_Test=0.0133
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0205 SMAPE_Forecast=0.0143 SMAPE_Test=0.0133
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0009 MASE_Test=0.9683
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.3984644670722032 CRPS_Forecast=0.11608362485235059 CRPS_Test=0.03428571428571451
INFO:pyaf.std:MODEL_L1 L1_Fit=0.09818090452261306 L1_Forecast=0.08104417670682733 L1_Test=0.08714285714285719
INFO:pyaf.std:MODEL_L2 L2_Fit=0.15372853447411053 L2_Forecast=0.1365760302842075 L2_Test=0.09250482612892635
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.9222765998045279 LnQ_Forecast=0.13289372343581474 LnQ_Test=0.0013860622799978864
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0699999999999994 MedAE_Forecast=0.040000000000000924 MedAE_Test=0.08999999999999986
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.41830985915492963
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _MLP_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None           _MLP             T+S+R  ...  0.0204       0.0143   0.0133
1    None           _MLP             T+S+R  ...  0.0204       0.0143   0.0133
2    None     CumSum_MLP             T+S+R  ...  0.0210       0.0143   0.0133
3    None       Diff_MLP             T+S+R  ...  0.0204       0.0143   0.0133
4    None       Diff_MLP             T+S+R  ...  0.0204       0.0143   0.0133
..    ...            ...               ...  ...     ...          ...      ...
219  None    RelDiff_MLP             T+S+R  ...  3.3670      19.0324  25.5604
220  None    RelDiff_MLP             T+S+R  ...  6.4102      22.6417  21.8667
221  None    RelDiff_MLP             T+S+R  ...  6.4102      22.6417  21.8667
222  None    RelDiff_MLP             T+S+R  ...  4.7428      30.3508  39.6595
223  None    RelDiff_MLP             T+S+R  ...  4.7428      30.3508  39.6595

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _MLP             T+S+R  ...  0.0204       0.0143   0.0133
1  None           _MLP             T+S+R  ...  0.0204       0.0143   0.0133
2  None     CumSum_MLP             T+S+R  ...  0.0210       0.0143   0.0133
3  None       Diff_MLP             T+S+R  ...  0.0204       0.0143   0.0133
4  None       Diff_MLP             T+S+R  ...  0.0204       0.0143   0.0133

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['MLP'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.157, ('FORECASTING', {'Signals': ['MLP'], 'Horizon': 7}))
7 0    6.53
1    6.50
2    6.49
3    6.49
4    6.45
5    6.45
6    6.40
Name: MLP, dtype: float64
7 0    6.55
1    6.55
2    6.55
3    6.55
4    6.55
5    6.55
6    6.55
Name: MLP_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_MLP MLP [6.53, 6.5, 6.49, 6.49, 6.45, 6.45, 6.4]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_MLP MLP [6.550000000000001, 6.550000000000001, 6.550000000000001, 6.550000000000001, 6.550000000000001, 6.550000000000001, 6.550000000000001]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_MLP MLP 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_MLP MLP 12.721865892410278
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_MLP MLP Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_MLP MLP 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_MLP MLP 0.012 0.0119 3.5604
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_MLP MLP 0.07714285714285765 0.08668497975016082 -3.806788467823141
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_MLP_7'
