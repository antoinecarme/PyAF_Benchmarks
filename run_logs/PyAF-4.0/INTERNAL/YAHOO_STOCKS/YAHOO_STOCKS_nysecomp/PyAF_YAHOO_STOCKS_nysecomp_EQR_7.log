BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  EQR N= 1251 H= 7 HEAD= [61.720001 61.82     61.41     60.009998 59.73    ] TAIL= [71.019997 70.910004 70.449997 69.57     69.82    ]
         EQR       Date
0  61.720001 2011-07-28
1  61.820000 2011-07-29
2  61.410000 2011-08-01
3  60.009998 2011-08-02
4  59.730000 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   EQR     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['EQR'], 'Transformations': [('EQR', 'None', '_', 'T+S+R'), ('EQR', 'None', 'Diff_', 'T+S+R'), ('EQR', 'None', 'RelDiff_', 'T+S+R'), ('EQR', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'EQR', 'Transformation': '_EQR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.37, ('TRAINING', {'Signal': 'EQR', 'Transformation': '_EQR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'EQR', 'Transformation': 'Diff_EQR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.856, ('TRAINING', {'Signal': 'EQR', 'Transformation': 'Diff_EQR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'EQR', 'Transformation': 'RelDiff_EQR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.09, ('TRAINING', {'Signal': 'EQR', 'Transformation': 'RelDiff_EQR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'EQR', 'Transformation': 'CumSum_EQR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.741, ('TRAINING', {'Signal': 'EQR', 'Transformation': 'CumSum_EQR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.059, ('SIGNAL_TRAINING', {'Signals': ['EQR'], 'Transformations': [('EQR', 'None', '_', 'T+S+R'), ('EQR', 'None', 'Diff_', 'T+S+R'), ('EQR', 'None', 'RelDiff_', 'T+S+R'), ('EQR', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['EQR'], 'Transformations': [('EQR', [('EQR', 'None', 'CumSum_', 'T+S+R'), ('EQR', 'None', 'Diff_', 'T+S+R'), ('EQR', 'None', 'RelDiff_', 'T+S+R'), ('EQR', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'EQR', 'Transformations': [('EQR', 'None', 'CumSum_', 'T+S+R'), ('EQR', 'None', 'Diff_', 'T+S+R'), ('EQR', 'None', 'RelDiff_', 'T+S+R'), ('EQR', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'EQR', 'Transformations': [('EQR', 'None', 'CumSum_', 'T+S+R'), ('EQR', 'None', 'Diff_', 'T+S+R'), ('EQR', 'None', 'RelDiff_', 'T+S+R'), ('EQR', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'EQR', 'Model': '_EQR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.026, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'EQR', 'Model': '_EQR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'EQR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.182, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'EQR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.216, ('FINALIZE_TRAINING', {'Signals': ['EQR'], 'Transformations': [('EQR', [('EQR', 'None', 'CumSum_', 'T+S+R'), ('EQR', 'None', 'Diff_', 'T+S+R'), ('EQR', 'None', 'RelDiff_', 'T+S+R'), ('EQR', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='EQR' Length=1251  Min=49.66 Max=81.970001  Mean=63.71242203197457 StdDev=8.55174651059196
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_EQR' Min=0.0 Max=1.0  Mean=0.4349248405153075 StdDev=0.26467800204004827
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_EQR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_EQR_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_EQR_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_EQR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0095 MAPE_Forecast=0.0105 MAPE_Test=0.007
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0095 SMAPE_Forecast=0.0105 SMAPE_Test=0.007
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9979 MASE_Test=1.3205
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=2.062028491738958 CRPS_Forecast=1.2573489711523742 CRPS_Test=0.24142842857142963
INFO:pyaf.std:MODEL_L1 L1_Fit=0.5755074924623117 L1_Forecast=0.7757832088353421 L1_Test=0.48857014285714434
INFO:pyaf.std:MODEL_L2 L2_Fit=0.7971967167586209 L2_Forecast=1.054752204216031 L2_Test=0.6136530895412912
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.17562142709918888 LnQ_Forecast=0.0513662883486691 LnQ_Test=0.0005374045652735891
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.41999799999999965 MedAE_Forecast=0.5999979999999994 MedAE_Test=0.2699970000000036
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.3732590723225297
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _EQR_Lag1Trend_residue_bestCycle_byMAPE None 0.0003095635930187579 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ...  ForecastMAPE      TestMAPE
0    None           _EQR  ...  1.050000e-02  7.000000e-03
1    None           _EQR  ...  1.050000e-02  7.000000e-03
2    None     CumSum_EQR  ...  1.050000e-02  7.000000e-03
3    None       Diff_EQR  ...  1.050000e-02  7.000000e-03
4    None       Diff_EQR  ...  1.050000e-02  7.000000e-03
..    ...            ...  ...           ...           ...
219  None    RelDiff_EQR  ...  7.578290e+05  8.436478e+06
220  None    RelDiff_EQR  ...  9.351922e+06  1.712324e+07
221  None    RelDiff_EQR  ...  9.351922e+06  1.712324e+07
222  None    RelDiff_EQR  ...  9.501034e+06  1.712324e+07
223  None    RelDiff_EQR  ...  9.501034e+06  1.712324e+07

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _EQR             T+S+R  ...  0.0095       0.0105    0.007
1  None           _EQR             T+S+R  ...  0.0095       0.0105    0.007
2  None     CumSum_EQR             T+S+R  ...  0.0097       0.0105    0.007
3  None       Diff_EQR             T+S+R  ...  0.0095       0.0105    0.007
4  None       Diff_EQR             T+S+R  ...  0.0095       0.0105    0.007

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['EQR'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.151, ('FORECASTING', {'Signals': ['EQR'], 'Horizon': 7}))
7 0    70.709999
1    70.089996
2    69.949997
3    70.320000
4    70.160004
5    69.820000
6    65.959999
Name: EQR, dtype: float64
7 0    69.82
1    69.82
2    69.82
3    69.82
4    69.82
5    69.82
6    69.82
Name: EQR_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_EQR EQR [70.709999, 70.089996, 69.949997, 70.32, 70.160004, 69.82, 65.959999]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_EQR EQR [69.82, 69.82, 69.82, 69.82, 69.82, 69.82, 69.82]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_EQR EQR 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_EQR EQR 12.526464462280273
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_EQR EQR Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_EQR EQR 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_EQR EQR 0.0127 0.0125 0.9352
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_EQR EQR 0.8557138571428595 1.5187920820762695 -0.027199234081578094
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_EQR_7'
