BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  CLX N= 1251 H= 7 HEAD= [72.690002 71.589996 71.120003 70.290001 68.879997] TAIL= [136.220001 137.059998 136.720001 136.580002 136.119995]
         CLX       Date
0  72.690002 2011-07-28
1  71.589996 2011-07-29
2  71.120003 2011-08-01
3  70.290001 2011-08-02
4  68.879997 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   CLX     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['CLX'], 'Transformations': [('CLX', 'None', '_', 'T+S+R'), ('CLX', 'None', 'Diff_', 'T+S+R'), ('CLX', 'None', 'RelDiff_', 'T+S+R'), ('CLX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'CLX', 'Transformation': '_CLX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.051, ('TRAINING', {'Signal': 'CLX', 'Transformation': '_CLX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'CLX', 'Transformation': 'Diff_CLX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.737, ('TRAINING', {'Signal': 'CLX', 'Transformation': 'Diff_CLX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'CLX', 'Transformation': 'RelDiff_CLX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.095, ('TRAINING', {'Signal': 'CLX', 'Transformation': 'RelDiff_CLX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'CLX', 'Transformation': 'CumSum_CLX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.705, ('TRAINING', {'Signal': 'CLX', 'Transformation': 'CumSum_CLX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.589, ('SIGNAL_TRAINING', {'Signals': ['CLX'], 'Transformations': [('CLX', 'None', '_', 'T+S+R'), ('CLX', 'None', 'Diff_', 'T+S+R'), ('CLX', 'None', 'RelDiff_', 'T+S+R'), ('CLX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['CLX'], 'Transformations': [('CLX', [('CLX', 'None', 'CumSum_', 'T+S+R'), ('CLX', 'None', 'Diff_', 'T+S+R'), ('CLX', 'None', 'RelDiff_', 'T+S+R'), ('CLX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'CLX', 'Transformations': [('CLX', 'None', 'CumSum_', 'T+S+R'), ('CLX', 'None', 'Diff_', 'T+S+R'), ('CLX', 'None', 'RelDiff_', 'T+S+R'), ('CLX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'CLX', 'Transformations': [('CLX', 'None', 'CumSum_', 'T+S+R'), ('CLX', 'None', 'Diff_', 'T+S+R'), ('CLX', 'None', 'RelDiff_', 'T+S+R'), ('CLX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'CLX', 'Model': '_CLX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'CLX', 'Model': '_CLX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'CLX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.182, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'CLX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.217, ('FINALIZE_TRAINING', {'Signals': ['CLX'], 'Transformations': [('CLX', [('CLX', 'None', 'CumSum_', 'T+S+R'), ('CLX', 'None', 'Diff_', 'T+S+R'), ('CLX', 'None', 'RelDiff_', 'T+S+R'), ('CLX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='CLX' Length=1251  Min=63.709999 Max=139.240005  Mean=92.62853713189452 StdDev=20.37291025733487
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_CLX' Min=0.0 Max=1.0  Mean=0.38287482900364805 StdDev=0.2697326709776095
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_CLX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_CLX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_CLX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_CLX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0069 MAPE_Forecast=0.0081 MAPE_Test=0.005
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0069 SMAPE_Forecast=0.0081 SMAPE_Test=0.005
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9962 MASE_Test=1.0425
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=4.021716179674689 CRPS_Forecast=1.9189984659252541 CRPS_Test=0.31571421428571356
INFO:pyaf.std:MODEL_L1 L1_Fit=0.5757587035175876 L1_Forecast=1.007429269076305 L1_Test=0.6828550000000015
INFO:pyaf.std:MODEL_L2 L2_Fit=0.8080786405892615 L2_Forecast=1.3571549271329006 L2_Test=0.7955757861294998
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.09562993004517392 LnQ_Forecast=0.030067590685735224 LnQ_Test=0.00023556947265780773
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.4300000000000068 MedAE_Forecast=0.75 MedAE_Test=0.6599879999999985
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.11889318531233806
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _CLX_Lag1Trend_residue_bestCycle_byMAPE None 0.0007943465541363215 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ...  ForecastMAPE     TestMAPE
0    None           _CLX  ...  8.100000e-03        0.005
1    None           _CLX  ...  8.100000e-03        0.005
2    None     CumSum_CLX  ...  8.100000e-03        0.005
3    None       Diff_CLX  ...  8.100000e-03        0.005
4    None       Diff_CLX  ...  8.100000e-03        0.005
..    ...            ...  ...           ...          ...
211  None    RelDiff_CLX  ...  2.569974e+06  6556449.954
212  None    RelDiff_CLX  ...  2.659662e+06  6556449.954
213  None    RelDiff_CLX  ...  2.776272e+06  6556449.954
214  None    RelDiff_CLX  ...  3.364149e+06  6556449.954
215  None    RelDiff_CLX  ...  3.364149e+06  6556449.954

[216 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _CLX             T+S+R  ...  0.0069       0.0081    0.005
1  None           _CLX             T+S+R  ...  0.0069       0.0081    0.005
2  None     CumSum_CLX             T+S+R  ...  0.0070       0.0081    0.005
3  None       Diff_CLX             T+S+R  ...  0.0069       0.0081    0.005
4  None       Diff_CLX             T+S+R  ...  0.0069       0.0081    0.005

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['CLX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.152, ('FORECASTING', {'Signals': ['CLX'], 'Horizon': 7}))
7 0    136.350006
1    135.350006
2    134.639999
3    135.179993
4    134.479996
5    133.889999
6    131.029999
Name: CLX, dtype: float64
7 0    136.119995
1    136.119995
2    136.119995
3    136.119995
4    136.119995
5    136.119995
6    136.119995
Name: CLX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_CLX CLX [136.350006, 135.350006, 134.639999, 135.179993, 134.479996, 133.889999, 131.029999]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_CLX CLX [136.119995, 136.119995, 136.119995, 136.119995, 136.119995, 136.119995, 136.119995]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_CLX CLX 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_CLX CLX 12.06385350227356
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_CLX CLX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_CLX CLX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_CLX CLX 0.0133 0.0131 1.658
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_CLX CLX 1.7685698571428523 2.3080702576671763 -1.1945326424764073
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_CLX_7'
