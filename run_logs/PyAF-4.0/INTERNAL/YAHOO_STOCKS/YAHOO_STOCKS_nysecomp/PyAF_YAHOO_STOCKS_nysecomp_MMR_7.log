BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 476 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2013-05-20T00:00:00.000000000' '2013-05-21T00:00:00.000000000'
 '2013-05-22T00:00:00.000000000' '2013-05-23T00:00:00.000000000'
 '2013-05-24T00:00:00.000000000']
SIGNAL :  MMR N= 476 H= 7 HEAD= [16.86 16.84 16.74 15.88 15.82] TAIL= [16.84 16.86 16.83 16.78 16.78]
     MMR       Date
0  16.86 2011-07-28
1  16.84 2011-07-29
2  16.74 2011-08-01
3  15.88 2011-08-02
4  15.82 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 476 entries, 0 to 475
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   MMR     476 non-null    float64       
 1   Date    476 non-null    datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 11.2 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['MMR'], 'Transformations': [('MMR', 'None', '_', 'T+S+R'), ('MMR', 'None', 'Diff_', 'T+S+R'), ('MMR', 'None', 'RelDiff_', 'T+S+R'), ('MMR', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MMR', 'Transformation': '_MMR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.675, ('TRAINING', {'Signal': 'MMR', 'Transformation': '_MMR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MMR', 'Transformation': 'Diff_MMR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.441, ('TRAINING', {'Signal': 'MMR', 'Transformation': 'Diff_MMR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MMR', 'Transformation': 'RelDiff_MMR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.426, ('TRAINING', {'Signal': 'MMR', 'Transformation': 'RelDiff_MMR'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MMR', 'Transformation': 'CumSum_MMR'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.202, ('TRAINING', {'Signal': 'MMR', 'Transformation': 'CumSum_MMR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 8.747, ('SIGNAL_TRAINING', {'Signals': ['MMR'], 'Transformations': [('MMR', 'None', '_', 'T+S+R'), ('MMR', 'None', 'Diff_', 'T+S+R'), ('MMR', 'None', 'RelDiff_', 'T+S+R'), ('MMR', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['MMR'], 'Transformations': [('MMR', [('MMR', 'None', 'CumSum_', 'T+S+R'), ('MMR', 'None', 'Diff_', 'T+S+R'), ('MMR', 'None', 'RelDiff_', 'T+S+R'), ('MMR', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'MMR', 'Transformations': [('MMR', 'None', 'CumSum_', 'T+S+R'), ('MMR', 'None', 'Diff_', 'T+S+R'), ('MMR', 'None', 'RelDiff_', 'T+S+R'), ('MMR', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'MMR', 'Transformations': [('MMR', 'None', 'CumSum_', 'T+S+R'), ('MMR', 'None', 'Diff_', 'T+S+R'), ('MMR', 'None', 'RelDiff_', 'T+S+R'), ('MMR', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MMR', 'Model': '_MMR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.025, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MMR', 'Model': '_MMR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MMR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.163, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MMR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.196, ('FINALIZE_TRAINING', {'Signals': ['MMR'], 'Transformations': [('MMR', [('MMR', 'None', 'CumSum_', 'T+S+R'), ('MMR', 'None', 'Diff_', 'T+S+R'), ('MMR', 'None', 'RelDiff_', 'T+S+R'), ('MMR', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2013-01-03T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='MMR' Length=476  Min=7.99 Max=16.86  Mean=13.215126050420164 StdDev=2.42135626469586
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_MMR' Min=0.0 Max=1.0  Mean=0.5890784724261747 StdDev=0.2729826679476729
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_MMR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_MMR_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_MMR_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_MMR_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0297 MAPE_Forecast=0.0039 MAPE_Test=0.0019
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0299 SMAPE_Forecast=0.0039 SMAPE_Test=0.0019
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9973 MASE_Forecast=1.0134 MASE_Test=0.9429
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.6086012631578948 CRPS_Forecast=0.07414393853427896 CRPS_Test=0.022857142857142878
INFO:pyaf.std:MODEL_L1 L1_Fit=0.36071999999999993 L1_Forecast=0.06287234042553182 L1_Test=0.031428571428571264
INFO:pyaf.std:MODEL_L2 L2_Fit=0.6046965079001752 L2_Forecast=0.08916277250063497 L2_Test=0.04208834246473169
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.9789778662806211 LnQ_Forecast=0.0028193805949471946 LnQ_Test=4.393501657858065e-05
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.2699999999999996 MedAE_Forecast=0.040000000000000924 MedAE_Test=0.019999999999999574
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 1.0
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _MMR_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ...  ForecastMAPE      TestMAPE
0    None           _MMR  ...  3.900000e-03  1.900000e-03
1    None           _MMR  ...  3.900000e-03  1.900000e-03
2    None     CumSum_MMR  ...  3.900000e-03  1.900000e-03
3    None       Diff_MMR  ...  3.900000e-03  1.900000e-03
4    None       Diff_MMR  ...  3.900000e-03  1.900000e-03
..    ...            ...  ...           ...           ...
171  None    RelDiff_MMR  ...  1.796411e+07  5.280695e+07
172  None    RelDiff_MMR  ...  1.922163e+07  5.280695e+07
173  None    RelDiff_MMR  ...  5.461421e+07  5.280695e+07
174  None    RelDiff_MMR  ...  5.461421e+07  5.280695e+07
175  None    RelDiff_MMR  ...  5.461421e+07  5.280695e+07

[176 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _MMR             T+S+R  ...  0.0297       0.0039   0.0019
1  None           _MMR             T+S+R  ...  0.0297       0.0039   0.0019
2  None     CumSum_MMR             T+S+R  ...  0.0311       0.0039   0.0019
3  None       Diff_MMR             T+S+R  ...  0.0297       0.0039   0.0019
4  None       Diff_MMR             T+S+R  ...  0.0297       0.0039   0.0019

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['MMR'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.129, ('FORECASTING', {'Signals': ['MMR'], 'Horizon': 7}))
7 0    16.78
1    16.82
2    16.85
3    16.76
4    16.63
5    16.75
6    16.75
Name: MMR, dtype: float64
7 0    16.78
1    16.78
2    16.78
3    16.78
4    16.78
5    16.78
6    16.78
Name: MMR_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_MMR MMR [16.78, 16.82, 16.85, 16.76, 16.63, 16.75, 16.75]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_MMR MMR [16.78, 16.78, 16.78, 16.78, 16.78, 16.78, 16.78]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_MMR MMR 476 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_MMR MMR 9.172022342681885
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_MMR MMR Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_MMR MMR 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_MMR MMR 0.0029 0.0029 0.7108
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_MMR MMR 0.04857142857142906 0.0667618368317032 -0.07058823162053462
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_MMR_7'
