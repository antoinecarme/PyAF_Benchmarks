BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  DAN N= 1251 H= 7 HEAD= [16.379999 16.67     16.549999 15.72     15.55    ] TAIL= [11.33 11.38 11.56 11.52 11.76]
         DAN       Date
0  16.379999 2011-07-28
1  16.670000 2011-07-29
2  16.549999 2011-08-01
3  15.720000 2011-08-02
4  15.550000 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   DAN     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['DAN'], 'Transformations': [('DAN', 'None', '_', 'T+S+R'), ('DAN', 'None', 'Diff_', 'T+S+R'), ('DAN', 'None', 'RelDiff_', 'T+S+R'), ('DAN', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DAN', 'Transformation': '_DAN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.4, ('TRAINING', {'Signal': 'DAN', 'Transformation': '_DAN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DAN', 'Transformation': 'Diff_DAN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.765, ('TRAINING', {'Signal': 'DAN', 'Transformation': 'Diff_DAN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DAN', 'Transformation': 'RelDiff_DAN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.122, ('TRAINING', {'Signal': 'DAN', 'Transformation': 'RelDiff_DAN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DAN', 'Transformation': 'CumSum_DAN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.736, ('TRAINING', {'Signal': 'DAN', 'Transformation': 'CumSum_DAN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.025, ('SIGNAL_TRAINING', {'Signals': ['DAN'], 'Transformations': [('DAN', 'None', '_', 'T+S+R'), ('DAN', 'None', 'Diff_', 'T+S+R'), ('DAN', 'None', 'RelDiff_', 'T+S+R'), ('DAN', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['DAN'], 'Transformations': [('DAN', [('DAN', 'None', 'CumSum_', 'T+S+R'), ('DAN', 'None', 'Diff_', 'T+S+R'), ('DAN', 'None', 'RelDiff_', 'T+S+R'), ('DAN', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'DAN', 'Transformations': [('DAN', 'None', 'CumSum_', 'T+S+R'), ('DAN', 'None', 'Diff_', 'T+S+R'), ('DAN', 'None', 'RelDiff_', 'T+S+R'), ('DAN', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'DAN', 'Transformations': [('DAN', 'None', 'CumSum_', 'T+S+R'), ('DAN', 'None', 'Diff_', 'T+S+R'), ('DAN', 'None', 'RelDiff_', 'T+S+R'), ('DAN', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DAN', 'Model': '_DAN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.026, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DAN', 'Model': '_DAN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DAN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.185, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DAN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.219, ('FINALIZE_TRAINING', {'Signals': ['DAN'], 'Transformations': [('DAN', [('DAN', 'None', 'CumSum_', 'T+S+R'), ('DAN', 'None', 'Diff_', 'T+S+R'), ('DAN', 'None', 'RelDiff_', 'T+S+R'), ('DAN', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='DAN' Length=1251  Min=9.95 Max=24.6  Mean=17.288433243005617 StdDev=3.9312730345397426
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_DAN' Min=0.0 Max=1.0  Mean=0.5009169449150571 StdDev=0.26834628222114326
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_DAN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_DAN_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_DAN_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_DAN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.017 MAPE_Forecast=0.0191 MAPE_Test=0.0191
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.017 SMAPE_Forecast=0.019 SMAPE_Test=0.0194
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9967 MASE_Test=1.273
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=1.161198325444327 CRPS_Forecast=0.7141266044571699 CRPS_Test=0.17428571428571438
INFO:pyaf.std:MODEL_L1 L1_Fit=0.2834271095477387 L1_Forecast=0.2685542128514056 L1_Test=0.21428571428571455
INFO:pyaf.std:MODEL_L2 L2_Fit=0.4073434909491586 L2_Forecast=0.3514565643532068 L2_Test=0.2736003341685512
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.6397261780470166 LnQ_Forecast=0.16059366270893582 LnQ_Test=0.0043850751309482475
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.21999999999999886 MedAE_Forecast=0.20999999999999908 MedAE_Test=0.17999999999999972
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.43890778156996596
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _DAN_Lag1Trend_residue_bestCycle_byMAPE None 0.0006824573378839682 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ... ForecastMAPE      TestMAPE
0    None           _DAN  ...       0.0191  1.910000e-02
1    None           _DAN  ...       0.0191  1.910000e-02
2    None     CumSum_DAN  ...       0.0191  1.910000e-02
3    None     CumSum_DAN  ...       0.0191  1.910000e-02
4    None       Diff_DAN  ...       0.0191  1.910000e-02
..    ...            ...  ...          ...           ...
219  None    RelDiff_DAN  ...  124477.2013  1.328625e+06
220  None    RelDiff_DAN  ...  160550.8524  1.683848e+06
221  None    RelDiff_DAN  ...  165563.6234  1.761326e+06
222  None    RelDiff_DAN  ...  267710.2678  2.205500e+06
223  None    RelDiff_DAN  ...  267710.2678  2.205500e+06

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _DAN             T+S+R  ...  0.0170       0.0191   0.0191
1  None           _DAN             T+S+R  ...  0.0170       0.0191   0.0191
2  None     CumSum_DAN             T+S+R  ...  0.0174       0.0191   0.0191
3  None     CumSum_DAN             T+S+R  ...  0.0174       0.0191   0.0191
4  None       Diff_DAN             T+S+R  ...  0.0170       0.0191   0.0191

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['DAN'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.256, ('FORECASTING', {'Signals': ['DAN'], 'Horizon': 7}))
7 0    11.57
1    11.38
2    12.53
3    13.16
4    13.44
5    13.66
6    13.80
Name: DAN, dtype: float64
7 0    11.76
1    11.76
2    11.76
3    11.76
4    11.76
5    11.76
6    11.76
Name: DAN_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_DAN DAN [11.57, 11.38, 12.53, 13.16, 13.44, 13.66, 13.8]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_DAN DAN [11.76, 11.76, 11.76, 11.76, 11.76, 11.76, 11.76]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_DAN DAN 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_DAN DAN 12.611733675003052
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_DAN DAN Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_DAN DAN 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_DAN DAN 0.0899 0.0953 2.7455
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_DAN DAN 1.1942857142857142 1.3798240053406399 -1.2663774129059697
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_DAN_7'
