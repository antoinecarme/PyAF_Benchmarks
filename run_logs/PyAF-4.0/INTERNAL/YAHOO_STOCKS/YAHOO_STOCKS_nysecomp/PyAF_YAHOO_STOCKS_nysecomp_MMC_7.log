BENCH_DATA YAHOO_STOCKS_nysecomp
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  MMC N= 1251 H= 7 HEAD= [29.299999 29.49     28.99     28.49     29.450001] TAIL= [67.300003 67.050003 66.959999 66.519997 66.459999]
         MMC       Date
0  29.299999 2011-07-28
1  29.490000 2011-07-29
2  28.990000 2011-08-01
3  28.490000 2011-08-02
4  29.450001 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   MMC     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['MMC'], 'Transformations': [('MMC', 'None', '_', 'T+S+R'), ('MMC', 'None', 'Diff_', 'T+S+R'), ('MMC', 'None', 'RelDiff_', 'T+S+R'), ('MMC', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MMC', 'Transformation': '_MMC'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.314, ('TRAINING', {'Signal': 'MMC', 'Transformation': '_MMC'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MMC', 'Transformation': 'Diff_MMC'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.77, ('TRAINING', {'Signal': 'MMC', 'Transformation': 'Diff_MMC'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MMC', 'Transformation': 'RelDiff_MMC'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.156, ('TRAINING', {'Signal': 'MMC', 'Transformation': 'RelDiff_MMC'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'MMC', 'Transformation': 'CumSum_MMC'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.782, ('TRAINING', {'Signal': 'MMC', 'Transformation': 'CumSum_MMC'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.024, ('SIGNAL_TRAINING', {'Signals': ['MMC'], 'Transformations': [('MMC', 'None', '_', 'T+S+R'), ('MMC', 'None', 'Diff_', 'T+S+R'), ('MMC', 'None', 'RelDiff_', 'T+S+R'), ('MMC', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['MMC'], 'Transformations': [('MMC', [('MMC', 'None', 'CumSum_', 'T+S+R'), ('MMC', 'None', 'Diff_', 'T+S+R'), ('MMC', 'None', 'RelDiff_', 'T+S+R'), ('MMC', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'MMC', 'Transformations': [('MMC', 'None', 'CumSum_', 'T+S+R'), ('MMC', 'None', 'Diff_', 'T+S+R'), ('MMC', 'None', 'RelDiff_', 'T+S+R'), ('MMC', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'MMC', 'Transformations': [('MMC', 'None', 'CumSum_', 'T+S+R'), ('MMC', 'None', 'Diff_', 'T+S+R'), ('MMC', 'None', 'RelDiff_', 'T+S+R'), ('MMC', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MMC', 'Model': '_MMC_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'MMC', 'Model': '_MMC_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MMC'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.185, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'MMC'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.221, ('FINALIZE_TRAINING', {'Signals': ['MMC'], 'Transformations': [('MMC', [('MMC', 'None', 'CumSum_', 'T+S+R'), ('MMC', 'None', 'Diff_', 'T+S+R'), ('MMC', 'None', 'RelDiff_', 'T+S+R'), ('MMC', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='MMC' Length=1251  Min=25.709999 Max=68.459999  Mean=45.66466824300566 StdDev=11.055327685571985
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_MMC' Min=0.0 Max=1.0  Mean=0.4667758887252771 StdDev=0.25860415638764866
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_MMC_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_MMC_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_MMC_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_MMC_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0081 MAPE_Forecast=0.0086 MAPE_Test=0.0029
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0082 SMAPE_Forecast=0.0086 SMAPE_Test=0.0029
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.997 MASE_Test=1.1711
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=2.956760374067707 CRPS_Forecast=1.2378957795673986 CRPS_Test=0.09571457142857197
INFO:pyaf.std:MODEL_L1 L1_Fit=0.32530649748743723 L1_Forecast=0.49341361847389587 L1_Test=0.19714228571428855
INFO:pyaf.std:MODEL_L2 L2_Fit=0.4370117571894929 L2_Forecast=0.6696125344927255 L2_Test=0.24715486182495816
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.13363547162666184 LnQ_Forecast=0.034525814395557776 LnQ_Test=9.55113363202951e-05
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.25 MedAE_Forecast=0.36999899999999997 MedAE_Test=0.15000100000000316
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0839766081871345
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _MMC_Lag1Trend_residue_bestCycle_byMAPE None 0.0004678362573100614 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ... ForecastMAPE      TestMAPE
0    None           _MMC  ...       0.0086  2.900000e-03
1    None           _MMC  ...       0.0086  2.900000e-03
2    None     CumSum_MMC  ...       0.0086  2.900000e-03
3    None       Diff_MMC  ...       0.0086  2.900000e-03
4    None       Diff_MMC  ...       0.0086  2.900000e-03
..    ...            ...  ...          ...           ...
219  None    RelDiff_MMC  ...   30382.2235  3.395278e+05
220  None    RelDiff_MMC  ...   41287.6364  4.746967e+05
221  None    RelDiff_MMC  ...   60591.2496  7.073330e+05
222  None    RelDiff_MMC  ...  178251.7011  2.133915e+06
223  None    RelDiff_MMC  ...  178251.7011  2.133915e+06

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _MMC             T+S+R  ...  0.0081       0.0086   0.0029
1  None           _MMC             T+S+R  ...  0.0081       0.0086   0.0029
2  None     CumSum_MMC             T+S+R  ...  0.0083       0.0086   0.0029
3  None       Diff_MMC             T+S+R  ...  0.0081       0.0086   0.0029
4  None       Diff_MMC             T+S+R  ...  0.0081       0.0086   0.0029

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['MMC'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.158, ('FORECASTING', {'Signals': ['MMC'], 'Horizon': 7}))
7 0    66.349998
1    66.430000
2    65.959999
3    66.480003
4    66.239998
5    66.639999
6    66.470001
Name: MMC, dtype: float64
7 0    66.459999
1    66.459999
2    66.459999
3    66.459999
4    66.459999
5    66.459999
6    66.459999
Name: MMC_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_MMC MMC [66.349998, 66.43, 65.959999, 66.480003, 66.239998, 66.639999, 66.470001]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_MMC MMC [66.459999, 66.459999, 66.459999, 66.459999, 66.459999, 66.459999, 66.459999]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_MMC MMC 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_MMC MMC 12.504891157150269
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_MMC MMC Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_MMC MMC 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_MMC MMC 0.0023 0.0023 0.4878
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_MMC MMC 0.1528581428571414 0.22177878296788045 -0.2125633563748477
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nysecomp_MMC_7'
