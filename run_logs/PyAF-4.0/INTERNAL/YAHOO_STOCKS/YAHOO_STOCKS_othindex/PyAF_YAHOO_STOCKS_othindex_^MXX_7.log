BENCH_DATA YAHOO_STOCKS_othindex
TIME :  Date N= 1250 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  ^MXX N= 1250 H= 7 HEAD= [35917.800781 35999.339844 35730.710938 34814.941406 34484.371094] TAIL= [46432.699219 46271.96875  46498.511719 46713.429688 46961.25    ]
           ^MXX       Date
0  35917.800781 2011-07-28
1  35999.339844 2011-07-29
2  35730.710938 2011-08-01
3  34814.941406 2011-08-02
4  34484.371094 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1250 entries, 0 to 1249
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   ^MXX    1250 non-null   float64       
 1   Date    1250 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['^MXX'], 'Transformations': [('^MXX', 'None', '_', 'T+S+R'), ('^MXX', 'None', 'Diff_', 'T+S+R'), ('^MXX', 'None', 'RelDiff_', 'T+S+R'), ('^MXX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '^MXX', 'Transformation': '_^MXX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.04, ('TRAINING', {'Signal': '^MXX', 'Transformation': '_^MXX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '^MXX', 'Transformation': 'Diff_^MXX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.874, ('TRAINING', {'Signal': '^MXX', 'Transformation': 'Diff_^MXX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '^MXX', 'Transformation': 'RelDiff_^MXX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.193, ('TRAINING', {'Signal': '^MXX', 'Transformation': 'RelDiff_^MXX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '^MXX', 'Transformation': 'CumSum_^MXX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.994, ('TRAINING', {'Signal': '^MXX', 'Transformation': 'CumSum_^MXX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.105, ('SIGNAL_TRAINING', {'Signals': ['^MXX'], 'Transformations': [('^MXX', 'None', '_', 'T+S+R'), ('^MXX', 'None', 'Diff_', 'T+S+R'), ('^MXX', 'None', 'RelDiff_', 'T+S+R'), ('^MXX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['^MXX'], 'Transformations': [('^MXX', [('^MXX', 'None', 'CumSum_', 'T+S+R'), ('^MXX', 'None', 'Diff_', 'T+S+R'), ('^MXX', 'None', 'RelDiff_', 'T+S+R'), ('^MXX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '^MXX', 'Transformations': [('^MXX', 'None', 'CumSum_', 'T+S+R'), ('^MXX', 'None', 'Diff_', 'T+S+R'), ('^MXX', 'None', 'RelDiff_', 'T+S+R'), ('^MXX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.009, ('MODEL_SELECTION', {'Signal': '^MXX', 'Transformations': [('^MXX', 'None', 'CumSum_', 'T+S+R'), ('^MXX', 'None', 'Diff_', 'T+S+R'), ('^MXX', 'None', 'RelDiff_', 'T+S+R'), ('^MXX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '^MXX', 'Model': '_^MXX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '^MXX', 'Model': '_^MXX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '^MXX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.19, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '^MXX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.228, ('FINALIZE_TRAINING', {'Signals': ['^MXX'], 'Transformations': [('^MXX', [('^MXX', 'None', 'CumSum_', 'T+S+R'), ('^MXX', 'None', 'Diff_', 'T+S+R'), ('^MXX', 'None', 'RelDiff_', 'T+S+R'), ('^MXX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='^MXX' Length=1250  Min=31740.130859 Max=46961.25  Mean=41726.591607822396 StdDev=3074.7065769005344
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_^MXX' Min=0.0 Max=1.0  Mean=0.6560924105720065 StdDev=0.20200266146123436
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_^MXX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_^MXX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_^MXX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_^MXX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.007 MAPE_Forecast=0.0068 MAPE_Test=0.0058
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.007 SMAPE_Forecast=0.0068 SMAPE_Test=0.0058
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.998 MASE_Test=1.0521
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=902.1424769116885 CRPS_Forecast=381.1368412686656 CRPS_Test=177.79296885714263
INFO:pyaf.std:MODEL_L1 L1_Fit=282.2271676861166 L1_Forecast=296.7275508072285 L1_Test=269.7628348571431
INFO:pyaf.std:MODEL_L2 L2_Fit=380.2523098590455 L2_Forecast=382.4458993164488 L2_Test=282.8529520558009
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.09379646473167343 LnQ_Forecast=0.019021960160014492 LnQ_Test=0.00026333908552124213
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=217.5898440000019 MedAE_Forecast=242.91015699999843 MedAE_Test=247.82031200000347
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.27446535851275994
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _^MXX_Lag1Trend_residue_bestCycle_byMAPE None 0.00041574640086444736 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ... ForecastMAPE      TestMAPE
0    None          _^MXX  ...       0.0067  5.700000e-03
1    None          _^MXX  ...       0.0067  5.700000e-03
2    None          _^MXX  ...       0.0067  5.700000e-03
3    None          _^MXX  ...       0.0067  5.700000e-03
4    None          _^MXX  ...       0.0067  5.700000e-03
..    ...            ...  ...          ...           ...
211  None   RelDiff_^MXX  ...   22404.5380  4.111011e+05
212  None   RelDiff_^MXX  ...   23093.8839  4.366974e+05
213  None   RelDiff_^MXX  ...   23168.3504  4.353665e+05
214  None   RelDiff_^MXX  ...  107959.5284  1.401776e+06
215  None   RelDiff_^MXX  ...  107959.5284  1.401776e+06

[216 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None          _^MXX             T+S+R  ...  0.0070       0.0067   0.0057
1  None          _^MXX             T+S+R  ...  0.0069       0.0067   0.0057
2  None          _^MXX             T+S+R  ...  0.0069       0.0067   0.0057
3  None          _^MXX             T+S+R  ...  0.0069       0.0067   0.0057
4  None          _^MXX             T+S+R  ...  0.0069       0.0067   0.0057

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['^MXX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.167, ('FORECASTING', {'Signals': ['^MXX'], 'Horizon': 7}))
7 0    47060.570312
1    47505.250000
2    47364.808594
3    47537.281250
4    47130.410156
5    46927.000000
6    46812.070312
Name: ^MXX, dtype: float64
7 0    46961.25
1    46961.25
2    46961.25
3    46961.25
4    46961.25
5    46961.25
6    46961.25
Name: ^MXX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_^MXX ^MXX [47060.570312, 47505.25, 47364.808594, 47537.28125, 47130.410156, 46927.0, 46812.070312]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_^MXX ^MXX [46961.25, 46961.25, 46961.25, 46961.25, 46961.25, 46961.25, 46961.25]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_^MXX ^MXX 1250 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_^MXX ^MXX 12.614912509918213
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_^MXX ^MXX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_^MXX ^MXX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_^MXX ^MXX 0.006 0.006 1.1419
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_^MXX ^MXX 282.2142857142857 348.9811424158943 -0.7656263304624396
BENCHMARK_SUCCESS 'YAHOO_STOCKS_othindex_^MXX_7'
