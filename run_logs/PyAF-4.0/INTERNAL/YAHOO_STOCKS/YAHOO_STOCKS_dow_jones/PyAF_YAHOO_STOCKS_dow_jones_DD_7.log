BENCH_DATA YAHOO_STOCKS_dow_jones
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  DD N= 1251 H= 7 HEAD= [52.299996 51.419995 51.549997 50.049999 50.499998] TAIL= [65.940002 66.089996 66.860001 67.160004 68.059998]
          DD       Date
0  52.299996 2011-07-28
1  51.419995 2011-07-29
2  51.549997 2011-08-01
3  50.049999 2011-08-02
4  50.499998 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   DD      1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['DD'], 'Transformations': [('DD', 'None', '_', 'T+S+R'), ('DD', 'None', 'Diff_', 'T+S+R'), ('DD', 'None', 'RelDiff_', 'T+S+R'), ('DD', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DD', 'Transformation': '_DD'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.501, ('TRAINING', {'Signal': 'DD', 'Transformation': '_DD'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DD', 'Transformation': 'Diff_DD'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.846, ('TRAINING', {'Signal': 'DD', 'Transformation': 'Diff_DD'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DD', 'Transformation': 'RelDiff_DD'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.205, ('TRAINING', {'Signal': 'DD', 'Transformation': 'RelDiff_DD'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'DD', 'Transformation': 'CumSum_DD'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.796, ('TRAINING', {'Signal': 'DD', 'Transformation': 'CumSum_DD'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.35, ('SIGNAL_TRAINING', {'Signals': ['DD'], 'Transformations': [('DD', 'None', '_', 'T+S+R'), ('DD', 'None', 'Diff_', 'T+S+R'), ('DD', 'None', 'RelDiff_', 'T+S+R'), ('DD', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['DD'], 'Transformations': [('DD', [('DD', 'None', 'CumSum_', 'T+S+R'), ('DD', 'None', 'Diff_', 'T+S+R'), ('DD', 'None', 'RelDiff_', 'T+S+R'), ('DD', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'DD', 'Transformations': [('DD', 'None', 'CumSum_', 'T+S+R'), ('DD', 'None', 'Diff_', 'T+S+R'), ('DD', 'None', 'RelDiff_', 'T+S+R'), ('DD', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.012, ('MODEL_SELECTION', {'Signal': 'DD', 'Transformations': [('DD', 'None', 'CumSum_', 'T+S+R'), ('DD', 'None', 'Diff_', 'T+S+R'), ('DD', 'None', 'RelDiff_', 'T+S+R'), ('DD', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DD', 'Model': '_DD_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.045, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'DD', 'Model': '_DD_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DD'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.189, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'DD'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.247, ('FINALIZE_TRAINING', {'Signals': ['DD'], 'Transformations': [('DD', [('DD', 'None', 'CumSum_', 'T+S+R'), ('DD', 'None', 'Diff_', 'T+S+R'), ('DD', 'None', 'RelDiff_', 'T+S+R'), ('DD', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='DD' Length=1251  Min=38.49 Max=80.499997  Mean=58.48368398800963 StdDev=9.488302568104883
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_DD' Min=0.0 Max=1.0  Mean=0.4759268130395149 StdDev=0.22585820627658898
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_DD_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_DD_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_DD_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_DD_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0097 MAPE_Forecast=0.0131 MAPE_Test=0.0134
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0097 SMAPE_Forecast=0.0131 SMAPE_Test=0.0135
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9964 MASE_Test=1.2043
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=3.0249517816979634 CRPS_Forecast=1.721126003614647 CRPS_Test=0.7435714285714278
INFO:pyaf.std:MODEL_L1 L1_Fit=0.5455778211055278 L1_Forecast=0.7928914779116473 L1_Test=0.8771428571428562
INFO:pyaf.std:MODEL_L2 L2_Fit=0.7725287412584583 L2_Forecast=1.1493914118680062 L2_Test=1.0583553913045607
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.19286151021407744 LnQ_Forecast=0.08712920141661745 LnQ_Test=0.0018870921482285312
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.4000000000000057 MedAE_Forecast=0.5700000000000074 MedAE_Test=0.7700049999999976
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.3287311827230076
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _DD_Lag1Trend_residue_bestCycle_byMAPE None 0.0009521543169829227 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ... FitMAPE ForecastMAPE  TestMAPE
0    None            _DD             T+S+R  ...  0.0097       0.0131    0.0134
1    None            _DD             T+S+R  ...  0.0097       0.0131    0.0134
2    None      CumSum_DD             T+S+R  ...  0.0100       0.0131    0.0134
3    None        Diff_DD             T+S+R  ...  0.0097       0.0131    0.0134
4    None        Diff_DD             T+S+R  ...  0.0097       0.0131    0.0134
..    ...            ...               ...  ...     ...          ...       ...
219  None     RelDiff_DD             T+S+R  ...  3.6510      56.0809   83.8766
220  None     RelDiff_DD             T+S+R  ...  3.4992      59.0290  112.6259
221  None     RelDiff_DD             T+S+R  ...  3.4947      59.2777  113.9002
222  None     RelDiff_DD             T+S+R  ...  8.7748     117.9803  207.0047
223  None     RelDiff_DD             T+S+R  ...  8.7748     117.9803  207.0047

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None            _DD             T+S+R  ...  0.0097       0.0131   0.0134
1  None            _DD             T+S+R  ...  0.0097       0.0131   0.0134
2  None      CumSum_DD             T+S+R  ...  0.0100       0.0131   0.0134
3  None        Diff_DD             T+S+R  ...  0.0097       0.0131   0.0134
4  None        Diff_DD             T+S+R  ...  0.0097       0.0131   0.0134

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['DD'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.159, ('FORECASTING', {'Signals': ['DD'], 'Horizon': 7}))
7 0    67.489998
1    67.680000
2    67.849998
3    68.430000
4    68.879997
5    69.160004
6    69.120003
Name: DD, dtype: float64
7 0    68.059998
1    68.059998
2    68.059998
3    68.059998
4    68.059998
5    68.059998
6    68.059998
Name: DD_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_DD DD [67.489998, 67.68, 67.849998, 68.43, 68.879997, 69.160004, 69.120003]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_DD DD [68.059998, 68.059998, 68.059998, 68.059998, 68.059998, 68.059998, 68.059998]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_DD DD 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_DD DD 12.853675127029419
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_DD DD Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_DD DD 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_DD DD 0.0094 0.0094 2.2606
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_DD DD 0.6442871428571441 0.7227252115697748 -0.23060581560780768
BENCHMARK_SUCCESS 'YAHOO_STOCKS_dow_jones_DD_7'
