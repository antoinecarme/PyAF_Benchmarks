BENCH_DATA YAHOO_STOCKS_dow_jones
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  CVX N= 1251 H= 7 HEAD= [105.029999 104.019997 105.379997 103.449997 102.760002] TAIL= [106.779999 106.650002 106.699997 107.029999 106.089996]
          CVX       Date
0  105.029999 2011-07-28
1  104.019997 2011-07-29
2  105.379997 2011-08-01
3  103.449997 2011-08-02
4  102.760002 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   CVX     1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['CVX'], 'Transformations': [('CVX', 'None', '_', 'T+S+R'), ('CVX', 'None', 'Diff_', 'T+S+R'), ('CVX', 'None', 'RelDiff_', 'T+S+R'), ('CVX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'CVX', 'Transformation': '_CVX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.219, ('TRAINING', {'Signal': 'CVX', 'Transformation': '_CVX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'CVX', 'Transformation': 'Diff_CVX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.802, ('TRAINING', {'Signal': 'CVX', 'Transformation': 'Diff_CVX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'CVX', 'Transformation': 'RelDiff_CVX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.169, ('TRAINING', {'Signal': 'CVX', 'Transformation': 'RelDiff_CVX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'CVX', 'Transformation': 'CumSum_CVX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.809, ('TRAINING', {'Signal': 'CVX', 'Transformation': 'CumSum_CVX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.002, ('SIGNAL_TRAINING', {'Signals': ['CVX'], 'Transformations': [('CVX', 'None', '_', 'T+S+R'), ('CVX', 'None', 'Diff_', 'T+S+R'), ('CVX', 'None', 'RelDiff_', 'T+S+R'), ('CVX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['CVX'], 'Transformations': [('CVX', [('CVX', 'None', 'CumSum_', 'T+S+R'), ('CVX', 'None', 'Diff_', 'T+S+R'), ('CVX', 'None', 'RelDiff_', 'T+S+R'), ('CVX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'CVX', 'Transformations': [('CVX', 'None', 'CumSum_', 'T+S+R'), ('CVX', 'None', 'Diff_', 'T+S+R'), ('CVX', 'None', 'RelDiff_', 'T+S+R'), ('CVX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'CVX', 'Transformations': [('CVX', 'None', 'CumSum_', 'T+S+R'), ('CVX', 'None', 'Diff_', 'T+S+R'), ('CVX', 'None', 'RelDiff_', 'T+S+R'), ('CVX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'CVX', 'Model': '_CVX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'CVX', 'Model': '_CVX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'CVX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.187, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'CVX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FINALIZE_TRAINING', {'Signals': ['CVX'], 'Transformations': [('CVX', [('CVX', 'None', 'CumSum_', 'T+S+R'), ('CVX', 'None', 'Diff_', 'T+S+R'), ('CVX', 'None', 'RelDiff_', 'T+S+R'), ('CVX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='CVX' Length=1251  Min=70.019997 Max=134.850006  Mean=108.42453219824141 StdDev=12.738323439788863
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_CVX' Min=0.0 Max=1.0  Mean=0.5923882441269033 StdDev=0.19648807143909006
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_CVX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_CVX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_CVX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_CVX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0092 MAPE_Forecast=0.0152 MAPE_Test=0.007
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0092 SMAPE_Forecast=0.0152 SMAPE_Test=0.007
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9988 MASE_Test=1.2832
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=2.835244929423433 CRPS_Forecast=2.274518793256792 CRPS_Test=0.5214282857142852
INFO:pyaf.std:MODEL_L1 L1_Fit=1.013658425125628 L1_Forecast=1.3446992168674694 L1_Test=0.7399990000000015
INFO:pyaf.std:MODEL_L2 L2_Fit=1.3675962713670649 L2_Forecast=1.693526511238015 L2_Test=0.9476879775905007
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.16184625434833616 LnQ_Forecast=0.09521185762278722 LnQ_Test=0.0005695613122847968
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.7799990000000037 MedAE_Forecast=1.0900039999999933 MedAE_Test=0.6200019999999995
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.5400277208044194
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _CVX_Lag1Trend_residue_bestCycle_byMAPE None 0.0001542804043109247 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ...  FitMAPE ForecastMAPE TestMAPE
0    None           _CVX             T+S+R  ...   0.0092       0.0152   0.0070
1    None           _CVX             T+S+R  ...   0.0092       0.0152   0.0070
2    None     CumSum_CVX             T+S+R  ...   0.0095       0.0152   0.0070
3    None     CumSum_CVX             T+S+R  ...   0.0095       0.0152   0.0070
4    None       Diff_CVX             T+S+R  ...   0.0092       0.0152   0.0070
..    ...            ...               ...  ...      ...          ...      ...
211  None     CumSum_CVX             T+S+R  ...   8.4019      11.3788   2.7892
212  None     CumSum_CVX             T+S+R  ...   9.8801      13.2788  10.7265
213  None     CumSum_CVX             T+S+R  ...  10.2908      14.2193  18.0234
214  None     CumSum_CVX             T+S+R  ...  12.8175      16.4554  13.6073
215  None     CumSum_CVX             T+S+R  ...  11.8116      17.1059   6.6084

[216 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None           _CVX             T+S+R  ...  0.0092       0.0152    0.007
1  None           _CVX             T+S+R  ...  0.0092       0.0152    0.007
2  None     CumSum_CVX             T+S+R  ...  0.0095       0.0152    0.007
3  None     CumSum_CVX             T+S+R  ...  0.0095       0.0152    0.007
4  None       Diff_CVX             T+S+R  ...  0.0092       0.0152    0.007

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['CVX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.17, ('FORECASTING', {'Signals': ['CVX'], 'Horizon': 7}))
7 0    106.040001
1    105.589996
2    105.389999
3    105.660004
4    103.070000
5    102.680000
6    102.260002
Name: CVX, dtype: float64
7 0    106.089996
1    106.089996
2    106.089996
3    106.089996
4    106.089996
5    106.089996
6    106.089996
Name: CVX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_CVX CVX [106.040001, 105.589996, 105.389999, 105.660004, 103.07, 102.68, 102.260002]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_CVX CVX [106.089996, 106.089996, 106.089996, 106.089996, 106.089996, 106.089996, 106.089996]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_CVX CVX 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_CVX CVX 12.49759817123413
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_CVX CVX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_CVX CVX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_CVX CVX 0.0166 0.0163 2.369
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_CVX CVX 1.7057099999999983 2.2786177207172265 -1.2745904587970154
BENCHMARK_SUCCESS 'YAHOO_STOCKS_dow_jones_CVX_7'
