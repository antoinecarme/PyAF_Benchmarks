BENCH_DATA YAHOO_STOCKS_nasdaqbio
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  AMAG N= 1251 H= 7 HEAD= [15.46 14.81 14.91 14.39 16.  ] TAIL= [25.5      25.139999 25.530001 25.610001 25.959999]
    AMAG       Date
0  15.46 2011-07-28
1  14.81 2011-07-29
2  14.91 2011-08-01
3  14.39 2011-08-02
4  16.00 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AMAG    1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AMAG'], 'Transformations': [('AMAG', 'None', '_', 'T+S+R'), ('AMAG', 'None', 'Diff_', 'T+S+R'), ('AMAG', 'None', 'RelDiff_', 'T+S+R'), ('AMAG', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMAG', 'Transformation': '_AMAG'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.427, ('TRAINING', {'Signal': 'AMAG', 'Transformation': '_AMAG'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMAG', 'Transformation': 'Diff_AMAG'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.781, ('TRAINING', {'Signal': 'AMAG', 'Transformation': 'Diff_AMAG'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMAG', 'Transformation': 'RelDiff_AMAG'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.203, ('TRAINING', {'Signal': 'AMAG', 'Transformation': 'RelDiff_AMAG'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMAG', 'Transformation': 'CumSum_AMAG'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.791, ('TRAINING', {'Signal': 'AMAG', 'Transformation': 'CumSum_AMAG'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.204, ('SIGNAL_TRAINING', {'Signals': ['AMAG'], 'Transformations': [('AMAG', 'None', '_', 'T+S+R'), ('AMAG', 'None', 'Diff_', 'T+S+R'), ('AMAG', 'None', 'RelDiff_', 'T+S+R'), ('AMAG', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AMAG'], 'Transformations': [('AMAG', [('AMAG', 'None', 'CumSum_', 'T+S+R'), ('AMAG', 'None', 'Diff_', 'T+S+R'), ('AMAG', 'None', 'RelDiff_', 'T+S+R'), ('AMAG', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AMAG', 'Transformations': [('AMAG', 'None', 'CumSum_', 'T+S+R'), ('AMAG', 'None', 'Diff_', 'T+S+R'), ('AMAG', 'None', 'RelDiff_', 'T+S+R'), ('AMAG', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': 'AMAG', 'Transformations': [('AMAG', 'None', 'CumSum_', 'T+S+R'), ('AMAG', 'None', 'Diff_', 'T+S+R'), ('AMAG', 'None', 'RelDiff_', 'T+S+R'), ('AMAG', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AMAG', 'Model': '_AMAG_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AMAG', 'Model': '_AMAG_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AMAG'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.191, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AMAG'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.227, ('FINALIZE_TRAINING', {'Signals': ['AMAG'], 'Transformations': [('AMAG', [('AMAG', 'None', 'CumSum_', 'T+S+R'), ('AMAG', 'None', 'Diff_', 'T+S+R'), ('AMAG', 'None', 'RelDiff_', 'T+S+R'), ('AMAG', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AMAG' Length=1251  Min=12.53 Max=76.459999  Mean=26.64610712310151 StdDev=14.804752342635567
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AMAG' Min=0.0 Max=1.0  Mean=0.22080568346483975 StdDev=0.231577546914017
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AMAG_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AMAG_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AMAG_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_AMAG_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0192 MAPE_Forecast=0.0309 MAPE_Test=0.0096
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0192 SMAPE_Forecast=0.0306 SMAPE_Test=0.0096
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0054 MASE_Test=0.958
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=3.3934260357286434 CRPS_Forecast=3.999462309377557 CRPS_Test=0.07000007142857154
INFO:pyaf.std:MODEL_L1 L1_Fit=0.47611061005025124 L1_Forecast=1.0415260963855422 L1_Test=0.2442857142857144
INFO:pyaf.std:MODEL_L2 L2_Fit=0.7638154394806692 L2_Forecast=1.516059802230126 L2_Test=0.2808914940506387
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.8088161872200366 LnQ_Forecast=0.4343535974752887 LnQ_Test=0.0008538898479318604
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.2900009999999895 MedAE_Forecast=0.7299989999999994 MedAE_Test=0.3299990000000008
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.045831378786663234
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _AMAG_Lag1Trend_residue_bestCycle_byMAPE None 0.0003128108918005884 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation  ... ForecastMAPE      TestMAPE
0    None          _AMAG  ...       0.0309  9.600000e-03
1    None          _AMAG  ...       0.0309  9.600000e-03
2    None    CumSum_AMAG  ...       0.0309  9.600000e-03
3    None      Diff_AMAG  ...       0.0309  9.600000e-03
4    None   RelDiff_AMAG  ...       0.0309  9.600000e-03
..    ...            ...  ...          ...           ...
219  None   RelDiff_AMAG  ...  312892.2774  3.154687e+06
220  None   RelDiff_AMAG  ...  373541.6626  3.720869e+06
221  None   RelDiff_AMAG  ...  376019.5792  4.084161e+06
222  None   RelDiff_AMAG  ...  398090.6986  4.005690e+06
223  None   RelDiff_AMAG  ...  398090.6986  4.005690e+06

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None          _AMAG             T+S+R  ...  0.0192       0.0309   0.0096
1  None          _AMAG             T+S+R  ...  0.0192       0.0309   0.0096
2  None    CumSum_AMAG             T+S+R  ...  0.0193       0.0309   0.0096
3  None      Diff_AMAG             T+S+R  ...  0.0192       0.0309   0.0096
4  None   RelDiff_AMAG             T+S+R  ...  0.0283       0.0309   0.0096

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AMAG'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.16, ('FORECASTING', {'Signals': ['AMAG'], 'Horizon': 7}))
7 0    25.950001
1    26.750000
2    26.790001
3    25.870001
4    25.709999
5    24.950001
6    26.900000
Name: AMAG, dtype: float64
7 0    25.959999
1    25.959999
2    25.959999
3    25.959999
4    25.959999
5    25.959999
6    25.959999
Name: AMAG_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AMAG AMAG [25.950001, 26.75, 26.790001, 25.870001, 25.709999, 24.950001, 26.9]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AMAG AMAG [25.959999, 25.959999, 25.959999, 25.959999, 25.959999, 25.959999, 25.959999]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AMAG AMAG 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AMAG AMAG 12.695155620574951
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AMAG AMAG Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AMAG AMAG 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AMAG AMAG 0.0214 0.0215 0.7257
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AMAG AMAG 0.5599997142857143 0.6852947582732972 -0.06675495359795103
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nasdaqbio_AMAG_7'
