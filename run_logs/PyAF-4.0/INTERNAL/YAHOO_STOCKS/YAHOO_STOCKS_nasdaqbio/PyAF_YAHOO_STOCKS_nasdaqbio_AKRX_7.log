BENCH_DATA YAHOO_STOCKS_nasdaqbio
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  AKRX N= 1251 H= 7 HEAD= [6.91 6.93 7.23 7.67 7.98] TAIL= [31.139999 30.23     31.030001 31.18     31.360001]
   AKRX       Date
0  6.91 2011-07-28
1  6.93 2011-07-29
2  7.23 2011-08-01
3  7.67 2011-08-02
4  7.98 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AKRX    1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AKRX'], 'Transformations': [('AKRX', 'None', '_', 'T+S+R'), ('AKRX', 'None', 'Diff_', 'T+S+R'), ('AKRX', 'None', 'RelDiff_', 'T+S+R'), ('AKRX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AKRX', 'Transformation': '_AKRX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.493, ('TRAINING', {'Signal': 'AKRX', 'Transformation': '_AKRX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AKRX', 'Transformation': 'Diff_AKRX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.994, ('TRAINING', {'Signal': 'AKRX', 'Transformation': 'Diff_AKRX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AKRX', 'Transformation': 'RelDiff_AKRX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.304, ('TRAINING', {'Signal': 'AKRX', 'Transformation': 'RelDiff_AKRX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AKRX', 'Transformation': 'CumSum_AKRX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.776, ('TRAINING', {'Signal': 'AKRX', 'Transformation': 'CumSum_AKRX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.569, ('SIGNAL_TRAINING', {'Signals': ['AKRX'], 'Transformations': [('AKRX', 'None', '_', 'T+S+R'), ('AKRX', 'None', 'Diff_', 'T+S+R'), ('AKRX', 'None', 'RelDiff_', 'T+S+R'), ('AKRX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AKRX'], 'Transformations': [('AKRX', [('AKRX', 'None', 'CumSum_', 'T+S+R'), ('AKRX', 'None', 'Diff_', 'T+S+R'), ('AKRX', 'None', 'RelDiff_', 'T+S+R'), ('AKRX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AKRX', 'Transformations': [('AKRX', 'None', 'CumSum_', 'T+S+R'), ('AKRX', 'None', 'Diff_', 'T+S+R'), ('AKRX', 'None', 'RelDiff_', 'T+S+R'), ('AKRX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': 'AKRX', 'Transformations': [('AKRX', 'None', 'CumSum_', 'T+S+R'), ('AKRX', 'None', 'Diff_', 'T+S+R'), ('AKRX', 'None', 'RelDiff_', 'T+S+R'), ('AKRX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AKRX', 'Model': '_AKRX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AKRX', 'Model': '_AKRX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AKRX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.185, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AKRX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.222, ('FINALIZE_TRAINING', {'Signals': ['AKRX'], 'Transformations': [('AKRX', [('AKRX', 'None', 'CumSum_', 'T+S+R'), ('AKRX', 'None', 'Diff_', 'T+S+R'), ('AKRX', 'None', 'RelDiff_', 'T+S+R'), ('AKRX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AKRX' Length=1251  Min=6.91 Max=55.919998  Mean=24.226219002398093 StdDev=12.211177346072379
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AKRX' Min=0.0 Max=1.0  Mean=0.35332013281041363 StdDev=0.24915686277057958
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AKRX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AKRX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AKRX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_AKRX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0189 MAPE_Forecast=0.0286 MAPE_Test=0.0147
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0189 SMAPE_Forecast=0.0287 SMAPE_Test=0.0147
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0012 MASE_Test=1.0748
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=3.587868176405712 CRPS_Forecast=1.8607104411528463 CRPS_Test=0.18285721428571403
INFO:pyaf.std:MODEL_L1 L1_Fit=0.4377788954773871 L1_Forecast=0.8395180200803211 L1_Test=0.45142842857142845
INFO:pyaf.std:MODEL_L2 L2_Fit=0.8060993075852453 L2_Forecast=1.217381824485532 L2_Test=0.5408986411525858
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.7145084752887811 LnQ_Forecast=0.4959852876442047 LnQ_Test=0.002184153839486074
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.259999999999998 MedAE_Forecast=0.6000019999999964 MedAE_Test=0.25
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _AKRX_Lag1Trend_residue_bestCycle_byMAPE None 0.00040808000032972 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ...  FitMAPE ForecastMAPE TestMAPE
0    None          _AKRX             T+S+R  ...   0.0188       0.0285   0.0143
1    None          _AKRX             T+S+R  ...   0.0189       0.0286   0.0147
2    None          _AKRX             T+S+R  ...   0.0189       0.0286   0.0147
3    None    CumSum_AKRX             T+S+R  ...   0.0189       0.0286   0.0147
4    None      Diff_AKRX             T+S+R  ...   0.0189       0.0286   0.0147
..    ...            ...               ...  ...      ...          ...      ...
219  None    CumSum_AKRX             T+S+R  ...  10.7916       6.5458   1.9815
220  None    CumSum_AKRX             T+S+R  ...  13.7186       7.3222   7.3826
221  None    CumSum_AKRX             T+S+R  ...  13.2645       7.3452   6.6353
222  None    CumSum_AKRX             T+S+R  ...  13.5010       8.8798   9.9086
223  None    CumSum_AKRX             T+S+R  ...  14.8298       9.5686   4.6744

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None          _AKRX             T+S+R  ...  0.0188       0.0285   0.0143
1  None          _AKRX             T+S+R  ...  0.0189       0.0286   0.0147
2  None          _AKRX             T+S+R  ...  0.0189       0.0286   0.0147
3  None    CumSum_AKRX             T+S+R  ...  0.0189       0.0286   0.0147
4  None      Diff_AKRX             T+S+R  ...  0.0189       0.0286   0.0147

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AKRX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.157, ('FORECASTING', {'Signals': ['AKRX'], 'Horizon': 7}))
7 0    30.350000
1    31.799999
2    32.180000
3    32.580002
4    33.180000
5    32.860001
6    34.150002
Name: AKRX, dtype: float64
7 0    31.360001
1    31.360001
2    31.360001
3    31.360001
4    31.360001
5    31.360001
6    31.360001
Name: AKRX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AKRX AKRX [30.35, 31.799999, 32.18, 32.580002, 33.18, 32.860001, 34.150002]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AKRX AKRX [31.360001, 31.360001, 31.360001, 31.360001, 31.360001, 31.360001, 31.360001]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AKRX AKRX 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AKRX AKRX 13.058400630950928
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AKRX AKRX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AKRX AKRX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AKRX AKRX 0.0417 0.0427 1.8533
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AKRX AKRX 1.3714284285714275 1.545546736364513 -0.9641837877055066
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nasdaqbio_AKRX_7'
