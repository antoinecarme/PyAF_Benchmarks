BENCH_DATA YAHOO_STOCKS_nasdaqbio
TIME :  Date N= 1251 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  AMGN N= 1251 H= 7 HEAD= [53.43     54.700001 53.77     53.310001 53.32    ] TAIL= [161.960007 160.520004 162.740005 163.279999 162.929993]
        AMGN       Date
0  53.430000 2011-07-28
1  54.700001 2011-07-29
2  53.770000 2011-08-01
3  53.310001 2011-08-02
4  53.320000 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1251 entries, 0 to 1250
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   AMGN    1251 non-null   float64       
 1   Date    1251 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 29.3 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['AMGN'], 'Transformations': [('AMGN', 'None', '_', 'T+S+R'), ('AMGN', 'None', 'Diff_', 'T+S+R'), ('AMGN', 'None', 'RelDiff_', 'T+S+R'), ('AMGN', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMGN', 'Transformation': '_AMGN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.103, ('TRAINING', {'Signal': 'AMGN', 'Transformation': '_AMGN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMGN', 'Transformation': 'Diff_AMGN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.751, ('TRAINING', {'Signal': 'AMGN', 'Transformation': 'Diff_AMGN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMGN', 'Transformation': 'RelDiff_AMGN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.114, ('TRAINING', {'Signal': 'AMGN', 'Transformation': 'RelDiff_AMGN'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'AMGN', 'Transformation': 'CumSum_AMGN'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.718, ('TRAINING', {'Signal': 'AMGN', 'Transformation': 'CumSum_AMGN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.688, ('SIGNAL_TRAINING', {'Signals': ['AMGN'], 'Transformations': [('AMGN', 'None', '_', 'T+S+R'), ('AMGN', 'None', 'Diff_', 'T+S+R'), ('AMGN', 'None', 'RelDiff_', 'T+S+R'), ('AMGN', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['AMGN'], 'Transformations': [('AMGN', [('AMGN', 'None', 'CumSum_', 'T+S+R'), ('AMGN', 'None', 'Diff_', 'T+S+R'), ('AMGN', 'None', 'RelDiff_', 'T+S+R'), ('AMGN', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'AMGN', 'Transformations': [('AMGN', 'None', 'CumSum_', 'T+S+R'), ('AMGN', 'None', 'Diff_', 'T+S+R'), ('AMGN', 'None', 'RelDiff_', 'T+S+R'), ('AMGN', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': 'AMGN', 'Transformations': [('AMGN', 'None', 'CumSum_', 'T+S+R'), ('AMGN', 'None', 'Diff_', 'T+S+R'), ('AMGN', 'None', 'RelDiff_', 'T+S+R'), ('AMGN', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AMGN', 'Model': '_AMGN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'AMGN', 'Model': '_AMGN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AMGN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.187, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'AMGN'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.223, ('FINALIZE_TRAINING', {'Signals': ['AMGN'], 'Transformations': [('AMGN', [('AMGN', 'None', 'CumSum_', 'T+S+R'), ('AMGN', 'None', 'Diff_', 'T+S+R'), ('AMGN', 'None', 'RelDiff_', 'T+S+R'), ('AMGN', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='AMGN' Length=1251  Min=48.27 Max=176.589996  Mean=115.93529981694617 StdDev=36.24120581689972
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_AMGN' Min=0.0 Max=1.0  Mean=0.5273168791007943 StdDev=0.28242835837447894
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_AMGN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_AMGN_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_AMGN_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_AMGN_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0111 MAPE_Forecast=0.014 MAPE_Test=0.0104
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0111 SMAPE_Forecast=0.014 SMAPE_Test=0.0105
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=1.0027 MASE_Test=1.3903
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=10.142514352237505 CRPS_Forecast=2.154425610614505 CRPS_Test=0.8250013571428545
INFO:pyaf.std:MODEL_L1 L1_Fit=1.1880502361809049 L1_Forecast=2.1462250722891563 L1_Test=1.6800058571428573
INFO:pyaf.std:MODEL_L2 L2_Fit=1.6991392186149974 L2_Forecast=2.799605252014921 L2_Test=2.130431705431249
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.2229325257673167 LnQ_Forecast=0.08327894776764908 LnQ_Test=0.001245172545436721
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.8399959999999993 MedAE_Forecast=1.7700040000000001 MedAE_Test=1.4400029999999902
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.04021197132830332
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _AMGN_Lag1Trend_residue_bestCycle_byMAPE None 0.0006234570019780228 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None          _AMGN             T+S+R  ...  0.0108       0.0137   0.0115
1    None          _AMGN             T+S+R  ...  0.0108       0.0137   0.0119
2    None          _AMGN             T+S+R  ...  0.0111       0.0140   0.0104
3    None          _AMGN             T+S+R  ...  0.0111       0.0140   0.0104
4    None    CumSum_AMGN             T+S+R  ...  0.0112       0.0140   0.0104
..    ...            ...               ...  ...     ...          ...      ...
211  None   RelDiff_AMGN             T+S+R  ...  2.4008      12.5642  46.8043
212  None   RelDiff_AMGN             T+S+R  ...  2.6135      12.5809  47.0647
213  None   RelDiff_AMGN             T+S+R  ...  2.6135      12.5809  47.0647
214  None   RelDiff_AMGN             T+S+R  ...  2.9309      14.4915  55.5501
215  None   RelDiff_AMGN             T+S+R  ...  2.9389      16.1734  63.7007

[216 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None          _AMGN             T+S+R  ...  0.0108       0.0137   0.0115
1  None          _AMGN             T+S+R  ...  0.0108       0.0137   0.0119
2  None          _AMGN             T+S+R  ...  0.0111       0.0140   0.0104
3  None          _AMGN             T+S+R  ...  0.0111       0.0140   0.0104
4  None    CumSum_AMGN             T+S+R  ...  0.0112       0.0140   0.0104

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['AMGN'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.159, ('FORECASTING', {'Signals': ['AMGN'], 'Horizon': 7}))
7 0    162.490005
1    163.250000
2    164.190002
3    165.669998
4    166.559998
5    167.669998
6    170.679993
Name: AMGN, dtype: float64
7 0    162.929993
1    162.929993
2    162.929993
3    162.929993
4    162.929993
5    162.929993
6    162.929993
Name: AMGN_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_AMGN AMGN [162.490005, 163.25, 164.190002, 165.669998, 166.559998, 167.669998, 170.679993]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_AMGN AMGN [162.929993, 162.929993, 162.929993, 162.929993, 162.929993, 162.929993, 162.929993]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_AMGN AMGN 1251 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_AMGN AMGN 12.161190748214722
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_AMGN AMGN Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_AMGN AMGN 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_AMGN AMGN 0.0178 0.018 2.1852
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_AMGN AMGN 2.982859857142858 3.8747963577890867 -1.1915928461254652
BENCHMARK_SUCCESS 'YAHOO_STOCKS_nasdaqbio_AMGN_7'
