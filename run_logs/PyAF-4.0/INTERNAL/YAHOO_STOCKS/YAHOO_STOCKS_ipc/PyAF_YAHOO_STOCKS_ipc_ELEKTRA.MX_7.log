BENCH_DATA YAHOO_STOCKS_ipc
TIME :  Date N= 1295 H= 7 HEAD= ['2011-07-28T00:00:00.000000000' '2011-07-29T00:00:00.000000000'
 '2011-08-01T00:00:00.000000000' '2011-08-02T00:00:00.000000000'
 '2011-08-03T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  ELEKTRA.MX N= 1295 H= 7 HEAD= [821.67 854.93 861.24 821.59 797.85] TAIL= [252.82 252.36 250.99 250.39 253.45]
   ELEKTRA.MX       Date
0      821.67 2011-07-28
1      854.93 2011-07-29
2      861.24 2011-08-01
3      821.59 2011-08-02
4      797.85 2011-08-03
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1295 entries, 0 to 1294
Data columns (total 2 columns):
 #   Column      Non-Null Count  Dtype         
---  ------      --------------  -----         
 0   ELEKTRA.MX  1295 non-null   float64       
 1   Date        1295 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 30.4 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ELEKTRA.MX'], 'Transformations': [('ELEKTRA.MX', 'None', '_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'Diff_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'RelDiff_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ELEKTRA.MX', 'Transformation': '_ELEKTRA.MX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.233, ('TRAINING', {'Signal': 'ELEKTRA.MX', 'Transformation': '_ELEKTRA.MX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ELEKTRA.MX', 'Transformation': 'Diff_ELEKTRA.MX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.851, ('TRAINING', {'Signal': 'ELEKTRA.MX', 'Transformation': 'Diff_ELEKTRA.MX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ELEKTRA.MX', 'Transformation': 'RelDiff_ELEKTRA.MX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.245, ('TRAINING', {'Signal': 'ELEKTRA.MX', 'Transformation': 'RelDiff_ELEKTRA.MX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ELEKTRA.MX', 'Transformation': 'CumSum_ELEKTRA.MX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_END
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.643, ('TRAINING', {'Signal': 'ELEKTRA.MX', 'Transformation': 'CumSum_ELEKTRA.MX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.974, ('SIGNAL_TRAINING', {'Signals': ['ELEKTRA.MX'], 'Transformations': [('ELEKTRA.MX', 'None', '_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'Diff_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'RelDiff_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ELEKTRA.MX'], 'Transformations': [('ELEKTRA.MX', [('ELEKTRA.MX', 'None', 'CumSum_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'Diff_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'RelDiff_', 'T+S+R'), ('ELEKTRA.MX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ELEKTRA.MX', 'Transformations': [('ELEKTRA.MX', 'None', 'CumSum_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'Diff_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'RelDiff_', 'T+S+R'), ('ELEKTRA.MX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': 'ELEKTRA.MX', 'Transformations': [('ELEKTRA.MX', 'None', 'CumSum_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'Diff_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'RelDiff_', 'T+S+R'), ('ELEKTRA.MX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ELEKTRA.MX', 'Model': '_ELEKTRA.MX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ELEKTRA.MX', 'Model': '_ELEKTRA.MX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ELEKTRA.MX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.188, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ELEKTRA.MX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.224, ('FINALIZE_TRAINING', {'Signals': ['ELEKTRA.MX'], 'Transformations': [('ELEKTRA.MX', [('ELEKTRA.MX', 'None', 'CumSum_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'Diff_', 'T+S+R'), ('ELEKTRA.MX', 'None', 'RelDiff_', 'T+S+R'), ('ELEKTRA.MX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-07-28T00:00:00.000000 TimeMax=2015-07-13T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ELEKTRA.MX' Length=1295  Min=250.39 Max=1441.0  Mean=537.8052200772189 StdDev=272.60834208861394
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ELEKTRA.MX' Min=0.0 Max=1.0  Mean=0.24140165131925628 StdDev=0.22896527165790181
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ELEKTRA.MX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ELEKTRA.MX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ELEKTRA.MX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_ELEKTRA.MX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0158 MAPE_Forecast=0.0123 MAPE_Test=0.0059
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0158 SMAPE_Forecast=0.0123 SMAPE_Test=0.0059
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9963 MASE_Test=0.9256
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=71.53474808380173 CRPS_Forecast=8.812066332877338 CRPS_Test=0.5614285714285724
INFO:pyaf.std:MODEL_L1 L1_Fit=10.484213592233012 L1_Forecast=3.977713178294573 L1_Test=1.4871428571428567
INFO:pyaf.std:MODEL_L2 L2_Fit=20.28512253625005 L2_Forecast=5.75029830705808 L2_Test=1.7803169862214356
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.6570167432581075 LnQ_Forecast=0.08088265532460548 LnQ_Test=0.0003484837513335592
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=5.149999999999977 MedAE_Forecast=2.844999999999999 MedAE_Test=1.3100000000000023
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.4798212680894667
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _ELEKTRA.MX_Lag1Trend_residue_bestCycle_byMAPE None -0.00016798111892224465 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split     Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0    None        _ELEKTRA.MX             T+S+R  ...  0.0155       0.0122   0.0056
1    None        _ELEKTRA.MX             T+S+R  ...  0.0155       0.0122   0.0056
2    None        _ELEKTRA.MX             T+S+R  ...  0.0155       0.0122   0.0059
3    None        _ELEKTRA.MX             T+S+R  ...  0.0158       0.0123   0.0059
4    None        _ELEKTRA.MX             T+S+R  ...  0.0158       0.0123   0.0059
..    ...                ...               ...  ...     ...          ...      ...
203  None  CumSum_ELEKTRA.MX             T+S+R  ...  3.4996       5.8047   9.6142
204  None  CumSum_ELEKTRA.MX             T+S+R  ...  4.4458       7.0616   3.2788
205  None  CumSum_ELEKTRA.MX             T+S+R  ...  3.3725       7.1088   3.3858
206  None  CumSum_ELEKTRA.MX             T+S+R  ...  4.7947       8.2892   8.0318
207  None  CumSum_ELEKTRA.MX             T+S+R  ...  7.4997      12.2270  21.0538

[208 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None    _ELEKTRA.MX             T+S+R  ...  0.0155       0.0122   0.0056
1  None    _ELEKTRA.MX             T+S+R  ...  0.0155       0.0122   0.0056
2  None    _ELEKTRA.MX             T+S+R  ...  0.0155       0.0122   0.0059
3  None    _ELEKTRA.MX             T+S+R  ...  0.0158       0.0123   0.0059
4  None    _ELEKTRA.MX             T+S+R  ...  0.0158       0.0123   0.0059

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ELEKTRA.MX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.158, ('FORECASTING', {'Signals': ['ELEKTRA.MX'], 'Horizon': 7}))
7 0    252.34
1    253.97
2    264.05
3    286.36
4    278.68
5    274.74
6    272.32
Name: ELEKTRA.MX, dtype: float64
7 0    253.45
1    253.45
2    253.45
3    253.45
4    253.45
5    253.45
6    253.45
Name: ELEKTRA.MX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_ELEKTRA.MX ELEKTRA.MX [252.34, 253.97, 264.05, 286.36, 278.68, 274.74, 272.32]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_ELEKTRA.MX ELEKTRA.MX [253.45, 253.45, 253.45, 253.45, 253.45, 253.45, 253.45]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_ELEKTRA.MX ELEKTRA.MX 1295 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_ELEKTRA.MX ELEKTRA.MX 12.45606279373169
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_ELEKTRA.MX ELEKTRA.MX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_ELEKTRA.MX ELEKTRA.MX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_ELEKTRA.MX ELEKTRA.MX 0.057 0.0595 1.9713
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_ELEKTRA.MX ELEKTRA.MX 15.790000000000012 19.430552157436434 -1.7331288740546107
BENCHMARK_SUCCESS 'YAHOO_STOCKS_ipc_ELEKTRA.MX_7'
