BENCH_DATA YAHOO_STOCKS_eurindex
TIME :  Date N= 1172 H= 7 HEAD= ['2011-12-13T00:00:00.000000000' '2011-12-14T00:00:00.000000000'
 '2011-12-15T00:00:00.000000000' '2011-12-16T00:00:00.000000000'
 '2011-12-19T00:00:00.000000000'] TAIL= ['2016-07-12T00:00:00.000000000' '2016-07-13T00:00:00.000000000'
 '2016-07-14T00:00:00.000000000' '2016-07-15T00:00:00.000000000'
 '2016-07-18T00:00:00.000000000']
SIGNAL :  ^AMX N= 1172 H= 7 HEAD= [447.100006 431.709991 438.540009 438.790009 438.75    ] TAIL= [620.570007 618.609985 622.109985 617.090027 622.01001 ]
         ^AMX       Date
0  447.100006 2011-12-13
1  431.709991 2011-12-14
2  438.540009 2011-12-15
3  438.790009 2011-12-16
4  438.750000 2011-12-19
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1172 entries, 0 to 1171
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   ^AMX    1172 non-null   float64       
 1   Date    1172 non-null   datetime64[ns]
dtypes: datetime64[ns](1), float64(1)
memory usage: 27.5 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['^AMX'], 'Transformations': [('^AMX', 'None', '_', 'T+S+R'), ('^AMX', 'None', 'Diff_', 'T+S+R'), ('^AMX', 'None', 'RelDiff_', 'T+S+R'), ('^AMX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '^AMX', 'Transformation': '_^AMX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.239, ('TRAINING', {'Signal': '^AMX', 'Transformation': '_^AMX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '^AMX', 'Transformation': 'Diff_^AMX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.764, ('TRAINING', {'Signal': '^AMX', 'Transformation': 'Diff_^AMX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '^AMX', 'Transformation': 'RelDiff_^AMX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.169, ('TRAINING', {'Signal': '^AMX', 'Transformation': 'RelDiff_^AMX'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': '^AMX', 'Transformation': 'CumSum_^AMX'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.857, ('TRAINING', {'Signal': '^AMX', 'Transformation': 'CumSum_^AMX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 12.031, ('SIGNAL_TRAINING', {'Signals': ['^AMX'], 'Transformations': [('^AMX', 'None', '_', 'T+S+R'), ('^AMX', 'None', 'Diff_', 'T+S+R'), ('^AMX', 'None', 'RelDiff_', 'T+S+R'), ('^AMX', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['^AMX'], 'Transformations': [('^AMX', [('^AMX', 'None', 'CumSum_', 'T+S+R'), ('^AMX', 'None', 'Diff_', 'T+S+R'), ('^AMX', 'None', 'RelDiff_', 'T+S+R'), ('^AMX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': '^AMX', 'Transformations': [('^AMX', 'None', 'CumSum_', 'T+S+R'), ('^AMX', 'None', 'Diff_', 'T+S+R'), ('^AMX', 'None', 'RelDiff_', 'T+S+R'), ('^AMX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': '^AMX', 'Transformations': [('^AMX', 'None', 'CumSum_', 'T+S+R'), ('^AMX', 'None', 'Diff_', 'T+S+R'), ('^AMX', 'None', 'RelDiff_', 'T+S+R'), ('^AMX', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': '^AMX', 'Model': '_^AMX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.03, ('UPDATE_BEST_MODEL_PERFS', {'Signal': '^AMX', 'Model': '_^AMX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '^AMX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.184, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': '^AMX'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.221, ('FINALIZE_TRAINING', {'Signals': ['^AMX'], 'Transformations': [('^AMX', [('^AMX', 'None', 'CumSum_', 'T+S+R'), ('^AMX', 'None', 'Diff_', 'T+S+R'), ('^AMX', 'None', 'RelDiff_', 'T+S+R'), ('^AMX', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2011-12-13T00:00:00.000000 TimeMax=2015-08-11T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='^AMX' Length=1172  Min=431.709991 Max=790.049988  Mean=605.030512814847 StdDev=76.88201349245944
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_^AMX' Min=0.0 Max=1.0  Mean=0.483676182580441 StdDev=0.21455046641767822
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_^AMX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_^AMX_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_^AMX_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_^AMX_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0073 MAPE_Forecast=0.0108 MAPE_Test=0.0118
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0073 SMAPE_Forecast=0.0108 SMAPE_Test=0.0119
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9989 MASE_Forecast=1.005 MASE_Test=1.1806
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=23.4369770541501 CRPS_Forecast=7.303700441207775 CRPS_Test=4.589996214285724
INFO:pyaf.std:MODEL_L1 L1_Fit=4.294978958154506 L1_Forecast=7.020943965665233 L1_Test=7.2214267142857285
INFO:pyaf.std:MODEL_L2 L2_Fit=5.720050221146616 L2_Forecast=9.422986242481413 L2_Test=8.579151607452776
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.09092986600398781 LnQ_Forecast=0.05045274603587285 LnQ_Test=0.0014141117130467582
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=3.2600099999999657 MedAE_Forecast=5.42999199999997 MedAE_Test=5.019958000000088
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.04294808039527892
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _^AMX_Lag1Trend_residue_bestCycle_byMAPE None 0.0017023385753948406 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
    Split Transformation DecompositionType  ...  FitMAPE ForecastMAPE   TestMAPE
0    None          _^AMX             T+S+R  ...   0.0073       0.0108     0.0118
1    None          _^AMX             T+S+R  ...   0.0073       0.0108     0.0118
2    None    CumSum_^AMX             T+S+R  ...   0.0073       0.0108     0.0118
3    None      Diff_^AMX             T+S+R  ...   0.0073       0.0108     0.0118
4    None      Diff_^AMX             T+S+R  ...   0.0073       0.0108     0.0118
..    ...            ...               ...  ...      ...          ...        ...
219  None   RelDiff_^AMX             T+S+R  ...   7.0051      77.8798   413.2257
220  None   RelDiff_^AMX             T+S+R  ...   6.7469      91.7195   640.3662
221  None   RelDiff_^AMX             T+S+R  ...   8.8623     129.0779   674.5289
222  None   RelDiff_^AMX             T+S+R  ...  10.7033     189.1172  1069.2860
223  None   RelDiff_^AMX             T+S+R  ...  12.0371     248.7625  1412.2837

[224 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None          _^AMX             T+S+R  ...  0.0073       0.0108   0.0118
1  None          _^AMX             T+S+R  ...  0.0073       0.0108   0.0118
2  None    CumSum_^AMX             T+S+R  ...  0.0073       0.0108   0.0118
3  None      Diff_^AMX             T+S+R  ...  0.0073       0.0108   0.0118
4  None      Diff_^AMX             T+S+R  ...  0.0073       0.0108   0.0118

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['^AMX'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.152, ('FORECASTING', {'Signals': ['^AMX'], 'Horizon': 7}))
7 0    620.760010
1    624.489990
2    626.780029
3    625.049988
4    628.210022
5    630.159973
6    633.489990
Name: ^AMX, dtype: float64
7 0    622.01001
1    622.01001
2    622.01001
3    622.01001
4    622.01001
5    622.01001
6    622.01001
Name: ^AMX_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL Yahoo_Stock_Price_^AMX ^AMX [620.76001, 624.48999, 626.780029, 625.049988, 628.210022, 630.159973, 633.48999]
FORECAST_DETAIL_PREDICTED Yahoo_Stock_Price_^AMX ^AMX [622.01001, 622.01001, 622.01001, 622.01001, 622.01001, 622.01001, 622.01001]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON Yahoo_Stock_Price_^AMX ^AMX 1172 7
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ Yahoo_Stock_Price_^AMX ^AMX 12.497166156768799
BENCHMARK_PERF_DETAIL_BEST_MODEL Yahoo_Stock_Price_^AMX ^AMX Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT Yahoo_Stock_Price_^AMX ^AMX 7
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE Yahoo_Stock_Price_^AMX ^AMX 0.0085 0.0085 1.9785
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 Yahoo_Stock_Price_^AMX ^AMX 5.338561714285755 6.283303667011507 -1.6920494947381601
BENCHMARK_SUCCESS 'YAHOO_STOCKS_eurindex_^AMX_7'
