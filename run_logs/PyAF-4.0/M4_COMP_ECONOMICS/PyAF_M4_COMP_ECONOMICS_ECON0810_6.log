BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 38 H= 6 HEAD= [0 1 2 3 4] TAIL= [33 34 35 36 37]
SIGNAL :  ECON0810 N= 38 H= 6 HEAD= [ 69733.  78962.  88681.  93829. 110421.] TAIL= [3013800. 3221436. 3483454. 3710807. 3693238.]
   ECON0810  Date
0   69733.0     0
1   78962.0     1
2   88681.0     2
3   93829.0     3
4  110421.0     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 38 entries, 0 to 37
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0810  38 non-null     float64
 1   Date      38 non-null     int64  
dtypes: float64(1), int64(1)
memory usage: 912.0 bytes
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0810'], 'Transformations': [('ECON0810', 'None', '_', 'T+S+R'), ('ECON0810', 'None', 'Diff_', 'T+S+R'), ('ECON0810', 'None', 'RelDiff_', 'T+S+R'), ('ECON0810', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0810', 'Transformation': '_ECON0810'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.103, ('TRAINING', {'Signal': 'ECON0810', 'Transformation': '_ECON0810'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0810', 'Transformation': 'Diff_ECON0810'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.482, ('TRAINING', {'Signal': 'ECON0810', 'Transformation': 'Diff_ECON0810'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0810', 'Transformation': 'RelDiff_ECON0810'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.566, ('TRAINING', {'Signal': 'ECON0810', 'Transformation': 'RelDiff_ECON0810'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0810', 'Transformation': 'CumSum_ECON0810'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.433, ('TRAINING', {'Signal': 'ECON0810', 'Transformation': 'CumSum_ECON0810'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.586, ('SIGNAL_TRAINING', {'Signals': ['ECON0810'], 'Transformations': [('ECON0810', 'None', '_', 'T+S+R'), ('ECON0810', 'None', 'Diff_', 'T+S+R'), ('ECON0810', 'None', 'RelDiff_', 'T+S+R'), ('ECON0810', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0810'], 'Transformations': [('ECON0810', [('ECON0810', 'None', 'CumSum_', 'T+S+R'), ('ECON0810', 'None', 'Diff_', 'T+S+R'), ('ECON0810', 'None', 'RelDiff_', 'T+S+R'), ('ECON0810', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0810', 'Transformations': [('ECON0810', 'None', 'CumSum_', 'T+S+R'), ('ECON0810', 'None', 'Diff_', 'T+S+R'), ('ECON0810', 'None', 'RelDiff_', 'T+S+R'), ('ECON0810', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'ECON0810', 'Transformations': [('ECON0810', 'None', 'CumSum_', 'T+S+R'), ('ECON0810', 'None', 'Diff_', 'T+S+R'), ('ECON0810', 'None', 'RelDiff_', 'T+S+R'), ('ECON0810', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0810', 'Model': 'Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_AR(9)'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.022, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0810', 'Model': 'Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_AR(9)'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0810'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.132, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0810'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.161, ('FINALIZE_TRAINING', {'Signals': ['ECON0810'], 'Transformations': [('ECON0810', [('ECON0810', 'None', 'CumSum_', 'T+S+R'), ('ECON0810', 'None', 'Diff_', 'T+S+R'), ('ECON0810', 'None', 'RelDiff_', 'T+S+R'), ('ECON0810', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=24 TimeDelta=1 Horizon=6
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0810' Length=38  Min=69733.0 Max=3710807.0  Mean=1354376.4473684211 StdDev=1178082.7035182542
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='Diff_ECON0810' Min=-0.00482522464525581 Max=0.07196173436738729  Mean=0.026188809877756427 StdDev=0.019429388310392974
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE 'Diff_'
INFO:pyaf.std:BEST_DECOMPOSITION  'Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_AR(9)' [Lag1Trend + Cycle_None + AR]
INFO:pyaf.std:TREND_DETAIL 'Diff_ECON0810_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL 'Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL 'Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_AR(9)' [AR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0415 MAPE_Forecast=0.0107 MAPE_Test=0.0222
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0414 SMAPE_Forecast=0.0108 SMAPE_Test=0.0221
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.3286 MASE_Forecast=0.2023 MASE_Test=0.4361
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=145172.5333329821 CRPS_Forecast=106317.81277713287 CRPS_Test=157418.2140351604
INFO:pyaf.std:MODEL_L1 L1_Fit=23993.428345778426 L1_Forecast=24123.267268885225 L1_Test=77571.4587455967
INFO:pyaf.std:MODEL_L2 L2_Fit=36973.65855822185 L2_Forecast=31360.02110099714 L2_Test=94709.2302584156
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.06593344055438763 LnQ_Forecast=0.0015247637014775709 LnQ_Test=0.004134290425522455
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=12230.906537846458 MedAE_Forecast=20417.14905689843 MedAE_Test=67262.6841162797
INFO:pyaf.std:MODEL_COMPLEXITY 9.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:DIFFERENCING_TRANSFORMATION Difference 0.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE None 0.0007423633795962392 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_COEFF 1 Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_Lag4 0.0006410409172965543
INFO:pyaf.std:AR_MODEL_COEFF 2 Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_Lag2 -0.0004800261115233417
INFO:pyaf.std:AR_MODEL_COEFF 3 Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_Lag1 -0.00022011949962032716
INFO:pyaf.std:AR_MODEL_COEFF 4 Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_Lag5 -0.00021846799656678246
INFO:pyaf.std:AR_MODEL_COEFF 5 Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_Lag7 -0.00019296287451665126
INFO:pyaf.std:AR_MODEL_COEFF 6 Diff_ECON0810_Lag1Trend_residue_bestCycle_byMAPE_residue_Lag6 -0.0001083456637064633
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0   None     Diff_ECON0810             T+S+R  ...  0.0415       0.0107   0.0222
1   None     Diff_ECON0810             T+S+R  ...  0.0415       0.0107   0.0222
2   None   CumSum_ECON0810             T+S+R  ...  0.1984       0.0116   0.0270
3   None   CumSum_ECON0810             T+S+R  ...  0.1984       0.0116   0.0270
4   None         _ECON0810             T+S+R  ...  0.2253       0.0238   0.0361
..   ...               ...               ...  ...     ...          ...      ...
59  None  RelDiff_ECON0810             T+S+R  ...  0.6945       0.9698   0.9788
60  None  RelDiff_ECON0810             T+S+R  ...  0.6945       0.9698   0.9788
61  None  RelDiff_ECON0810             T+S+R  ...  0.6945       0.9698   0.9788
62  None  RelDiff_ECON0810             T+S+R  ...  0.6945       0.9698   0.9788
63  None  RelDiff_ECON0810             T+S+R  ...  0.6945       0.9698   0.9788

[64 rows x 10 columns]
  Split   Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None    Diff_ECON0810             T+S+R  ...  0.0415       0.0107   0.0222
1  None    Diff_ECON0810             T+S+R  ...  0.0415       0.0107   0.0222
2  None  CumSum_ECON0810             T+S+R  ...  0.1984       0.0116   0.0270
3  None  CumSum_ECON0810             T+S+R  ...  0.1984       0.0116   0.0270
4  None        _ECON0810             T+S+R  ...  0.2253       0.0238   0.0361

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0810'], 'Horizon': 6}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.106, ('FORECASTING', {'Signals': ['ECON0810'], 'Horizon': 6}))
6 0    3690327.0
1    3740685.0
2    3742476.0
3    3867623.0
4    3904060.0
5    3785535.0
Name: ECON0810, dtype: float64
6 0    3.856049e+06
1    4.023133e+06
2    4.194258e+06
3    4.369394e+06
4    4.548866e+06
5    4.732507e+06
Name: ECON0810_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0810 ECON0810 [3690327.0, 3740685.0, 3742476.0, 3867623.0, 3904060.0, 3785535.0]
FORECAST_DETAIL_PREDICTED ECON0810 ECON0810 [3856048.995739775, 4023132.543978684, 4194257.602301946, 4369393.86691955, 4548865.507410266, 4732506.623212058]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0810 ECON0810 38 6
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0810 ECON0810 2.9569530487060547
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0810 ECON0810 Lag1Trend + Cycle_None + AR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0810 ECON0810 6
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0810 ECON0810 0.131 0.1212 7.508
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0810 ECON0810 498916.5232603799 559113.9436040395 -54.71388841678623
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0810_6'
