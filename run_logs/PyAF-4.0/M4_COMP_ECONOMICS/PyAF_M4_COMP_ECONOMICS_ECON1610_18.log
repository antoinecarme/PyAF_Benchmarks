BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 131 H= 18 HEAD= [0 1 2 3 4] TAIL= [126 127 128 129 130]
SIGNAL :  ECON1610 N= 131 H= 18 HEAD= [80.6 81.  81.2 81.5 81.9] TAIL= [102.4 102.2 102.9 103.1 103.2]
   ECON1610  Date
0      80.6     0
1      81.0     1
2      81.2     2
3      81.5     3
4      81.9     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 131 entries, 0 to 130
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON1610  131 non-null    float64
 1   Date      131 non-null    int64  
dtypes: float64(1), int64(1)
memory usage: 3.1 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON1610'], 'Transformations': [('ECON1610', 'None', '_', 'T+S+R'), ('ECON1610', 'None', 'Diff_', 'T+S+R'), ('ECON1610', 'None', 'RelDiff_', 'T+S+R'), ('ECON1610', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON1610', 'Transformation': '_ECON1610'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.02, ('TRAINING', {'Signal': 'ECON1610', 'Transformation': '_ECON1610'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON1610', 'Transformation': 'Diff_ECON1610'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.568, ('TRAINING', {'Signal': 'ECON1610', 'Transformation': 'Diff_ECON1610'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON1610', 'Transformation': 'RelDiff_ECON1610'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.619, ('TRAINING', {'Signal': 'ECON1610', 'Transformation': 'RelDiff_ECON1610'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON1610', 'Transformation': 'CumSum_ECON1610'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.485, ('TRAINING', {'Signal': 'ECON1610', 'Transformation': 'CumSum_ECON1610'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.694, ('SIGNAL_TRAINING', {'Signals': ['ECON1610'], 'Transformations': [('ECON1610', 'None', '_', 'T+S+R'), ('ECON1610', 'None', 'Diff_', 'T+S+R'), ('ECON1610', 'None', 'RelDiff_', 'T+S+R'), ('ECON1610', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON1610'], 'Transformations': [('ECON1610', [('ECON1610', 'None', 'CumSum_', 'T+S+R'), ('ECON1610', 'None', 'Diff_', 'T+S+R'), ('ECON1610', 'None', 'RelDiff_', 'T+S+R'), ('ECON1610', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON1610', 'Transformations': [('ECON1610', 'None', 'CumSum_', 'T+S+R'), ('ECON1610', 'None', 'Diff_', 'T+S+R'), ('ECON1610', 'None', 'RelDiff_', 'T+S+R'), ('ECON1610', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'ECON1610', 'Transformations': [('ECON1610', 'None', 'CumSum_', 'T+S+R'), ('ECON1610', 'None', 'Diff_', 'T+S+R'), ('ECON1610', 'None', 'RelDiff_', 'T+S+R'), ('ECON1610', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON1610', 'Model': 'Diff_ECON1610_ConstantTrend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.021, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON1610', 'Model': 'Diff_ECON1610_ConstantTrend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON1610'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.404, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON1610'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.431, ('FINALIZE_TRAINING', {'Signals': ['ECON1610'], 'Transformations': [('ECON1610', [('ECON1610', 'None', 'CumSum_', 'T+S+R'), ('ECON1610', 'None', 'Diff_', 'T+S+R'), ('ECON1610', 'None', 'RelDiff_', 'T+S+R'), ('ECON1610', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=89 TimeDelta=1 Horizon=18
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON1610' Length=131  Min=80.6 Max=103.2  Mean=91.23664122137406 StdDev=6.626838861686528
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='Diff_ECON1610' Min=-0.04424778761061943 Max=0.053097345132743556  Mean=0.007633587786259542 StdDev=0.015435284182004634
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE 'Diff_'
INFO:pyaf.std:BEST_DECOMPOSITION  'Diff_ECON1610_ConstantTrend_residue_zeroCycle[0.0]_residue_NoAR' [ConstantTrend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL 'Diff_ECON1610_ConstantTrend' [ConstantTrend]
INFO:pyaf.std:CYCLE_DETAIL 'Diff_ECON1610_ConstantTrend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL 'Diff_ECON1610_ConstantTrend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0096 MAPE_Forecast=0.004 MAPE_Test=0.0041
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0096 SMAPE_Forecast=0.004 SMAPE_Test=0.0041
INFO:pyaf.std:MODEL_MASE MASE_Fit=3.7232 MASE_Forecast=0.9001 MASE_Test=1.0643
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=1.32740938271605 CRPS_Forecast=0.41931159420290437 CRPS_Test=0.3313888888888904
INFO:pyaf.std:MODEL_L1 L1_Fit=0.8492222222222183 L1_Forecast=0.3886956521739191 L1_Test=0.4194444444444269
INFO:pyaf.std:MODEL_L2 L2_Fit=0.9946104765183149 L2_Forecast=0.5363969976896287 L2_Test=0.5111696826342808
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.011231426884055857 LnQ_Forecast=0.0006930879383596508 LnQ_Test=0.0004576993177554793
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.875 MedAE_Forecast=0.27000000000002444 MedAE_Test=0.3699999999999548
INFO:pyaf.std:MODEL_COMPLEXITY 1.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:DIFFERENCING_TRANSFORMATION Difference 0.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:CONSTANT_TREND Diff_ECON1610_ConstantTrend 0.007522123893805313
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES Diff_ECON1610_ConstantTrend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0   None     Diff_ECON1610             T+S+R  ...  0.0095       0.0038   0.0042
1   None     Diff_ECON1610             T+S+R  ...  0.0096       0.0039   0.0040
2   None         _ECON1610             T+S+R  ...  0.0020       0.0039   0.0037
3   None         _ECON1610             T+S+R  ...  0.0020       0.0039   0.0037
4   None     Diff_ECON1610             T+S+R  ...  0.0022       0.0039   0.0036
..   ...               ...               ...  ...     ...          ...      ...
59  None  RelDiff_ECON1610             T+S+R  ...  0.0770       0.1750   0.2061
60  None  RelDiff_ECON1610             T+S+R  ...  0.0770       0.1750   0.2061
61  None  RelDiff_ECON1610             T+S+R  ...  0.0770       0.1750   0.2061
62  None  RelDiff_ECON1610             T+S+R  ...  0.0770       0.1750   0.2061
63  None  RelDiff_ECON1610             T+S+R  ...  0.0770       0.1750   0.2061

[64 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None  Diff_ECON1610             T+S+R  ...  0.0095       0.0038   0.0042
1  None  Diff_ECON1610             T+S+R  ...  0.0096       0.0039   0.0040
2  None      _ECON1610             T+S+R  ...  0.0020       0.0039   0.0037
3  None      _ECON1610             T+S+R  ...  0.0020       0.0039   0.0037
4  None  Diff_ECON1610             T+S+R  ...  0.0022       0.0039   0.0036

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON1610'], 'Horizon': 18}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.276, ('FORECASTING', {'Signals': ['ECON1610'], 'Horizon': 18}))
18 0     103.3
1     102.2
2     102.3
3     103.5
4     104.1
5     104.5
6     104.7
7     104.1
8     103.9
9     104.7
10    105.5
11    105.9
12    106.2
13    105.4
14    105.5
15    107.2
16    107.8
17    108.4
Name: ECON1610, dtype: float64
18 0     103.04
1     103.21
2     103.38
3     103.55
4     103.72
5     103.89
6     104.06
7     104.23
8     104.40
9     104.57
10    104.74
11    104.91
12    105.08
13    105.25
14    105.42
15    105.59
16    105.76
17    105.93
Name: ECON1610_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON1610 ECON1610 [103.3, 102.2, 102.3, 103.5, 104.1, 104.5, 104.7, 104.1, 103.9, 104.7, 105.5, 105.9, 106.2, 105.4, 105.5, 107.2, 107.8, 108.4]
FORECAST_DETAIL_PREDICTED ECON1610 ECON1610 [103.04000000000006, 103.21000000000006, 103.38000000000005, 103.55000000000005, 103.72000000000006, 103.89000000000006, 104.06000000000006, 104.23000000000005, 104.40000000000005, 104.57000000000005, 104.74000000000005, 104.91000000000005, 105.08000000000004, 105.25000000000004, 105.42000000000004, 105.59000000000003, 105.76000000000005, 105.93000000000004]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON1610 ECON1610 131 18
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON1610 ECON1610 3.492405652999878
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON1610 ECON1610 ConstantTrend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON1610 ECON1610 18
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON1610 ECON1610 0.0074 0.0074 1.2602
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON1610 ECON1610 0.7783333333333139 1.0317757077539067 0.6216347082061138
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON1610_18'
