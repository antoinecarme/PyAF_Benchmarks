BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 47 H= 18 HEAD= [0 1 2 3 4] TAIL= [42 43 44 45 46]
SIGNAL :  ECON0905 N= 47 H= 18 HEAD= [ 89.2  91.9 100.6  98.1  91.8] TAIL= [100.2  99.8 100.6 101.8 103.2]
   ECON0905  Date
0      89.2     0
1      91.9     1
2     100.6     2
3      98.1     3
4      91.8     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 47 entries, 0 to 46
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0905  47 non-null     float64
 1   Date      47 non-null     int64  
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0905'], 'Transformations': [('ECON0905', 'None', '_', 'T+S+R'), ('ECON0905', 'None', 'Diff_', 'T+S+R'), ('ECON0905', 'None', 'RelDiff_', 'T+S+R'), ('ECON0905', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0905', 'Transformation': '_ECON0905'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.907, ('TRAINING', {'Signal': 'ECON0905', 'Transformation': '_ECON0905'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0905', 'Transformation': 'Diff_ECON0905'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.477, ('TRAINING', {'Signal': 'ECON0905', 'Transformation': 'Diff_ECON0905'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0905', 'Transformation': 'RelDiff_ECON0905'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.571, ('TRAINING', {'Signal': 'ECON0905', 'Transformation': 'RelDiff_ECON0905'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0905', 'Transformation': 'CumSum_ECON0905'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.434, ('TRAINING', {'Signal': 'ECON0905', 'Transformation': 'CumSum_ECON0905'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.391, ('SIGNAL_TRAINING', {'Signals': ['ECON0905'], 'Transformations': [('ECON0905', 'None', '_', 'T+S+R'), ('ECON0905', 'None', 'Diff_', 'T+S+R'), ('ECON0905', 'None', 'RelDiff_', 'T+S+R'), ('ECON0905', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0905'], 'Transformations': [('ECON0905', [('ECON0905', 'None', 'CumSum_', 'T+S+R'), ('ECON0905', 'None', 'Diff_', 'T+S+R'), ('ECON0905', 'None', 'RelDiff_', 'T+S+R'), ('ECON0905', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0905', 'Transformations': [('ECON0905', 'None', 'CumSum_', 'T+S+R'), ('ECON0905', 'None', 'Diff_', 'T+S+R'), ('ECON0905', 'None', 'RelDiff_', 'T+S+R'), ('ECON0905', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'ECON0905', 'Transformations': [('ECON0905', 'None', 'CumSum_', 'T+S+R'), ('ECON0905', 'None', 'Diff_', 'T+S+R'), ('ECON0905', 'None', 'RelDiff_', 'T+S+R'), ('ECON0905', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0905', 'Model': 'Diff_ECON0905_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.021, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0905', 'Model': 'Diff_ECON0905_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0905'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.374, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0905'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.402, ('FINALIZE_TRAINING', {'Signals': ['ECON0905'], 'Transformations': [('ECON0905', [('ECON0905', 'None', 'CumSum_', 'T+S+R'), ('ECON0905', 'None', 'Diff_', 'T+S+R'), ('ECON0905', 'None', 'RelDiff_', 'T+S+R'), ('ECON0905', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=46 TimeDelta=1 Horizon=18
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0905' Length=47  Min=88.5 Max=104.6  Mean=96.90212765957448 StdDev=4.099739969009042
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='Diff_ECON0905' Min=-0.391304347826087 Max=0.5403726708074529  Mean=0.018501387604070312 StdDev=0.1721697508565113
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE 'Diff_'
INFO:pyaf.std:BEST_DECOMPOSITION  'Diff_ECON0905_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR' [ConstantTrend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL 'Diff_ECON0905_ConstantTrend' [ConstantTrend]
INFO:pyaf.std:CYCLE_DETAIL 'Diff_ECON0905_ConstantTrend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL 'Diff_ECON0905_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0235 MAPE_Forecast=0.0235 MAPE_Test=0.0235
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0237 SMAPE_Forecast=0.0237 SMAPE_Test=0.0237
INFO:pyaf.std:MODEL_MASE MASE_Fit=1.1122 MASE_Forecast=1.1122 MASE_Test=1.1122
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=1.0591233628661958 CRPS_Forecast=1.0591233628661958 CRPS_Test=1.0591233628661958
INFO:pyaf.std:MODEL_L1 L1_Fit=2.2968764146672696 L1_Forecast=2.2968764146672696 L1_Test=2.2968764146672696
INFO:pyaf.std:MODEL_L2 L2_Fit=3.0683610109956243 L2_Forecast=3.0683610109956243 L2_Test=3.0683610109956243
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.04751257489301633 LnQ_Forecast=0.04751257489301633 LnQ_Test=0.04751257489301633
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=1.8808510638297946 MedAE_Forecast=1.8808510638297946 MedAE_Test=1.8808510638297946
INFO:pyaf.std:MODEL_COMPLEXITY 1.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:DIFFERENCING_TRANSFORMATION Difference 0.04347826086956541
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:CONSTANT_TREND Diff_ECON0905_ConstantTrend 0.018501387604070312
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES Diff_ECON0905_ConstantTrend_residue_bestCycle_byMAPE None 0.006343332892824478 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation  ... ForecastMAPE     TestMAPE
0   None         _ECON0905  ...       0.0170       0.0170
1   None         _ECON0905  ...       0.0170       0.0170
2   None     Diff_ECON0905  ...       0.0171       0.0171
3   None     Diff_ECON0905  ...       0.0171       0.0171
4   None         _ECON0905  ...       0.0186       0.0186
..   ...               ...  ...          ...          ...
59  None  RelDiff_ECON0905  ...  356872.4102  356872.4102
60  None  RelDiff_ECON0905  ...  412505.6565  412505.6565
61  None  RelDiff_ECON0905  ...  412505.6565  412505.6565
62  None  RelDiff_ECON0905  ...  420873.2235  420873.2235
63  None  RelDiff_ECON0905  ...  420873.2235  420873.2235

[64 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None      _ECON0905             T+S+R  ...  0.0170       0.0170   0.0170
1  None      _ECON0905             T+S+R  ...  0.0170       0.0170   0.0170
2  None  Diff_ECON0905             T+S+R  ...  0.0171       0.0171   0.0171
3  None  Diff_ECON0905             T+S+R  ...  0.0171       0.0171   0.0171
4  None      _ECON0905             T+S+R  ...  0.0186       0.0186   0.0186

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0905'], 'Horizon': 18}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.272, ('FORECASTING', {'Signals': ['ECON0905'], 'Horizon': 18}))
18 0     101.5
1     102.1
2     100.1
3     104.5
4     103.7
5     104.0
6     102.4
7     103.8
8     103.1
9     102.0
10    101.8
11    103.5
12    104.8
13    102.6
14     99.5
15     96.4
16     90.7
17     95.0
Name: ECON0905, dtype: float64
18 0     103.497872
1     103.795745
2     104.093617
3     104.391489
4     104.689362
5     104.987234
6     105.285106
7     105.582979
8     105.880851
9     106.178723
10    106.476596
11    106.774468
12    107.072340
13    107.370213
14    107.668085
15    107.965957
16    108.263830
17    108.561702
Name: ECON0905_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0905 ECON0905 [101.5, 102.1, 100.1, 104.5, 103.7, 104.0, 102.4, 103.8, 103.1, 102.0, 101.8, 103.5, 104.8, 102.6, 99.5, 96.4, 90.7, 95.0]
FORECAST_DETAIL_PREDICTED ECON0905 ECON0905 [103.49787234042553, 103.79574468085106, 104.09361702127659, 104.39148936170211, 104.68936170212766, 104.98723404255318, 105.28510638297871, 105.58297872340424, 105.88085106382978, 106.17872340425531, 106.47659574468084, 106.77446808510638, 107.0723404255319, 107.37021276595743, 107.66808510638296, 107.96595744680849, 108.26382978723403, 108.56170212765956]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0905 ECON0905 47 18
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0905 ECON0905 3.163835048675537
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0905 ECON0905 ConstantTrend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0905 ECON0905 18
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0905 ECON0905 0.0497 0.0473 2.3886
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0905 ECON0905 4.847399527186752 6.7284098918730075 -2.4716010854254025
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0905_18'
