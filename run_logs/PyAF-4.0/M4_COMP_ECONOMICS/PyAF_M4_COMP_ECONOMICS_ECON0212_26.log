BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 1303 H= 26 HEAD= [0 1 2 3 4] TAIL= [1298 1299 1300 1301 1302]
SIGNAL :  ECON0212 N= 1303 H= 26 HEAD= [1.531 2.422 2.105 1.967 1.598] TAIL= [6.323 4.953 4.959 4.592 4.618]
   ECON0212  Date
0     1.531     0
1     2.422     1
2     2.105     2
3     1.967     3
4     1.598     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1303 entries, 0 to 1302
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0212  1303 non-null   float64
 1   Date      1303 non-null   int64  
dtypes: float64(1), int64(1)
memory usage: 30.5 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0212'], 'Transformations': [('ECON0212', 'None', '_', 'T+S+R'), ('ECON0212', 'None', 'Diff_', 'T+S+R'), ('ECON0212', 'None', 'RelDiff_', 'T+S+R'), ('ECON0212', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0212', 'Transformation': '_ECON0212'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.522, ('TRAINING', {'Signal': 'ECON0212', 'Transformation': '_ECON0212'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0212', 'Transformation': 'Diff_ECON0212'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.788, ('TRAINING', {'Signal': 'ECON0212', 'Transformation': 'Diff_ECON0212'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0212', 'Transformation': 'RelDiff_ECON0212'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.878, ('TRAINING', {'Signal': 'ECON0212', 'Transformation': 'RelDiff_ECON0212'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0212', 'Transformation': 'CumSum_ECON0212'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.755, ('TRAINING', {'Signal': 'ECON0212', 'Transformation': 'CumSum_ECON0212'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.945, ('SIGNAL_TRAINING', {'Signals': ['ECON0212'], 'Transformations': [('ECON0212', 'None', '_', 'T+S+R'), ('ECON0212', 'None', 'Diff_', 'T+S+R'), ('ECON0212', 'None', 'RelDiff_', 'T+S+R'), ('ECON0212', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0212'], 'Transformations': [('ECON0212', [('ECON0212', 'None', 'CumSum_', 'T+S+R'), ('ECON0212', 'None', 'Diff_', 'T+S+R'), ('ECON0212', 'None', 'RelDiff_', 'T+S+R'), ('ECON0212', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0212', 'Transformations': [('ECON0212', 'None', 'CumSum_', 'T+S+R'), ('ECON0212', 'None', 'Diff_', 'T+S+R'), ('ECON0212', 'None', 'RelDiff_', 'T+S+R'), ('ECON0212', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'ECON0212', 'Transformations': [('ECON0212', 'None', 'CumSum_', 'T+S+R'), ('ECON0212', 'None', 'Diff_', 'T+S+R'), ('ECON0212', 'None', 'RelDiff_', 'T+S+R'), ('ECON0212', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0212', 'Model': '_ECON0212_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.027, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0212', 'Model': '_ECON0212_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0212'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.731, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0212'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.764, ('FINALIZE_TRAINING', {'Signals': ['ECON0212'], 'Transformations': [('ECON0212', [('ECON0212', 'None', 'CumSum_', 'T+S+R'), ('ECON0212', 'None', 'Diff_', 'T+S+R'), ('ECON0212', 'None', 'RelDiff_', 'T+S+R'), ('ECON0212', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=1020 TimeDelta=1 Horizon=26
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0212' Length=1303  Min=1.258 Max=12.36  Mean=5.666131235610125 StdDev=2.9073716199382993
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ECON0212' Min=0.0 Max=1.0  Mean=0.3970573982714942 StdDev=0.26187818590689044
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ECON0212_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ECON0212_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ECON0212_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_ECON0212_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0456 MAPE_Forecast=0.0174 MAPE_Test=0.0343
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0455 SMAPE_Forecast=0.0173 SMAPE_Test=0.0318
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9989 MASE_Test=0.9761
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.7966209108716944 CRPS_Forecast=0.4843279724264705 CRPS_Test=0.2206269230769231
INFO:pyaf.std:MODEL_L1 L1_Fit=0.1660293829578844 L1_Forecast=0.1555859375 L1_Test=0.20150000000000007
INFO:pyaf.std:MODEL_L2 L2_Fit=0.2484055875884273 L2_Forecast=0.2905417084946669 L2_Test=0.4348595263901986
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=5.848538177150106 LnQ_Forecast=0.25653974375773025 LnQ_Test=0.12664321445125434
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.1060000000000001 MedAE_Forecast=0.038000000000000256 MedAE_Test=0.04999999999999982
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.024590163934426222
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _ECON0212_Lag1Trend_residue_bestCycle_byMAPE None 0.0002702215816969833 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation  ...  ForecastMAPE      TestMAPE
0   None         _ECON0212  ...  1.740000e-02  3.430000e-02
1   None         _ECON0212  ...  1.740000e-02  3.430000e-02
2   None   CumSum_ECON0212  ...  1.740000e-02  3.430000e-02
3   None     Diff_ECON0212  ...  1.740000e-02  3.430000e-02
4   None     Diff_ECON0212  ...  1.740000e-02  3.430000e-02
..   ...               ...  ...           ...           ...
59  None  RelDiff_ECON0212  ...  3.343197e+06  4.230424e+06
60  None  RelDiff_ECON0212  ...  3.343197e+06  4.230424e+06
61  None  RelDiff_ECON0212  ...  3.343197e+06  4.230424e+06
62  None  RelDiff_ECON0212  ...  3.343197e+06  4.230424e+06
63  None  RelDiff_ECON0212  ...  3.343197e+06  4.230424e+06

[64 rows x 10 columns]
  Split   Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _ECON0212             T+S+R  ...  0.0456       0.0174   0.0343
1  None        _ECON0212             T+S+R  ...  0.0456       0.0174   0.0343
2  None  CumSum_ECON0212             T+S+R  ...  0.0457       0.0174   0.0343
3  None    Diff_ECON0212             T+S+R  ...  0.0456       0.0174   0.0343
4  None    Diff_ECON0212             T+S+R  ...  0.0456       0.0174   0.0343

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0212'], 'Horizon': 26}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.514, ('FORECASTING', {'Signals': ['ECON0212'], 'Horizon': 26}))
26 0     4.414
1     4.386
2     4.392
3     4.390
4     4.404
5     4.404
6     4.429
7     4.431
8     4.473
9     4.474
10    4.466
11    4.465
12    4.465
13    4.464
14    4.428
15    4.427
16    4.405
17    4.367
18    4.340
19    4.343
20    4.339
21    4.342
22    4.225
23    4.224
24    4.217
25    4.217
Name: ECON0212, dtype: float64
26 0     4.618
1     4.618
2     4.618
3     4.618
4     4.618
5     4.618
6     4.618
7     4.618
8     4.618
9     4.618
10    4.618
11    4.618
12    4.618
13    4.618
14    4.618
15    4.618
16    4.618
17    4.618
18    4.618
19    4.618
20    4.618
21    4.618
22    4.618
23    4.618
24    4.618
25    4.618
Name: ECON0212_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0212 ECON0212 [4.414, 4.386, 4.392, 4.39, 4.404, 4.404, 4.429, 4.431, 4.473, 4.474, 4.466, 4.465, 4.465, 4.464, 4.428, 4.427, 4.405, 4.367, 4.34, 4.343, 4.339, 4.342, 4.225, 4.224, 4.217, 4.217]
FORECAST_DETAIL_PREDICTED ECON0212 ECON0212 [4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618, 4.618]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0212 ECON0212 1303 26
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0212 ECON0212 5.31682014465332
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0212 ECON0212 Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0212 ECON0212 26
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0212 ECON0212 0.0542 0.0526 15.1696
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0212 ECON0212 0.2360384615384619 0.249256201219055 -8.685660322207696
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0212_26'
