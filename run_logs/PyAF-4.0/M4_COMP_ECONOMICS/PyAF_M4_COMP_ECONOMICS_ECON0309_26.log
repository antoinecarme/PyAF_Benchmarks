BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 284 H= 26 HEAD= [0 1 2 3 4] TAIL= [279 280 281 282 283]
SIGNAL :  ECON0309 N= 284 H= 26 HEAD= [2.13 2.33 2.35 2.33 2.27] TAIL= [4.07 3.6  3.66 3.34 3.23]
   ECON0309  Date
0      2.13     0
1      2.33     1
2      2.35     2
3      2.33     3
4      2.27     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 284 entries, 0 to 283
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0309  284 non-null    float64
 1   Date      284 non-null    int64  
dtypes: float64(1), int64(1)
memory usage: 6.7 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0309'], 'Transformations': [('ECON0309', 'None', '_', 'T+S+R'), ('ECON0309', 'None', 'Diff_', 'T+S+R'), ('ECON0309', 'None', 'RelDiff_', 'T+S+R'), ('ECON0309', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0309', 'Transformation': '_ECON0309'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.18, ('TRAINING', {'Signal': 'ECON0309', 'Transformation': '_ECON0309'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0309', 'Transformation': 'Diff_ECON0309'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.574, ('TRAINING', {'Signal': 'ECON0309', 'Transformation': 'Diff_ECON0309'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0309', 'Transformation': 'RelDiff_ECON0309'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.67, ('TRAINING', {'Signal': 'ECON0309', 'Transformation': 'RelDiff_ECON0309'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0309', 'Transformation': 'CumSum_ECON0309'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.593, ('TRAINING', {'Signal': 'ECON0309', 'Transformation': 'CumSum_ECON0309'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.02, ('SIGNAL_TRAINING', {'Signals': ['ECON0309'], 'Transformations': [('ECON0309', 'None', '_', 'T+S+R'), ('ECON0309', 'None', 'Diff_', 'T+S+R'), ('ECON0309', 'None', 'RelDiff_', 'T+S+R'), ('ECON0309', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0309'], 'Transformations': [('ECON0309', [('ECON0309', 'None', 'CumSum_', 'T+S+R'), ('ECON0309', 'None', 'Diff_', 'T+S+R'), ('ECON0309', 'None', 'RelDiff_', 'T+S+R'), ('ECON0309', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0309', 'Transformations': [('ECON0309', 'None', 'CumSum_', 'T+S+R'), ('ECON0309', 'None', 'Diff_', 'T+S+R'), ('ECON0309', 'None', 'RelDiff_', 'T+S+R'), ('ECON0309', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'ECON0309', 'Transformations': [('ECON0309', 'None', 'CumSum_', 'T+S+R'), ('ECON0309', 'None', 'Diff_', 'T+S+R'), ('ECON0309', 'None', 'RelDiff_', 'T+S+R'), ('ECON0309', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0309', 'Model': '_ECON0309_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0309', 'Model': '_ECON0309_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0309'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.603, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0309'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.637, ('FINALIZE_TRAINING', {'Signals': ['ECON0309'], 'Transformations': [('ECON0309', [('ECON0309', 'None', 'CumSum_', 'T+S+R'), ('ECON0309', 'None', 'Diff_', 'T+S+R'), ('ECON0309', 'None', 'RelDiff_', 'T+S+R'), ('ECON0309', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=205 TimeDelta=1 Horizon=26
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0309' Length=284  Min=0.22 Max=4.07  Mean=1.8884154929577475 StdDev=0.5866375508761745
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ECON0309' Min=0.0 Max=1.0  Mean=0.43335467349551837 StdDev=0.1523733898379674
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ECON0309_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ECON0309_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ECON0309_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_ECON0309_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0309 MAPE_Forecast=0.1168 MAPE_Test=0.1069
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0309 SMAPE_Forecast=0.1084 SMAPE_Test=0.1106
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9951 MASE_Forecast=0.9845 MASE_Test=1.0149
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.09027687378640777 CRPS_Forecast=0.21937984615384612 CRPS_Test=0.31315384615384617
INFO:pyaf.std:MODEL_L1 L1_Fit=0.059368932038834955 L1_Forecast=0.10057692307692306 L1_Test=0.21230769230769228
INFO:pyaf.std:MODEL_L2 L2_Fit=0.07503720759910944 L2_Forecast=0.12838493800945772 L2_Test=0.3068324524005795
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.3286921900853432 LnQ_Forecast=1.7678158831233997 LnQ_Test=0.6439404282192461
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.050000000000000044 MedAE_Forecast=0.08000000000000007 MedAE_Test=0.12
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.49610389610389605
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _ECON0309_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0   None     Diff_ECON0309             T+S+R  ...  0.0311       0.1157   0.1181
1   None     Diff_ECON0309             T+S+R  ...  0.0311       0.1157   0.1181
2   None         _ECON0309             T+S+R  ...  0.0301       0.1161   0.1068
3   None         _ECON0309             T+S+R  ...  0.0301       0.1161   0.1068
4   None         _ECON0309             T+S+R  ...  0.0309       0.1168   0.1069
..   ...               ...               ...  ...     ...          ...      ...
59  None  RelDiff_ECON0309             T+S+R  ...  0.1975       3.3281   2.5741
60  None  RelDiff_ECON0309             T+S+R  ...  0.1912       3.3538   1.4374
61  None  RelDiff_ECON0309             T+S+R  ...  0.1912       3.3538   1.4374
62  None  RelDiff_ECON0309             T+S+R  ...  0.1886       3.6685   1.7793
63  None  RelDiff_ECON0309             T+S+R  ...  0.1886       3.6685   1.7793

[64 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None  Diff_ECON0309             T+S+R  ...  0.0311       0.1157   0.1181
1  None  Diff_ECON0309             T+S+R  ...  0.0311       0.1157   0.1181
2  None      _ECON0309             T+S+R  ...  0.0301       0.1161   0.1068
3  None      _ECON0309             T+S+R  ...  0.0301       0.1161   0.1068
4  None      _ECON0309             T+S+R  ...  0.0309       0.1168   0.1069

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0309'], 'Horizon': 26}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.409, ('FORECASTING', {'Signals': ['ECON0309'], 'Horizon': 26}))
26 0     3.29
1     3.09
2     2.44
3     2.35
4     2.14
5     1.88
6     1.59
7     1.89
8     2.00
9     2.03
10    2.12
11    1.66
12    1.33
13    1.29
14    1.33
15    1.25
16    1.41
17    1.39
18    1.40
19    1.29
20    1.23
21    1.20
22    1.07
23    1.11
24    1.21
25    1.32
Name: ECON0309, dtype: float64
26 0     3.23
1     3.23
2     3.23
3     3.23
4     3.23
5     3.23
6     3.23
7     3.23
8     3.23
9     3.23
10    3.23
11    3.23
12    3.23
13    3.23
14    3.23
15    3.23
16    3.23
17    3.23
18    3.23
19    3.23
20    3.23
21    3.23
22    3.23
23    3.23
24    3.23
25    3.23
Name: ECON0309_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0309 ECON0309 [3.29, 3.09, 2.44, 2.35, 2.14, 1.88, 1.59, 1.89, 2.0, 2.03, 2.12, 1.66, 1.33, 1.29, 1.33, 1.25, 1.41, 1.39, 1.4, 1.29, 1.23, 1.2, 1.07, 1.11, 1.21, 1.32]
FORECAST_DETAIL_PREDICTED ECON0309 ECON0309 [3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23, 3.23]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0309 ECON0309 284 26
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0309 ECON0309 4.1632819175720215
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0309 ECON0309 Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0309 ECON0309 26
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0309 ECON0309 1.0822 0.6524 9.686
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0309 ECON0309 1.5303846153846157 1.6324980857569176 -6.906324317520793
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0309_26'
