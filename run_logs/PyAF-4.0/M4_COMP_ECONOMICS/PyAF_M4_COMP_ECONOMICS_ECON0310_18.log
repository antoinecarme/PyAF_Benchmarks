BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 16 H= 18 HEAD= [0 1 2 3 4] TAIL= [11 12 13 14 15]
SIGNAL :  ECON0310 N= 16 H= 18 HEAD= [1.88 1.69 1.93 2.06 2.12] TAIL= [2.49 2.28 2.32 2.42 2.3 ]
   ECON0310  Date
0      1.88     0
1      1.69     1
2      1.93     2
3      2.06     3
4      2.12     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0310  16 non-null     float64
 1   Date      16 non-null     int64  
dtypes: float64(1), int64(1)
memory usage: 384.0 bytes
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0310'], 'Transformations': [('ECON0310', 'None', '_', 'T+S+R'), ('ECON0310', 'None', 'Diff_', 'T+S+R'), ('ECON0310', 'None', 'RelDiff_', 'T+S+R'), ('ECON0310', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0310', 'Transformation': '_ECON0310'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.123, ('TRAINING', {'Signal': 'ECON0310', 'Transformation': '_ECON0310'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0310', 'Transformation': 'Diff_ECON0310'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.444, ('TRAINING', {'Signal': 'ECON0310', 'Transformation': 'Diff_ECON0310'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0310', 'Transformation': 'RelDiff_ECON0310'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.545, ('TRAINING', {'Signal': 'ECON0310', 'Transformation': 'RelDiff_ECON0310'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0310', 'Transformation': 'CumSum_ECON0310'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.455, ('TRAINING', {'Signal': 'ECON0310', 'Transformation': 'CumSum_ECON0310'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.571, ('SIGNAL_TRAINING', {'Signals': ['ECON0310'], 'Transformations': [('ECON0310', 'None', '_', 'T+S+R'), ('ECON0310', 'None', 'Diff_', 'T+S+R'), ('ECON0310', 'None', 'RelDiff_', 'T+S+R'), ('ECON0310', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0310'], 'Transformations': [('ECON0310', [('ECON0310', 'None', 'CumSum_', 'T+S+R'), ('ECON0310', 'None', 'Diff_', 'T+S+R'), ('ECON0310', 'None', 'RelDiff_', 'T+S+R'), ('ECON0310', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0310', 'Transformations': [('ECON0310', 'None', 'CumSum_', 'T+S+R'), ('ECON0310', 'None', 'Diff_', 'T+S+R'), ('ECON0310', 'None', 'RelDiff_', 'T+S+R'), ('ECON0310', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.008, ('MODEL_SELECTION', {'Signal': 'ECON0310', 'Transformations': [('ECON0310', 'None', 'CumSum_', 'T+S+R'), ('ECON0310', 'None', 'Diff_', 'T+S+R'), ('ECON0310', 'None', 'RelDiff_', 'T+S+R'), ('ECON0310', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0310', 'Model': 'Diff_ECON0310_LinearTrend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.022, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0310', 'Model': 'Diff_ECON0310_LinearTrend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0310'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.385, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0310'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.416, ('FINALIZE_TRAINING', {'Signals': ['ECON0310'], 'Transformations': [('ECON0310', [('ECON0310', 'None', 'CumSum_', 'T+S+R'), ('ECON0310', 'None', 'Diff_', 'T+S+R'), ('ECON0310', 'None', 'RelDiff_', 'T+S+R'), ('ECON0310', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=15 TimeDelta=1 Horizon=18
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0310' Length=16  Min=1.69 Max=2.5  Mean=2.186875 StdDev=0.23153614053749796
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='Diff_ECON0310' Min=-0.25925925925925974 Max=0.2962962962962963  Mean=0.0324074074074074 StdDev=0.15743010003455735
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE 'Diff_'
INFO:pyaf.std:BEST_DECOMPOSITION  'Diff_ECON0310_LinearTrend_residue_bestCycle_byMAPE_residue_NoAR' [LinearTrend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL 'Diff_ECON0310_LinearTrend' [LinearTrend]
INFO:pyaf.std:CYCLE_DETAIL 'Diff_ECON0310_LinearTrend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL 'Diff_ECON0310_LinearTrend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0505 MAPE_Forecast=0.0505 MAPE_Test=0.0505
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0507 SMAPE_Forecast=0.0507 SMAPE_Test=0.0507
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9578 MASE_Forecast=0.9578 MASE_Test=0.9578
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.05187928650442478 CRPS_Forecast=0.05187928650442478 CRPS_Test=0.05187928650442478
INFO:pyaf.std:MODEL_L1 L1_Fit=0.10983268805309743 L1_Forecast=0.10983268805309743 L1_Test=0.10983268805309743
INFO:pyaf.std:MODEL_L2 L2_Fit=0.14350771828114778 L2_Forecast=0.14350771828114778 L2_Test=0.14350771828114778
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.07101263047061837 LnQ_Forecast=0.07101263047061837 LnQ_Test=0.07101263047061837
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.0917278761061947 MedAE_Forecast=0.0917278761061947 MedAE_Test=0.0917278761061947
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:DIFFERENCING_TRANSFORMATION Difference 0.23456790123456783
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LINEAR_RIDGE_TREND LinearTrend (0.054367420517863016, array([-0.04392003]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES Diff_ECON0310_LinearTrend_residue_bestCycle_byMAPE None 0.02022014640008757 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation  ... ForecastMAPE     TestMAPE
0   None   CumSum_ECON0310  ...       0.0437       0.0437
1   None   CumSum_ECON0310  ...       0.0437       0.0437
2   None  RelDiff_ECON0310  ...       0.0446       0.0446
3   None  RelDiff_ECON0310  ...       0.0446       0.0446
4   None     Diff_ECON0310  ...       0.0454       0.0454
..   ...               ...  ...          ...          ...
59  None  RelDiff_ECON0310  ...   54803.6875   54803.6875
60  None  RelDiff_ECON0310  ...   58523.2656   58523.2656
61  None  RelDiff_ECON0310  ...   58523.2656   58523.2656
62  None  RelDiff_ECON0310  ...  121165.6776  121165.6776
63  None  RelDiff_ECON0310  ...  121165.6776  121165.6776

[64 rows x 10 columns]
  Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None   CumSum_ECON0310             T+S+R  ...  0.0437       0.0437   0.0437
1  None   CumSum_ECON0310             T+S+R  ...  0.0437       0.0437   0.0437
2  None  RelDiff_ECON0310             T+S+R  ...  0.0446       0.0446   0.0446
3  None  RelDiff_ECON0310             T+S+R  ...  0.0446       0.0446   0.0446
4  None     Diff_ECON0310             T+S+R  ...  0.0454       0.0454   0.0454

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0310'], 'Horizon': 18}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.294, ('FORECASTING', {'Signals': ['ECON0310'], 'Horizon': 18}))
18 0     2.25
1     2.43
2     2.34
3     2.14
4     2.21
5     2.33
6     2.67
7     2.63
8     2.45
9     2.23
10    2.15
11    1.66
12    1.67
13    1.26
14    1.13
15    0.76
16    1.03
17    1.18
Name: ECON0310, dtype: float64
18 0     2.306091
1     2.309810
2     2.311157
3     2.310133
4     2.306737
5     2.300969
6     2.292830
7     2.282319
8     2.269436
9     2.254181
10    2.236555
11    2.216558
12    2.194188
13    2.169447
14    2.142334
15    2.112850
16    2.080993
17    2.046765
Name: ECON0310_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0310 ECON0310 [2.25, 2.43, 2.34, 2.14, 2.21, 2.33, 2.67, 2.63, 2.45, 2.23, 2.15, 1.66, 1.67, 1.26, 1.13, 0.76, 1.03, 1.18]
FORECAST_DETAIL_PREDICTED ECON0310 ECON0310 [2.3060907079646014, 2.3098097345132738, 2.3111570796460175, 2.310132743362831, 2.3067367256637166, 2.300969026548672, 2.2928296460176987, 2.282318584070796, 2.269435840707964, 2.2541814159292026, 2.2365553097345128, 2.216557522123893, 2.1941880530973443, 2.169446902654866, 2.1423340707964593, 2.112849557522123, 2.0809933628318573, 2.0467654867256626]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0310 ECON0310 16 18
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0310 ECON0310 3.3835346698760986
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0310 ECON0310 LinearTrend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0310 ECON0310 18
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0310 ECON0310 0.3568 0.2501 2.1963
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0310 ECON0310 0.4327951081612582 0.6001807254432218 -0.04284562448026441
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0310_18'
