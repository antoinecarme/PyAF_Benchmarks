BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 75 H= 8 HEAD= [0 1 2 3 4] TAIL= [70 71 72 73 74]
SIGNAL :  ECON0410 N= 75 H= 8 HEAD= [90.01  91.419 92.886 95.405 95.807] TAIL= [139.863 141.663 143.827 144.488 144.499]
   ECON0410  Date
0    90.010     0
1    91.419     1
2    92.886     2
3    95.405     3
4    95.807     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 75 entries, 0 to 74
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0410  75 non-null     float64
 1   Date      75 non-null     int64  
dtypes: float64(1), int64(1)
memory usage: 1.8 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0410'], 'Transformations': [('ECON0410', 'None', '_', 'T+S+R'), ('ECON0410', 'None', 'Diff_', 'T+S+R'), ('ECON0410', 'None', 'RelDiff_', 'T+S+R'), ('ECON0410', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0410', 'Transformation': '_ECON0410'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.289, ('TRAINING', {'Signal': 'ECON0410', 'Transformation': '_ECON0410'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0410', 'Transformation': 'Diff_ECON0410'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.789, ('TRAINING', {'Signal': 'ECON0410', 'Transformation': 'Diff_ECON0410'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0410', 'Transformation': 'RelDiff_ECON0410'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.9, ('TRAINING', {'Signal': 'ECON0410', 'Transformation': 'RelDiff_ECON0410'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0410', 'Transformation': 'CumSum_ECON0410'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.734, ('TRAINING', {'Signal': 'ECON0410', 'Transformation': 'CumSum_ECON0410'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.713, ('SIGNAL_TRAINING', {'Signals': ['ECON0410'], 'Transformations': [('ECON0410', 'None', '_', 'T+S+R'), ('ECON0410', 'None', 'Diff_', 'T+S+R'), ('ECON0410', 'None', 'RelDiff_', 'T+S+R'), ('ECON0410', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0410'], 'Transformations': [('ECON0410', [('ECON0410', 'None', 'CumSum_', 'T+S+R'), ('ECON0410', 'None', 'Diff_', 'T+S+R'), ('ECON0410', 'None', 'RelDiff_', 'T+S+R'), ('ECON0410', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0410', 'Transformations': [('ECON0410', 'None', 'CumSum_', 'T+S+R'), ('ECON0410', 'None', 'Diff_', 'T+S+R'), ('ECON0410', 'None', 'RelDiff_', 'T+S+R'), ('ECON0410', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.009, ('MODEL_SELECTION', {'Signal': 'ECON0410', 'Transformations': [('ECON0410', 'None', 'CumSum_', 'T+S+R'), ('ECON0410', 'None', 'Diff_', 'T+S+R'), ('ECON0410', 'None', 'RelDiff_', 'T+S+R'), ('ECON0410', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0410', 'Model': '_ECON0410_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.033, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0410', 'Model': '_ECON0410_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0410'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.258, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0410'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.301, ('FINALIZE_TRAINING', {'Signals': ['ECON0410'], 'Transformations': [('ECON0410', [('ECON0410', 'None', 'CumSum_', 'T+S+R'), ('ECON0410', 'None', 'Diff_', 'T+S+R'), ('ECON0410', 'None', 'RelDiff_', 'T+S+R'), ('ECON0410', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=52 TimeDelta=1 Horizon=8
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0410' Length=75  Min=90.01 Max=145.186  Mean=119.47601333333334 StdDev=18.658769314538286
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ECON0410' Min=0.0 Max=1.0  Mean=0.5340367792760135 StdDev=0.3381682128921684
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ECON0410_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ECON0410_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ECON0410_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_ECON0410_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0108 MAPE_Forecast=0.0097 MAPE_Test=0.0065
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0109 SMAPE_Forecast=0.0096 SMAPE_Test=0.0065
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9811 MASE_Forecast=0.984 MASE_Test=1.0358
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=4.428860795687331 CRPS_Forecast=1.148788638095238 CRPS_Test=1.1771250000000038
INFO:pyaf.std:MODEL_L1 L1_Fit=1.2192452830188683 L1_Forecast=1.3316428571428571 L1_Test=0.9205000000000005
INFO:pyaf.std:MODEL_L2 L2_Fit=1.4717936945255892 L2_Forecast=1.5305551980525613 L2_Test=1.161244160372831
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.009015910813114867 LnQ_Forecast=0.0017098784979296209 LnQ_Test=0.0005411377948691764
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=1.1730000000000018 MedAE_Forecast=0.9549999999999983 MedAE_Test=0.7960000000000065
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _ECON0410_Lag1Trend_residue_bestCycle_byMAPE None 0.0189393939393937 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0   None         _ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
1   None         _ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
2   None   CumSum_ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
3   None     Diff_ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
4   None     Diff_ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
..   ...               ...               ...  ...     ...          ...      ...
59  None  RelDiff_ECON0410             T+S+R  ...  0.1750       0.3485   0.3626
60  None  RelDiff_ECON0410             T+S+R  ...  0.1750       0.3485   0.3626
61  None  RelDiff_ECON0410             T+S+R  ...  0.1750       0.3485   0.3626
62  None  RelDiff_ECON0410             T+S+R  ...  0.1750       0.3485   0.3626
63  None  RelDiff_ECON0410             T+S+R  ...  0.1750       0.3485   0.3626

[64 rows x 10 columns]
  Split   Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
1  None        _ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
2  None  CumSum_ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
3  None    Diff_ECON0410             T+S+R  ...  0.0108       0.0097   0.0065
4  None    Diff_ECON0410             T+S+R  ...  0.0108       0.0097   0.0065

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0410'], 'Horizon': 8}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.206, ('FORECASTING', {'Signals': ['ECON0410'], 'Horizon': 8}))
8 0    146.562
1    147.371
2    147.391
3    147.873
4    147.362
5    148.014
6    149.272
7    150.270
Name: ECON0410, dtype: float64
8 0    144.499
1    144.499
2    144.499
3    144.499
4    144.499
5    144.499
6    144.499
7    144.499
Name: ECON0410_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0410 ECON0410 [146.562, 147.371, 147.391, 147.873, 147.362, 148.014, 149.272, 150.27]
FORECAST_DETAIL_PREDICTED ECON0410 ECON0410 [144.499, 144.499, 144.499, 144.499, 144.499, 144.499, 144.499, 144.499]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0410 ECON0410 75 8
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0410 ECON0410 4.337524890899658
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0410 ECON0410 Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0410 ECON0410 8
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0410 ECON0410 0.0237 0.024 5.2025
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0410 ECON0410 3.515375000000006 3.6893403373774074 -9.859701564399149
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0410_8'
