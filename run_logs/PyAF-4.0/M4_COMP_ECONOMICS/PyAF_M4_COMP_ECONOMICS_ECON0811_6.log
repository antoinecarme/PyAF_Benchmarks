BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 38 H= 6 HEAD= [0 1 2 3 4] TAIL= [33 34 35 36 37]
SIGNAL :  ECON0811 N= 38 H= 6 HEAD= [13.4 13.8 13.6 12.7 12.4] TAIL= [17.3 17.7 18.  17.  15.5]
   ECON0811  Date
0      13.4     0
1      13.8     1
2      13.6     2
3      12.7     3
4      12.4     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 38 entries, 0 to 37
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0811  38 non-null     float64
 1   Date      38 non-null     int64  
dtypes: float64(1), int64(1)
memory usage: 912.0 bytes
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0811'], 'Transformations': [('ECON0811', 'None', '_', 'T+S+R'), ('ECON0811', 'None', 'Diff_', 'T+S+R'), ('ECON0811', 'None', 'RelDiff_', 'T+S+R'), ('ECON0811', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0811', 'Transformation': '_ECON0811'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.076, ('TRAINING', {'Signal': 'ECON0811', 'Transformation': '_ECON0811'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0811', 'Transformation': 'Diff_ECON0811'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.473, ('TRAINING', {'Signal': 'ECON0811', 'Transformation': 'Diff_ECON0811'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0811', 'Transformation': 'RelDiff_ECON0811'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.565, ('TRAINING', {'Signal': 'ECON0811', 'Transformation': 'RelDiff_ECON0811'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0811', 'Transformation': 'CumSum_ECON0811'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.421, ('TRAINING', {'Signal': 'ECON0811', 'Transformation': 'CumSum_ECON0811'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.537, ('SIGNAL_TRAINING', {'Signals': ['ECON0811'], 'Transformations': [('ECON0811', 'None', '_', 'T+S+R'), ('ECON0811', 'None', 'Diff_', 'T+S+R'), ('ECON0811', 'None', 'RelDiff_', 'T+S+R'), ('ECON0811', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0811'], 'Transformations': [('ECON0811', [('ECON0811', 'None', 'CumSum_', 'T+S+R'), ('ECON0811', 'None', 'Diff_', 'T+S+R'), ('ECON0811', 'None', 'RelDiff_', 'T+S+R'), ('ECON0811', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0811', 'Transformations': [('ECON0811', 'None', 'CumSum_', 'T+S+R'), ('ECON0811', 'None', 'Diff_', 'T+S+R'), ('ECON0811', 'None', 'RelDiff_', 'T+S+R'), ('ECON0811', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'ECON0811', 'Transformations': [('ECON0811', 'None', 'CumSum_', 'T+S+R'), ('ECON0811', 'None', 'Diff_', 'T+S+R'), ('ECON0811', 'None', 'RelDiff_', 'T+S+R'), ('ECON0811', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0811', 'Model': '_ECON0811_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.02, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0811', 'Model': '_ECON0811_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0811'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.118, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0811'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.144, ('FINALIZE_TRAINING', {'Signals': ['ECON0811'], 'Transformations': [('ECON0811', [('ECON0811', 'None', 'CumSum_', 'T+S+R'), ('ECON0811', 'None', 'Diff_', 'T+S+R'), ('ECON0811', 'None', 'RelDiff_', 'T+S+R'), ('ECON0811', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=24 TimeDelta=1 Horizon=6
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0811' Length=38  Min=11.6 Max=18.0  Mean=13.92368421052632 StdDev=1.7209902612229904
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ECON0811' Min=0.0 Max=1.0  Mean=0.36307565789473684 StdDev=0.26890472831609225
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ECON0811_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ECON0811_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ECON0811_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_ECON0811_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.045 MAPE_Forecast=0.0219 MAPE_Test=0.0472
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0447 SMAPE_Forecast=0.0223 SMAPE_Test=0.0466
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.96 MASE_Forecast=1.0952 MASE_Test=1.0586
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.23472000000000004 CRPS_Forecast=0.19285714285714306 CRPS_Test=0.2833333333333332
INFO:pyaf.std:MODEL_L1 L1_Fit=0.58 L1_Forecast=0.3285714285714287 L1_Test=0.7833333333333332
INFO:pyaf.std:MODEL_L2 L2_Fit=0.7856207736560941 L2_Forecast=0.4017817460121498 L2_Test=0.8897565210026092
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.0918792070474205 LnQ_Forecast=0.005101056375284265 LnQ_Test=0.017231144833599
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.5 MedAE_Forecast=0.29999999999999893 MedAE_Test=0.75
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.2812500000000001
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _ECON0811_Lag1Trend_residue_bestCycle_byMAPE None 0.015625000000000222 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation  ...  ForecastMAPE      TestMAPE
0   None     Diff_ECON0811  ...  1.750000e-02  8.800000e-02
1   None     Diff_ECON0811  ...  1.750000e-02  8.800000e-02
2   None     Diff_ECON0811  ...  2.110000e-02  4.870000e-02
3   None     Diff_ECON0811  ...  2.110000e-02  4.870000e-02
4   None     Diff_ECON0811  ...  2.150000e-02  9.450000e-02
..   ...               ...  ...           ...           ...
59  None  RelDiff_ECON0811  ...  4.809214e+05  7.014815e+06
60  None  RelDiff_ECON0811  ...  2.725861e+06  1.058159e+07
61  None  RelDiff_ECON0811  ...  2.725861e+06  1.058159e+07
62  None  RelDiff_ECON0811  ...  4.297756e+06  1.058159e+07
63  None  RelDiff_ECON0811  ...  4.297756e+06  1.058159e+07

[64 rows x 10 columns]
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None  Diff_ECON0811             T+S+R  ...  0.0455       0.0175   0.0880
1  None  Diff_ECON0811             T+S+R  ...  0.0455       0.0175   0.0880
2  None  Diff_ECON0811             T+S+R  ...  0.0449       0.0211   0.0487
3  None  Diff_ECON0811             T+S+R  ...  0.0449       0.0211   0.0487
4  None  Diff_ECON0811             T+S+R  ...  0.0481       0.0215   0.0945

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0811'], 'Horizon': 6}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.091, ('FORECASTING', {'Signals': ['ECON0811'], 'Horizon': 6}))
6 0    15.5
1    14.4
2    14.7
3    14.3
4    14.2
5    13.5
Name: ECON0811, dtype: float64
6 0    15.5
1    15.5
2    15.5
3    15.5
4    15.5
5    15.5
Name: ECON0811_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0811 ECON0811 [15.5, 14.4, 14.7, 14.3, 14.2, 13.5]
FORECAST_DETAIL_PREDICTED ECON0811 ECON0811 [15.5, 15.5, 15.5, 15.5, 15.5, 15.5]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0811 ECON0811 38 6
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0811 ECON0811 2.874784469604492
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0811 ECON0811 Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0811 ECON0811 6
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0811 ECON0811 0.0757 0.0721 2.0513
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0811 ECON0811 1.0666666666666667 1.2233832869001713 -3.1702786375772316
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0811_6'
