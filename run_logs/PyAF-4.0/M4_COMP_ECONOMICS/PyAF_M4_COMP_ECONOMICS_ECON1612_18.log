BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 131 H= 18 HEAD= [0 1 2 3 4] TAIL= [126 127 128 129 130]
SIGNAL :  ECON1612 N= 131 H= 18 HEAD= [68.3 68.7 68.9 69.1 69.3] TAIL= [106.2 106.1 106.3 106.2 106.3]
   ECON1612  Date
0      68.3     0
1      68.7     1
2      68.9     2
3      69.1     3
4      69.3     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 131 entries, 0 to 130
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON1612  131 non-null    float64
 1   Date      131 non-null    int64  
dtypes: float64(1), int64(1)
memory usage: 3.1 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON1612'], 'Transformations': [('ECON1612', 'None', '_', 'T+S+R'), ('ECON1612', 'None', 'Diff_', 'T+S+R'), ('ECON1612', 'None', 'RelDiff_', 'T+S+R'), ('ECON1612', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON1612', 'Transformation': '_ECON1612'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.036, ('TRAINING', {'Signal': 'ECON1612', 'Transformation': '_ECON1612'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON1612', 'Transformation': 'Diff_ECON1612'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.532, ('TRAINING', {'Signal': 'ECON1612', 'Transformation': 'Diff_ECON1612'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON1612', 'Transformation': 'RelDiff_ECON1612'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.631, ('TRAINING', {'Signal': 'ECON1612', 'Transformation': 'RelDiff_ECON1612'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON1612', 'Transformation': 'CumSum_ECON1612'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.499, ('TRAINING', {'Signal': 'ECON1612', 'Transformation': 'CumSum_ECON1612'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.7, ('SIGNAL_TRAINING', {'Signals': ['ECON1612'], 'Transformations': [('ECON1612', 'None', '_', 'T+S+R'), ('ECON1612', 'None', 'Diff_', 'T+S+R'), ('ECON1612', 'None', 'RelDiff_', 'T+S+R'), ('ECON1612', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON1612'], 'Transformations': [('ECON1612', [('ECON1612', 'None', 'CumSum_', 'T+S+R'), ('ECON1612', 'None', 'Diff_', 'T+S+R'), ('ECON1612', 'None', 'RelDiff_', 'T+S+R'), ('ECON1612', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON1612', 'Transformations': [('ECON1612', 'None', 'CumSum_', 'T+S+R'), ('ECON1612', 'None', 'Diff_', 'T+S+R'), ('ECON1612', 'None', 'RelDiff_', 'T+S+R'), ('ECON1612', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'ECON1612', 'Transformations': [('ECON1612', 'None', 'CumSum_', 'T+S+R'), ('ECON1612', 'None', 'Diff_', 'T+S+R'), ('ECON1612', 'None', 'RelDiff_', 'T+S+R'), ('ECON1612', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON1612', 'Model': '_ECON1612_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.022, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON1612', 'Model': '_ECON1612_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON1612'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.373, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON1612'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.401, ('FINALIZE_TRAINING', {'Signals': ['ECON1612'], 'Transformations': [('ECON1612', [('ECON1612', 'None', 'CumSum_', 'T+S+R'), ('ECON1612', 'None', 'Diff_', 'T+S+R'), ('ECON1612', 'None', 'RelDiff_', 'T+S+R'), ('ECON1612', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=89 TimeDelta=1 Horizon=18
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON1612' Length=131  Min=68.3 Max=106.3  Mean=83.1160305343512 StdDev=11.024717661260901
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ECON1612' Min=0.0 Max=1.0  Mean=0.3898955403776618 StdDev=0.29012414898055
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ECON1612_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ECON1612_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ECON1612_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_ECON1612_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0028 MAPE_Forecast=0.0051 MAPE_Test=0.0042
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0029 SMAPE_Forecast=0.0052 SMAPE_Test=0.0042
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9889 MASE_Forecast=0.9652 MASE_Test=0.9444
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=1.26540975308642 CRPS_Forecast=1.417934782608696 CRPS_Test=0.8449074074074071
INFO:pyaf.std:MODEL_L1 L1_Fit=0.22333333333333327 L1_Forecast=0.4826086956521743 L1_Test=0.4333333333333332
INFO:pyaf.std:MODEL_L2 L2_Fit=0.6838615844355244 L2_Forecast=1.284861691084838 L2_Test=0.8844332774281052
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.006634234061037941 LnQ_Forecast=0.004319152253908628 LnQ_Test=0.0013387778617811744
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.09999999999999432 MedAE_Forecast=0.09999999999999432 MedAE_Test=0.10000000000000142
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _ECON1612_Lag1Trend_residue_bestCycle_byMAPE None 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0   None     Diff_ECON1612             T+S+R  ...  0.0029       0.0049   0.0042
1   None     Diff_ECON1612             T+S+R  ...  0.0029       0.0049   0.0042
2   None         _ECON1612             T+S+R  ...  0.0028       0.0051   0.0042
3   None         _ECON1612             T+S+R  ...  0.0028       0.0051   0.0042
4   None   CumSum_ECON1612             T+S+R  ...  0.0028       0.0051   0.0042
..   ...               ...               ...  ...     ...          ...      ...
59  None  RelDiff_ECON1612             T+S+R  ...  0.1039       0.2671   0.3379
60  None  RelDiff_ECON1612             T+S+R  ...  0.1039       0.2671   0.3379
61  None  RelDiff_ECON1612             T+S+R  ...  0.1039       0.2671   0.3379
62  None  RelDiff_ECON1612             T+S+R  ...  0.1039       0.2671   0.3379
63  None  RelDiff_ECON1612             T+S+R  ...  0.1039       0.2671   0.3379

[64 rows x 10 columns]
  Split   Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None    Diff_ECON1612             T+S+R  ...  0.0029       0.0049   0.0042
1  None    Diff_ECON1612             T+S+R  ...  0.0029       0.0049   0.0042
2  None        _ECON1612             T+S+R  ...  0.0028       0.0051   0.0042
3  None        _ECON1612             T+S+R  ...  0.0028       0.0051   0.0042
4  None  CumSum_ECON1612             T+S+R  ...  0.0028       0.0051   0.0042

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON1612'], 'Horizon': 18}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.275, ('FORECASTING', {'Signals': ['ECON1612'], 'Horizon': 18}))
18 0     106.3
1     106.3
2     108.3
3     108.3
4     108.5
5     108.5
6     108.6
7     108.7
8     108.7
9     108.8
10    108.9
11    108.9
12    108.9
13    111.1
14    111.2
15    111.4
16    111.6
17    111.8
Name: ECON1612, dtype: float64
18 0     106.3
1     106.3
2     106.3
3     106.3
4     106.3
5     106.3
6     106.3
7     106.3
8     106.3
9     106.3
10    106.3
11    106.3
12    106.3
13    106.3
14    106.3
15    106.3
16    106.3
17    106.3
Name: ECON1612_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON1612 ECON1612 [106.3, 106.3, 108.3, 108.3, 108.5, 108.5, 108.6, 108.7, 108.7, 108.8, 108.9, 108.9, 108.9, 111.1, 111.2, 111.4, 111.6, 111.8]
FORECAST_DETAIL_PREDICTED ECON1612 ECON1612 [106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3, 106.3]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON1612 ECON1612 131 18
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON1612 ECON1612 3.4629297256469727
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON1612 ECON1612 Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON1612 ECON1612 18
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON1612 ECON1612 0.026 0.0264 8.8263
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON1612 ECON1612 2.8555555555555583 3.2695565448543658 -3.2156280428340027
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON1612_18'
