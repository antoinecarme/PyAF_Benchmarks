BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 1303 H= 26 HEAD= [0 1 2 3 4] TAIL= [1298 1299 1300 1301 1302]
SIGNAL :  ECON0210 N= 1303 H= 26 HEAD= [172.092 170.931 169.138 167.399 166.347] TAIL= [864.583 866.906 872.413 871.816 875.146]
   ECON0210  Date
0   172.092     0
1   170.931     1
2   169.138     2
3   167.399     3
4   166.347     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1303 entries, 0 to 1302
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0210  1303 non-null   float64
 1   Date      1303 non-null   int64  
dtypes: float64(1), int64(1)
memory usage: 30.5 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0210'], 'Transformations': [('ECON0210', 'None', '_', 'T+S+R'), ('ECON0210', 'None', 'Diff_', 'T+S+R'), ('ECON0210', 'None', 'RelDiff_', 'T+S+R'), ('ECON0210', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0210', 'Transformation': '_ECON0210'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.399, ('TRAINING', {'Signal': 'ECON0210', 'Transformation': '_ECON0210'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0210', 'Transformation': 'Diff_ECON0210'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.22, ('TRAINING', {'Signal': 'ECON0210', 'Transformation': 'Diff_ECON0210'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0210', 'Transformation': 'RelDiff_ECON0210'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.886, ('TRAINING', {'Signal': 'ECON0210', 'Transformation': 'RelDiff_ECON0210'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0210', 'Transformation': 'CumSum_ECON0210'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.757, ('TRAINING', {'Signal': 'ECON0210', 'Transformation': 'CumSum_ECON0210'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 4.265, ('SIGNAL_TRAINING', {'Signals': ['ECON0210'], 'Transformations': [('ECON0210', 'None', '_', 'T+S+R'), ('ECON0210', 'None', 'Diff_', 'T+S+R'), ('ECON0210', 'None', 'RelDiff_', 'T+S+R'), ('ECON0210', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0210'], 'Transformations': [('ECON0210', [('ECON0210', 'None', 'CumSum_', 'T+S+R'), ('ECON0210', 'None', 'Diff_', 'T+S+R'), ('ECON0210', 'None', 'RelDiff_', 'T+S+R'), ('ECON0210', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0210', 'Transformations': [('ECON0210', 'None', 'CumSum_', 'T+S+R'), ('ECON0210', 'None', 'Diff_', 'T+S+R'), ('ECON0210', 'None', 'RelDiff_', 'T+S+R'), ('ECON0210', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.006, ('MODEL_SELECTION', {'Signal': 'ECON0210', 'Transformations': [('ECON0210', 'None', 'CumSum_', 'T+S+R'), ('ECON0210', 'None', 'Diff_', 'T+S+R'), ('ECON0210', 'None', 'RelDiff_', 'T+S+R'), ('ECON0210', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0210', 'Model': '_ECON0210_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.028, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0210', 'Model': '_ECON0210_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0210'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.688, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0210'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.723, ('FINALIZE_TRAINING', {'Signals': ['ECON0210'], 'Transformations': [('ECON0210', [('ECON0210', 'None', 'CumSum_', 'T+S+R'), ('ECON0210', 'None', 'Diff_', 'T+S+R'), ('ECON0210', 'None', 'RelDiff_', 'T+S+R'), ('ECON0210', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=1020 TimeDelta=1 Horizon=26
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0210' Length=1303  Min=166.347 Max=875.146  Mean=463.81260936300833 StdDev=215.51634598207266
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ECON0210' Min=0.0 Max=1.0  Mean=0.41967554886929637 StdDev=0.30405847917685075
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ECON0210_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [Lag1Trend + Cycle_None + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ECON0210_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ECON0210_Lag1Trend_residue_bestCycle_byMAPE' [Cycle_None]
INFO:pyaf.std:AUTOREG_DETAIL '_ECON0210_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0037 MAPE_Forecast=0.0025 MAPE_Test=0.0032
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0037 SMAPE_Forecast=0.0025 SMAPE_Test=0.0032
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.999 MASE_Forecast=0.9964 MASE_Test=0.9643
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=46.08013353007887 CRPS_Forecast=10.851547056985295 CRPS_Test=4.461110769230772
INFO:pyaf.std:MODEL_L1 L1_Fit=1.3313525954946126 L1_Forecast=1.9484492187499987 L1_Test=2.6852307692307615
INFO:pyaf.std:MODEL_L2 L2_Fit=2.1103400176762213 L2_Forecast=2.6754810906463633 L2_Test=3.5929496132115335
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.026152226093280172 LnQ_Forecast=0.0030587928336007607 LnQ_Test=0.00047043562104167686
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.9670000000000414 MedAE_Forecast=1.3684999999999832 MedAE_Test=2.249499999999955
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.008105259742183615
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _ECON0210_Lag1Trend_residue_bestCycle_byMAPE None 0.0006461634398469696 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0   None         _ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
1   None         _ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
2   None   CumSum_ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
3   None     Diff_ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
4   None     Diff_ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
..   ...               ...               ...  ...     ...          ...      ...
59  None  RelDiff_ECON0210             T+S+R  ...  0.2106       1.0011   2.2332
60  None  RelDiff_ECON0210             T+S+R  ...  0.1777       1.0470   3.4098
61  None  RelDiff_ECON0210             T+S+R  ...  0.1777       1.0470   3.4098
62  None  RelDiff_ECON0210             T+S+R  ...  0.1556       1.1931   4.5062
63  None  RelDiff_ECON0210             T+S+R  ...  0.1556       1.1931   4.5062

[64 rows x 10 columns]
  Split   Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
1  None        _ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
2  None  CumSum_ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
3  None    Diff_ECON0210             T+S+R  ...  0.0037       0.0025   0.0032
4  None    Diff_ECON0210             T+S+R  ...  0.0037       0.0025   0.0032

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0210'], 'Horizon': 26}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.509, ('FORECASTING', {'Signals': ['ECON0210'], 'Horizon': 26}))
26 0     881.292
1     888.750
2     889.417
3     883.327
4     884.889
5     887.103
6     888.913
7     893.002
8     897.625
9     897.082
10    898.492
11    900.728
12    901.764
13    902.024
14    902.604
15    904.634
16    904.823
17    903.293
18    901.704
19    903.838
20    904.791
21    904.769
22    908.660
23    908.798
24    907.565
25    907.334
Name: ECON0210, dtype: float64
26 0     875.146
1     875.146
2     875.146
3     875.146
4     875.146
5     875.146
6     875.146
7     875.146
8     875.146
9     875.146
10    875.146
11    875.146
12    875.146
13    875.146
14    875.146
15    875.146
16    875.146
17    875.146
18    875.146
19    875.146
20    875.146
21    875.146
22    875.146
23    875.146
24    875.146
25    875.146
Name: ECON0210_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0210 ECON0210 [881.292, 888.75, 889.417, 883.327, 884.889, 887.103, 888.913, 893.002, 897.625, 897.082, 898.492, 900.728, 901.764, 902.024, 902.604, 904.634, 904.823, 903.293, 901.704, 903.838, 904.791, 904.769, 908.66, 908.798, 907.565, 907.334]
FORECAST_DETAIL_PREDICTED ECON0210 ECON0210 [875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146, 875.146]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0210 ECON0210 1303 26
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0210 ECON0210 5.594160795211792
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0210 ECON0210 Lag1Trend + Cycle_None + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0210 ECON0210 26
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0210 ECON0210 0.0258 0.0261 11.9588
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0210 ECON0210 23.208653846153883 24.636340008988007 -7.885525650629603
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0210_26'
