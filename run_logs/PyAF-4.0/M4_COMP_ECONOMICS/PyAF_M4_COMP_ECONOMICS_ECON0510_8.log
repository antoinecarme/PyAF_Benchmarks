BENCH_DATA M4_COMP_ECONOMICS
TIME :  Date N= 235 H= 8 HEAD= [0 1 2 3 4] TAIL= [230 231 232 233 234]
SIGNAL :  ECON0510 N= 235 H= 8 HEAD= [13.824 13.935 14.195 14.548 14.709] TAIL= [ 97.376  98.167  98.754  99.374 100.495]
   ECON0510  Date
0    13.824     0
1    13.935     1
2    14.195     2
3    14.548     3
4    14.709     4
<class 'pandas.core.frame.DataFrame'>
Int64Index: 235 entries, 0 to 234
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   ECON0510  235 non-null    float64
 1   Date      235 non-null    int64  
dtypes: float64(1), int64(1)
memory usage: 5.5 KB
None
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['ECON0510'], 'Transformations': [('ECON0510', 'None', '_', 'T+S+R'), ('ECON0510', 'None', 'Diff_', 'T+S+R'), ('ECON0510', 'None', 'RelDiff_', 'T+S+R'), ('ECON0510', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0510', 'Transformation': '_ECON0510'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.423, ('TRAINING', {'Signal': 'ECON0510', 'Transformation': '_ECON0510'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0510', 'Transformation': 'Diff_ECON0510'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.572, ('TRAINING', {'Signal': 'ECON0510', 'Transformation': 'Diff_ECON0510'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0510', 'Transformation': 'RelDiff_ECON0510'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.629, ('TRAINING', {'Signal': 'ECON0510', 'Transformation': 'RelDiff_ECON0510'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'ECON0510', 'Transformation': 'CumSum_ECON0510'}))
DEBUG:pyaf.std:CYCLE_TRAINING_FILTER_SEASONALS_START
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.538, ('TRAINING', {'Signal': 'ECON0510', 'Transformation': 'CumSum_ECON0510'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 3.164, ('SIGNAL_TRAINING', {'Signals': ['ECON0510'], 'Transformations': [('ECON0510', 'None', '_', 'T+S+R'), ('ECON0510', 'None', 'Diff_', 'T+S+R'), ('ECON0510', 'None', 'RelDiff_', 'T+S+R'), ('ECON0510', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['ECON0510'], 'Transformations': [('ECON0510', [('ECON0510', 'None', 'CumSum_', 'T+S+R'), ('ECON0510', 'None', 'Diff_', 'T+S+R'), ('ECON0510', 'None', 'RelDiff_', 'T+S+R'), ('ECON0510', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'ECON0510', 'Transformations': [('ECON0510', 'None', 'CumSum_', 'T+S+R'), ('ECON0510', 'None', 'Diff_', 'T+S+R'), ('ECON0510', 'None', 'RelDiff_', 'T+S+R'), ('ECON0510', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.005, ('MODEL_SELECTION', {'Signal': 'ECON0510', 'Transformations': [('ECON0510', 'None', 'CumSum_', 'T+S+R'), ('ECON0510', 'None', 'Diff_', 'T+S+R'), ('ECON0510', 'None', 'RelDiff_', 'T+S+R'), ('ECON0510', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0510', 'Model': '_ECON0510_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.021, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'ECON0510', 'Model': '_ECON0510_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0510'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.17, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'ECON0510'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.197, ('FINALIZE_TRAINING', {'Signals': ['ECON0510'], 'Transformations': [('ECON0510', [('ECON0510', 'None', 'CumSum_', 'T+S+R'), ('ECON0510', 'None', 'Diff_', 'T+S+R'), ('ECON0510', 'None', 'RelDiff_', 'T+S+R'), ('ECON0510', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=0 TimeMax=180 TimeDelta=1 Horizon=8
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='ECON0510' Length=235  Min=13.824 Max=100.495  Mean=45.26851914893617 StdDev=28.684415361082067
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_ECON0510' Min=0.0 Max=1.0  Mean=0.36280323463368574 StdDev=0.3309574755233244
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_ECON0510_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [Lag1Trend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_ECON0510_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_ECON0510_Lag1Trend_residue_zeroCycle[0.0]' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_ECON0510_Lag1Trend_residue_zeroCycle[0.0]_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0097 MAPE_Forecast=0.0047 MAPE_Test=0.0072
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0098 SMAPE_Forecast=0.0048 SMAPE_Test=0.0072
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.9945 MASE_Forecast=1.0068 MASE_Test=0.9491
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=4.746532767587477 CRPS_Forecast=1.335882881987578 CRPS_Test=0.7188125000000003
INFO:pyaf.std:MODEL_L1 L1_Fit=0.34985082872928147 L1_Forecast=0.4053695652173911 L1_Test=0.7073750000000008
INFO:pyaf.std:MODEL_L2 L2_Fit=0.46884900206818303 L2_Forecast=0.4403717056424429 L2_Test=0.7325200509201104
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.025838833619317093 LnQ_Forecast=0.0012225508127132675 LnQ_Test=0.0004479945862736527
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.24099999999999966 MedAE_Forecast=0.43599999999999994 MedAE_Test=0.6654999999999944
INFO:pyaf.std:MODEL_COMPLEXITY 2.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:ZERO_CYCLE_MODEL_VALUES _ECON0510_Lag1Trend_residue_zeroCycle[0.0] 0.0 {}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
   Split    Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0   None         _ECON0510             T+S+R  ...  0.0099       0.0017   0.0036
1   None         _ECON0510             T+S+R  ...  0.0099       0.0017   0.0036
2   None   CumSum_ECON0510             T+S+R  ...  0.0044       0.0022   0.0017
3   None         _ECON0510             T+S+R  ...  0.0084       0.0024   0.0047
4   None     Diff_ECON0510             T+S+R  ...  0.0055       0.0031   0.0016
..   ...               ...               ...  ...     ...          ...      ...
59  None  RelDiff_ECON0510             T+S+R  ...  0.4390       0.8383   0.8586
60  None  RelDiff_ECON0510             T+S+R  ...  0.4390       0.8383   0.8586
61  None  RelDiff_ECON0510             T+S+R  ...  0.4390       0.8383   0.8586
62  None  RelDiff_ECON0510             T+S+R  ...  0.4390       0.8383   0.8586
63  None  RelDiff_ECON0510             T+S+R  ...  0.4390       0.8383   0.8586

[64 rows x 10 columns]
  Split   Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None        _ECON0510             T+S+R  ...  0.0099       0.0017   0.0036
1  None        _ECON0510             T+S+R  ...  0.0099       0.0017   0.0036
2  None  CumSum_ECON0510             T+S+R  ...  0.0044       0.0022   0.0017
3  None        _ECON0510             T+S+R  ...  0.0084       0.0024   0.0047
4  None    Diff_ECON0510             T+S+R  ...  0.0055       0.0031   0.0016

[5 rows x 10 columns]
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['ECON0510'], 'Horizon': 8}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.128, ('FORECASTING', {'Signals': ['ECON0510'], 'Horizon': 8}))
8 0    101.377
1    101.803
2    102.567
3    103.316
4    103.298
5    104.250
6    105.074
7    105.681
Name: ECON0510, dtype: float64
8 0    100.495
1    100.495
2    100.495
3    100.495
4    100.495
5    100.495
6    100.495
7    100.495
Name: ECON0510_Forecast, dtype: float64
FORECAST_DETAIL_ACTUAL ECON0510 ECON0510 [101.377, 101.803, 102.567, 103.316, 103.298, 104.25, 105.074, 105.681]
FORECAST_DETAIL_PREDICTED ECON0510 ECON0510 [100.495, 100.495, 100.495, 100.495, 100.495, 100.495, 100.495, 100.495]
BENCHMARK_PERF_DETAIL_SIGNAL_HORIZON ECON0510 ECON0510 235 8
BENCHMARK_PERF_DETAIL_BENCH_TIME_IN_SECONDS PYAF_SYSTEM_DEPENDENT_ ECON0510 ECON0510 3.5765812397003174
BENCHMARK_PERF_DETAIL_BEST_MODEL ECON0510 ECON0510 Lag1Trend + NoCycle + NoAR
BENCHMARK_PERF_DETAIL_PERF_COUNT ECON0510 ECON0510 8
BENCHMARK_PERF_DETAIL_PERF_MAPE_SMAPE_MASE ECON0510 ECON0510 0.0281 0.0286 4.719
BENCHMARK_PERF_DETAIL_PERF_L1_L2_R2 ECON0510 ECON0510 2.9257499999999936 3.251128342591225 -4.259089212419152
BENCHMARK_SUCCESS 'M4_COMP_ECONOMICS_ECON0510_8'
